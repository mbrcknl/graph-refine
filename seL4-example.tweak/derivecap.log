symbol
.boot
0xffffffff84000000L
0
.boot
symbol
.text
0xffffffff84010000L
0
.text
symbol
.srodata
0xffffffff840170f8L
0
.srodata
symbol
.rodata
0xffffffff84017100L
0
.rodata
symbol
._idle_thread
0xffffffff84017e00L
0
._idle_thread
symbol
.bss
0xffffffff84018200L
0
.bss
symbol
.comment
0x0
0
.comment
symbol
kernel_all.c
0x0
0
*ABS*
symbol
pte_next
0xffffffff840100daL
36
.text
symbol
findVSpaceForASID
0xffffffff840100feL
96
.text
symbol
merge_regions
0xffffffff84000026L
112
.boot
symbol
fastpath_restore
0xffffffff8401015eL
146
.text
symbol
active_irq
0xffffffff84018208L
4
.bss
symbol
emptySlot
0xffffffff84011848L
128
.text
symbol
scheduleChooseNewThread
0xffffffff840128e4L
116
.text
symbol
handleReply
0xffffffff84013e74L
66
.text
symbol
handleRecv
0xffffffff840143faL
378
.text
symbol
handleInvocation
0xffffffff8401678cL
304
.text
symbol
alloc_rootserver_obj
0xffffffff84002382L
46
.boot
symbol
maybe_alloc_extra_bi
0xffffffff840023b0L
46
.boot
symbol
rootserver_mem
0xffffffff84002e30L
16
.boot
symbol
avail_reg
0xffffffff84002e40L
256
.boot
symbol
res_reg
0xffffffff84002f40L
32
.boot
symbol
avail_p_regs
0xffffffff84002b88L
16
.boot
symbol
CMakeFiles/kernel.elf.dir/src/arch/riscv/traps.S.obj
0x0
0
*ABS*
symbol
interrupt
0xffffffff840100ccL
0
.text
symbol
exception
0xffffffff840100c4L
0
.text
symbol
syscall
0xffffffff840100baL
0
.text
symbol
ki_end
0xffffffff8402e000L
0
.bss
symbol
decodeWriteRegisters
0xffffffff84015224L
152
.text
symbol
c_handle_syscall
0xffffffff84016f08L
30
.text
symbol
cteMove
0xffffffff840114feL
90
.text
symbol
current_fault
0xffffffff8401c080L
16
.bss
symbol
init_kernel
0xffffffff8400281eL
872
.boot
symbol
seL4_VMFault_Msg
0xffffffff8401c090L
4
.bss
symbol
__global_pointer$
0xffffffff840178f8L
0
.srodata
symbol
isFinalCapability
0xffffffff84011fa6L
88
.text
symbol
isIRQActive
0xffffffff840117bcL
26
.text
symbol
deleteCallerCap
0xffffffff84013aeaL
22
.text
symbol
Arch_maskCapRights
0xffffffff84010bf8L
72
.text
symbol
maskInterrupt
0xffffffff84010b06L
30
.text
symbol
lookupExtraCaps
0xffffffff84013b00L
148
.text
symbol
performInvocation_Endpoint
0xffffffff8401422aL
42
.text
symbol
platform_interrupt_t
0xffffffff8401c094L
4
.bss
symbol
createNewObjects
0xffffffff84012292L
122
.text
symbol
Arch_switchToThread
0xffffffff840108e2L
14
.text
symbol
Arch_deriveCap
0xffffffff84010b84L
106
.text
symbol
decodeRISCVMMUInvocation
0xffffffff84015850L
2270
.text
symbol
seL4_UnknownSyscall_Msg
0xffffffff8401c098L
4
.bss
symbol
chooseThread
0xffffffff84012866L
126
.text
symbol
invokeTCB_ThreadControl
0xffffffff84014642L
342
.text
symbol
initLocalIRQController
0xffffffff84000982L
10
.boot
symbol
map_kernel_devices
0xffffffff84000966L
2
.boot
symbol
init_core_state
0xffffffff8400158cL
28
.boot
symbol
create_device_untypeds
0xffffffff840016baL
152
.boot
symbol
create_it_address_space
0xffffffff84000fa6L
602
.boot
symbol
timerTick
0xffffffff8401273aL
84
.text
symbol
unmapPage
0xffffffff8401078eL
146
.text
symbol
possibleSwitchTo
0xffffffff840125baL
72
.text
symbol
gpRegisters
0xffffffff84017c30L
128
.rodata
symbol
invokeTCB_Resume
0xffffffff84014632L
16
.text
symbol
slotCapLongRunningDelete
0xffffffff84011ffeL
58
.text
symbol
seL4_CapFault_Msg
0xffffffff8401c0a0L
8
.bss
symbol
riscvKSASIDTable
0xffffffff8401c0a8L
1024
.bss
symbol
doNormalTransfer
0xffffffff84013c02L
408
.text
symbol
kernel_stack_alloc
0xffffffff8401c4a8L
4096
.bss
symbol
ksIdleThread
0xffffffff8401d4a8L
8
.bss
symbol
tlbLockCount
0xffffffff84018200L
8
.bss
symbol
invokeIRQHandler_AckIRQ
0xffffffff840117baL
2
.text
symbol
handleFaultReply
0xffffffff840104d4L
348
.text
symbol
performPageInvocationUnmap
0xffffffff84010a5eL
102
.text
symbol
setDomain
0xffffffff84012a8eL
72
.text
symbol
cteRevoke
0xffffffff840131a6L
132
.text
symbol
fault_messages
0xffffffff84017ac0L
160
.rodata
symbol
current_lookup_fault
0xffffffff8401d4b0L
16
.bss
symbol
ndks_boot
0xffffffff84002b98L
592
.boot
symbol
ensureNoChildren
0xffffffff84011e8cL
64
.text
symbol
lookupPTSlot
0xffffffff84010630L
82
.text
symbol
invokeCNodeRotate
0xffffffff8401163eL
72
.text
symbol
create_idle_thread
0xffffffff84002144L
32
.boot
symbol
setThreadState
0xffffffff84012406L
28
.text
symbol
scheduleTCB
0xffffffff840123ceL
56
.text
symbol
get_avail_p_regs
0xffffffff8400095cL
10
.boot
symbol
lookupPivotSlot
0xffffffff84011308L
26
.text
symbol
memcpy
0xffffffff84016f5cL
24
.text
symbol
isValidVTableRoot
0xffffffff8401098eL
22
.text
symbol
sendSignal
0xffffffff8401388cL
252
.text
symbol
ksSchedulerAction
0xffffffff8401d4c0L
8
.bss
symbol
create_unmapped_it_frame_cap
0xffffffff8400019eL
22
.boot
symbol
current_syscall_error
0xffffffff8401d4c8L
56
.bss
symbol
createObject
0xffffffff840121d4L
190
.text
symbol
init_freemem
0xffffffff840024c8L
854
.boot
symbol
switchToThread
0xffffffff84012844L
34
.text
symbol
setMRs_syscall_error
0xffffffff840155d0L
254
.text
symbol
invokeIRQHandler_SetIRQHandler
0xffffffff8401370eL
60
.text
symbol
tcbEPDequeue
0xffffffff84012b3cL
54
.text
symbol
decodeCNodeInvocation
0xffffffff84013238L
1186
.text
symbol
updateCapData
0xffffffff84012038L
146
.text
symbol
doFaultTransfer
0xffffffff84011322L
60
.text
symbol
invokeCNodeInsert
0xffffffff840114eeL
16
.text
symbol
decodeDomainInvocation
0xffffffff84014574L
174
.text
symbol
decodeUnbindNotification
0xffffffff840153a4L
82
.text
symbol
initIRQController
0xffffffff8400098cL
2
.boot
symbol
performInvocation_Notification
0xffffffff84013a80L
16
.text
symbol
Arch_getObjectSize
0xffffffff84010f66L
50
.text
symbol
sendFaultIPC
0xffffffff84014046L
234
.text
symbol
Arch_isFrameType
0xffffffff8401102eL
8
.text
symbol
ksDomSchedule
0xffffffff84017b80L
48
.rodata
symbol
suspend
0xffffffff84012dd8L
56
.text
symbol
_sdata
0xffffffff840170f8L
0
.text
symbol
current_extra_caps
0xffffffff8401d500L
24
.bss
symbol
performPageInvocationMapPTE
0xffffffff84010a48L
22
.text
symbol
sameObjectAs
0xffffffff84011f4eL
88
.text
symbol
invokeIRQControl
0xffffffff840117feL
56
.text
symbol
rescheduleRequired
0xffffffff8401239aL
52
.text
symbol
isMDBParentOf
0xffffffff84011e14L
120
.text
symbol
invokeCNodeCancelBadgedSends
0xffffffff84012c5eL
40
.text
symbol
create_initial_thread
0xffffffff840017caL
2380
.boot
symbol
loadCapTransfer
0xffffffff8401179cL
20
.text
symbol
handleSyscall
0xffffffff840168bcL
184
.text
symbol
maskVMRights
0xffffffff840109ecL
70
.text
symbol
intStateIRQTable
0xffffffff8401d518L
16
.bss
symbol
getObjectSize
0xffffffff8401193aL
72
.text
symbol
schedule
0xffffffff84012958L
310
.text
symbol
msgRegisters
0xffffffff84017b60L
32
.rodata
symbol
copyMRs
0xffffffff84013b94L
110
.text
symbol
Arch_configureIdleThread
0xffffffff84000096L
32
.boot
symbol
cteDeleteOne
0xffffffff840136daL
52
.text
symbol
memzero
0xffffffff840157d0L
18
.text
symbol
handleVMFaultEvent
0xffffffff840141c0L
54
.text
symbol
getRestartPC
0xffffffff84010ac4L
6
.text
symbol
strnlen
0xffffffff84015706L
38
.text
symbol
handleInterruptEntry
0xffffffff84013a52L
34
.text
symbol
cteInsert
0xffffffff840113c2L
300
.text
symbol
handleVMFault
0xffffffff84010682L
98
.text
symbol
setMRs_fault
0xffffffff840102e4L
310
.text
symbol
hasCancelSendRights
0xffffffff84011982L
50
.text
symbol
bindNotification
0xffffffff84011922L
24
.text
symbol
rootserver
0xffffffff84002de8L
72
.boot
symbol
ksNumCPUs
0xffffffff8401d528L
8
.bss
symbol
ensureEmptySlot
0xffffffff84011728L
22
.text
symbol
preemptionPoint
0xffffffff8401138aL
56
.text
symbol
invokeTCB_Suspend
0xffffffff84014622L
16
.text
symbol
tcbSchedEnqueue
0xffffffff8401230cL
142
.text
symbol
fastpath_reply_recv
0xffffffff84016c1aL
750
.text
symbol
performPageTableInvocationUnmap
0xffffffff840157e2L
110
.text
symbol
unbindMaybeNotification
0xffffffff840118e8L
38
.text
symbol
decodeReadRegisters
0xffffffff8401506cL
168
.text
symbol
create_kernel_untypeds
0xffffffff84001752L
94
.boot
symbol
kernel_image_level2_pt
0xffffffff8401a000L
4096
.bss
symbol
create_frames_of_region
0xffffffff84001200L
214
.boot
symbol
decodeSetSchedParams
0xffffffff84014aeeL
234
.text
symbol
completeSignal
0xffffffff840118c8L
32
.text
symbol
activateThread
0xffffffff84012432L
62
.text
symbol
sameRegionAs
0xffffffff840119b4L
1120
.text
symbol
ksReadyQueues
0xffffffff8401d530L
65536
.bss
symbol
tcbSchedDequeue
0xffffffff8401278eL
182
.text
symbol
ksDomainTime
0xffffffff8402d530L
8
.bss
symbol
intStateIRQNode
0xffffffff8402d580L
128
.bss
symbol
ksCurDomain
0xffffffff8402d600L
8
.bss
symbol
plat_cleanL2Range
0xffffffff84010b2eL
2
.text
symbol
create_untypeds_for_region
0xffffffff840015a8L
274
.boot
symbol
setExtraBadge
0xffffffff84013a9cL
12
.text
symbol
bi_finalise
0xffffffff840017b0L
26
.boot
symbol
__clzsi2
0xffffffff8401706cL
40
.text
symbol
map_kernel_window
0xffffffff840000e4L
186
.boot
symbol
map_kernel_frame
0xffffffff840000b6L
46
.boot
symbol
cancelBadgedSends
0xffffffff84012b72L
236
.text
symbol
lookupCap
0xffffffff84011190L
58
.text
symbol
Arch_sameObjectAs
0xffffffff84010ebeL
168
.text
symbol
handleDoubleFault
0xffffffff84012422L
16
.text
symbol
receiveSignal
0xffffffff840124d6L
228
.text
symbol
_breakpoint_stack_bottom
0xffffffff8401820cL
0
.bss
symbol
_start
0xffffffff84000000L
0
.boot
symbol
decodeTCBInvocation
0xffffffff840153f6L
474
.text
symbol
_breakpoint_stack_top
0xffffffff8401920cL
0
.bss
symbol
map_it_frame_cap
0xffffffff8400068cL
652
.boot
symbol
unbindNotification
0xffffffff8401190eL
20
.text
symbol
Arch_setMRs_fault
0xffffffff840102b2L
50
.text
symbol
provide_cap
0xffffffff84000e36L
368
.boot
symbol
cancelAllSignals
0xffffffff84012640L
108
.text
symbol
KERNEL_OFFSET
0xffffffff00000000L
0
*ABS*
symbol
strlcpy
0xffffffff8401572cL
62
.text
symbol
strncmp
0xffffffff84016f74L
68
.text
symbol
lookupCapAndSlot
0xffffffff840111caL
62
.text
symbol
cteDelete
0xffffffff84012fccL
458
.text
symbol
Arch_decodeInvocation
0xffffffff8401612eL
36
.text
symbol
setMCPriority
0xffffffff84011384L
6
.text
symbol
Arch_decodeTransfer
0xffffffff84011036L
4
.text
symbol
Arch_activateIdleThread
0xffffffff8401041aL
2
.text
symbol
get_num_avail_p_regs
0xffffffff84000958L
4
.boot
symbol
write_slot
0xffffffff84000b22L
18
.boot
symbol
setNextPC
0xffffffff84010acaL
6
.text
symbol
unmapPageTable
0xffffffff840106e4L
170
.text
symbol
invokeTCB_WriteRegisters
0xffffffff84015114L
272
.text
symbol
seL4_UserException_Msg
0xffffffff8402d608L
4
.bss
symbol
decodeBindNotification
0xffffffff840152d4L
208
.text
symbol
sendIPC
0xffffffff84013ed6L
368
.text
symbol
lookupSlotForCNodeOp
0xffffffff84011208L
204
.text
symbol
Arch_performTransfer
0xffffffff8401103aL
4
.text
symbol
populate_bi_frame
0xffffffff840022d8L
170
.boot
symbol
ki_boot_end
0xffffffff84010000L
0
.boot
symbol
tcbEPAppend
0xffffffff84012b1eL
30
.text
symbol
__ctzdi2
0xffffffff840170d6L
34
.text
symbol
decodeSetIPCBuffer
0xffffffff84014bd8L
184
.text
symbol
decodeSetSpace
0xffffffff84014c90L
382
.text
symbol
handleUnknownSyscall
0xffffffff84014150L
48
.text
symbol
Arch_updateCapData
0xffffffff84010beeL
10
.text
symbol
setVMRoot
0xffffffff84010820L
194
.text
symbol
memset
0xffffffff84016f26L
54
.text
symbol
Arch_finaliseCap
0xffffffff84010c40L
272
.text
symbol
initTimer
0xffffffff84000968L
24
.boot
symbol
Arch_sameRegionAs
0xffffffff84010d50L
366
.text
symbol
trap_entry
0xffffffff84010000L
0
.text
symbol
c_handle_exception
0xffffffff840141f6L
52
.text
symbol
strlcat
0xffffffff8401576aL
102
.text
symbol
reserve_region
0xffffffff8400098eL
288
.boot
symbol
ksReadyQueuesL2Bitmap
0xffffffff8402d610L
512
.bss
symbol
map_it_pt_cap
0xffffffff84000450L
572
.boot
symbol
fastpath_call
0xffffffff8401698cL
654
.text
symbol
cancelSignal
0xffffffff84012c86L
112
.text
symbol
create_it_asid_pool
0xffffffff840012d6L
694
.boot
symbol
invokeIRQHandler_ClearIRQHandler
0xffffffff8401374aL
30
.text
symbol
ackInterrupt
0xffffffff84010b24L
10
.text
symbol
doIPCTransfer
0xffffffff84013d9aL
102
.text
symbol
decodeIRQControlInvocation
0xffffffff84012470L
102
.text
symbol
char_to_long
0xffffffff84016fb8L
64
.text
symbol
Arch_handleFaultReply
0xffffffff840102a0L
18
.text
symbol
lookupSourceSlot
0xffffffff840112d4L
26
.text
symbol
lookupIPCBuffer
0xffffffff84010444L
144
.text
symbol
decodeTCBConfigure
0xffffffff84014798L
462
.text
symbol
idle_thread
0xffffffff840100d4L
6
.text
symbol
copyGlobalMappings
0xffffffff8401041eL
38
.text
symbol
configureIdleThread
0xffffffff84002116L
46
.boot
symbol
ksWorkUnitsCompleted
0xffffffff8402d810L
8
.bss
symbol
invokeCNodeRevoke
0xffffffff8401322aL
14
.text
symbol
invokeUntyped_Retype
0xffffffff84016152L
274
.text
symbol
Arch_prepareThreadDelete
0xffffffff8401102cL
2
.text
symbol
setupCallerCap
0xffffffff84013aa8L
66
.text
symbol
decodeInvocation
0xffffffff84016542L
586
.text
symbol
doNBRecvFailedTransfer
0xffffffff8401135eL
6
.text
symbol
Arch_createObject
0xffffffff84010f98L
148
.text
symbol
deleteASIDPool
0xffffffff84010908L
64
.text
symbol
deletedIRQHandler
0xffffffff84011836L
18
.text
symbol
setIRQState
0xffffffff840117d6L
40
.text
symbol
c_handle_interrupt
0xffffffff84013a74L
12
.text
symbol
performPageTableInvocationMap
0xffffffff84010a32L
22
.text
symbol
ksReadyQueuesL1Bitmap
0xffffffff8402d818L
128
.bss
symbol
getReceiveSlots
0xffffffff8401173eL
94
.text
symbol
arch_get_n_paging
0xffffffff840001b4L
46
.boot
symbol
create_root_cnode
0xffffffff84000b34L
60
.boot
symbol
insert_region
0xffffffff84000aaeL
116
.boot
symbol
lookupSlot
0xffffffff8401116eL
34
.text
symbol
restore_user_context
0xffffffff840101f0L
164
.text
symbol
doReplyTransfer
0xffffffff84013e00L
116
.text
symbol
write_it_asid_pool
0xffffffff84000208L
584
.boot
symbol
handleFault
0xffffffff84014130L
32
.text
symbol
decodeIRQHandlerInvocation
0xffffffff84013768L
198
.text
symbol
deleteASID
0xffffffff84010948L
70
.text
symbol
invokeTCB_CopyRegisters
0xffffffff84014e0eL
172
.text
symbol
setupReplyMaster
0xffffffff8401170aL
30
.text
symbol
decodeCopyRegisters
0xffffffff84014ebaL
160
.text
symbol
checkValidIPCBuffer
0xffffffff840109a4L
72
.text
symbol
Arch_checkIRQ
0xffffffff84010b36L
22
.text
symbol
ksIdleThreadTCB
0xffffffff84017e00L
1024
._idle_thread
symbol
kernel_root_pageTable
0xffffffff8401b000L
4096
.bss
symbol
calculate_extra_bi_size_bits
0xffffffff84000dfcL
58
.boot
symbol
resolveAddressBits
0xffffffff8401103eL
304
.text
symbol
finaliseCap
0xffffffff84012e10L
444
.text
symbol
handleSpuriousIRQ
0xffffffff84010b34L
2
.text
symbol
create_mapped_it_frame_cap
0xffffffff84000918L
64
.boot
symbol
cteSwap
0xffffffff840115b0L
142
.text
symbol
__ctzsi2
0xffffffff84017094L
36
.text
symbol
performInvocation_Reply
0xffffffff84013eb6L
32
.text
symbol
halt
0xffffffff84010294L
12
.text
symbol
decodeSetPriority
0xffffffff84014966L
196
.text
symbol
deletingIRQHandler
0xffffffff8401382eL
30
.text
symbol
invokeCNodeSaveCaller
0xffffffff84011568L
72
.text
symbol
activate_kernel_vspace
0xffffffff840001e2L
38
.boot
symbol
receiveIPC
0xffffffff84014254L
422
.text
symbol
initL2Cache
0xffffffff84000980L
2
.boot
symbol
deriveCap
0xffffffff84011eccL
130
.text
symbol
insertNewCap
0xffffffff840116aaL
96
.text
symbol
setPriority
0xffffffff84012ad6L
72
.text
symbol
frameRegisters
0xffffffff84017bb0L
128
.rodata
symbol
restart
0xffffffff8401384cL
64
.text
symbol
tcbSchedAppend
0xffffffff840126acL
142
.text
symbol
Arch_postModifyRegisters
0xffffffff8401041cL
2
.text
symbol
create_domain_cap
0xffffffff84000b70L
304
.boot
symbol
create_ipcbuf_frame_cap
0xffffffff84002164L
372
.boot
symbol
str_to_long
0xffffffff84016ff8L
116
.text
symbol
invokeTCB_ReadRegisters
0xffffffff84014f5aL
274
.text
symbol
handleInterrupt
0xffffffff84013988L
202
.text
symbol
replyFromKernel_error
0xffffffff840156ceL
56
.text
symbol
invokeCNodeMove
0xffffffff84011558L
16
.text
symbol
ksDomScheduleLength
0xffffffff840170f8L
8
.srodata
symbol
Arch_switchToIdleThread
0xffffffff840108f0L
24
.text
symbol
cancelIPC
0xffffffff84012cf6L
226
.text
symbol
plat_cleanInvalidateL2Range
0xffffffff84010b32L
2
.text
symbol
cancelAllIPC
0xffffffff84012602L
62
.text
symbol
ksCurThread
0xffffffff8402d898L
8
.bss
symbol
invokeCNodeDelete
0xffffffff84013196L
16
.text
symbol
slowpath
0xffffffff84016974L
24
.text
symbol
__clzdi2
0xffffffff840170b8L
30
.text
symbol
handleUserLevelFault
0xffffffff84014180L
64
.text
symbol
create_bi_frame_cap
0xffffffff84000ca0L
348
.boot
symbol
plat_invalidateL2Range
0xffffffff84010b30L
2
.text
symbol
getExtraCPtr
0xffffffff84013a90L
12
.text
symbol
lookupTargetSlot
0xffffffff840112eeL
26
.text
symbol
decodeSetMCPriority
0xffffffff84014a2aL
196
.text
symbol
create_rootserver_objects
0xffffffff840023deL
234
.boot
symbol
switchToIdleThread
0xffffffff84011364L
32
.text
symbol
Arch_decodeIRQControlInvocation
0xffffffff84010b4cL
56
.text
symbol
capSwapForDelete
0xffffffff84011686L
36
.text
symbol
getActiveIRQ
0xffffffff84010ad0L
44
.text
symbol
ksDomScheduleIdx
0xffffffff8402d8a0L
8
.bss
symbol
isIRQPending
0xffffffff84010afcL
10
.text
symbol
replyFromKernel_success_empty
0xffffffff840117b0L
10
.text
symbol
decodeUntypedInvocation
0xffffffff84016264L
734
.text
symbol
invokeTCB_NotificationControl
0xffffffff840152bcL
24
.text
symbol
maskCapRights
0xffffffff840120caL
266
.text
trace Loading syntax from seL4-example/CFunctions.txt
Loading syntax from seL4-example/CFunctions.txt
trace Loaded 605 functions, 51 structs, 0 globals.
Loaded 605 functions, 51 structs, 0 globals.
trace Loading syntax from seL4-example/ASMFunctions_checked.txt
Loading syntax from seL4-example/ASMFunctions_checked.txt
trace Missing nodes after calls to instruction'ecall_8401029C
Missing nodes after calls to instruction'ecall_8401029C
trace   in ['halt']
  in ['halt']
trace Missing nodes after calls to instruction'unimp_84002B86
Missing nodes after calls to instruction'unimp_84002B86
trace   in ['init_kernel']
  in ['init_kernel']
trace Warning: dead arc in trap_entry: 2214658220 -> 2214658222
Warning: dead arc in trap_entry: 2214658220 -> 2214658222
trace   (follows Basic node!)
  (follows Basic node!)
trace Warning: dead arc in trap_entry: 2214658228 -> 2214658230
Warning: dead arc in trap_entry: 2214658228 -> 2214658230
trace   (follows Basic node!)
  (follows Basic node!)
trace Loaded 312 functions, 0 structs, 0 globals.
Loaded 312 functions, 0 structs, 0 globals.
Pseudo-Compiling.
Doing stack/inst logic.
Computing stack bounds.
Doing recursion analysis for function group:
  ['Kernel_C.deletingIRQHandler', 'Kernel_C.finaliseCap', 'Kernel_C.suspend', 'Kernel_C.cancelIPC', 'Kernel_C.cteDeleteOne']
trace Checking idents for Kernel_C.deleteCallerCap
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
tryinline:
2
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((1, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_5_fun0
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-BPB4z8.txt
solver inputs:

['(assert (not (not path_cond_to_5_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-3jgnX5.txt
solver inputs:

['(assert (not (not path_cond_to_5_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-RwF1hP.txt
solver inputs:

['(assert (not (not path_cond_to_5_fun0)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.73s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace rep_graph setting up input env at 24
trace done setting up input env at 24
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
22
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
16
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
13
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0'), ((12, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   path_cond_to_13_fun1
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-WLydio.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (not path_cond_to_13_fun1)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ayvPit.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (not path_cond_to_13_fun1)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-icqFsO.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (not path_cond_to_13_fun1)))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace rep_graph setting up input env at 24
trace done setting up input env at 24
trace rep_graph setting up input env at 134
trace done setting up input env at 134
tryinline:
133
ti1
kkk
Kernel_C.isArchCap
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isArchCap, ['Kernel_C.isArchCap']).
tryinline:
127
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
88
ti1
kkk
Kernel_C.halt
[]
[]
kkkk

tryinline:
86
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
63
ti1
kkk
Kernel_C.cap_thread_cap_get_capTCBPtr
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_thread_cap_get_capTCBPtr, ['Kernel_C.cap_thread_cap_get_capTCBPtr']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000000))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000000)'))
trace Now 4 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.unbindNotification
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
57
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
22
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
16
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Testing hyp whyps
trace requests = set([((56, ()), 'fun2'), ((2, ()), 'fun0'), ((24, ()), 'fun1'), ((13, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_59_fun2
trace Result: True
tryinline:
78
ti1
kkk
Kernel_C.cap_irq_handler_cap_get_capIRQ
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_irq_handler_cap_get_capIRQ, ['Kernel_C.cap_irq_handler_cap_get_capIRQ']).
tryinline:
75
ti1
kkk
Kernel_C.deletingIRQHandler
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((56, ()), 'fun2'), ((2, ()), 'fun0'), ((74, ()), 'fun2'), ((24, ()), 'fun1'), ((13, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_78_fun2
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace rep_graph setting up input env at 24
trace done setting up input env at 24
trace rep_graph setting up input env at 134
trace done setting up input env at 134
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
22
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
16
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0'), ((13, ()), 'fun1'), ((24, ()), 'fun1'), ((134, ()), 'fun2')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (not false)
trace will fetch model for 47 vars and 9 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-KkzM_s.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(check-sat)', '(get-value (path_cond_to_22_fun1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem.1_ini path_cond_to_17_fun1 cond_at_6 rv_space_ret__unsigned_long_v_after_16 rodata-witness ptr callerSlot___ptr_to_struct_cte_C_v_after_5 pvalid cap_type___unsigned_long_v_after_20 cond_at_23 pvalid.4 pvalid.5 pvalid.6 pvalid.1 pvalid.2 pvalid.3 query_mem-eqMem.1_initMem. path_cond_to_6_fun0 exposed___unsigned_long_v_init query_=GhostAssertions.1_i path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ path_cond_to_23_fun1 path_cond_to_5_fun0 isFinalCapability_success_at_16 rv_space_ret__unsigned_longlong_v_after_22 query_load-word64Mem.1_ini.1 path_cond_to_18_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s cond_at_18 cond_at_19 ptr.1 ptr.3 cap___struct_cap_C_v.words_C.0_init ptr.4 final___unsigned_long_v.1_init fun_success_at_22 query_selectGhostAssertion cap___struct_cap_C_v.words_C.1_init query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init cond_at_14 query_load-word64Mem.1_ini.1 query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_load-word64Mem.1_ini query_selectGhostAssertion query_mem-eqMem_initMem.1_))']
done

trace will fetch model for 47 vars and 9 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-wjVV0w.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(check-sat)', '(get-value (path_cond_to_22_fun1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem.1_ini path_cond_to_17_fun1 cond_at_6 rv_space_ret__unsigned_long_v_after_16 rodata-witness ptr callerSlot___ptr_to_struct_cte_C_v_after_5 pvalid cap_type___unsigned_long_v_after_20 cond_at_23 pvalid.4 pvalid.5 pvalid.6 pvalid.1 pvalid.2 pvalid.3 query_mem-eqMem.1_initMem. path_cond_to_6_fun0 exposed___unsigned_long_v_init query_=GhostAssertions.1_i path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ path_cond_to_23_fun1 path_cond_to_5_fun0 isFinalCapability_success_at_16 rv_space_ret__unsigned_longlong_v_after_22 query_load-word64Mem.1_ini.1 path_cond_to_18_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s cond_at_18 cond_at_19 ptr.1 ptr.3 cap___struct_cap_C_v.words_C.0_init ptr.4 final___unsigned_long_v.1_init fun_success_at_22 query_selectGhostAssertion cap___struct_cap_C_v.words_C.1_init query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init cond_at_14 query_load-word64Mem.1_ini.1 query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_load-word64Mem.1_ini query_selectGhostAssertion query_mem-eqMem_initMem.1_))']
done

trace will fetch model for 47 vars and 9 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-E_nwRS.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(check-sat)', '(get-value (path_cond_to_22_fun1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem.1_ini path_cond_to_17_fun1 cond_at_6 rv_space_ret__unsigned_long_v_after_16 rodata-witness ptr callerSlot___ptr_to_struct_cte_C_v_after_5 pvalid cap_type___unsigned_long_v_after_20 cond_at_23 pvalid.4 pvalid.5 pvalid.6 pvalid.1 pvalid.2 pvalid.3 query_mem-eqMem.1_initMem. path_cond_to_6_fun0 exposed___unsigned_long_v_init query_=GhostAssertions.1_i path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ path_cond_to_23_fun1 path_cond_to_5_fun0 isFinalCapability_success_at_16 rv_space_ret__unsigned_longlong_v_after_22 query_load-word64Mem.1_ini.1 path_cond_to_18_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s cond_at_18 cond_at_19 ptr.1 ptr.3 cap___struct_cap_C_v.words_C.0_init ptr.4 final___unsigned_long_v.1_init fun_success_at_22 query_selectGhostAssertion cap___struct_cap_C_v.words_C.1_init query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init cond_at_14 query_load-word64Mem.1_ini.1 query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_load-word64Mem.1_ini query_selectGhostAssertion query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace will fetch model for 47 vars and 9 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-MbBNGL.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(assert (= path_cond_to_22_fun1 true))', '(assert (= rv_space_ret__unsigned_long_v_after_16 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x8000000000000060))', '(assert (= query_load-word64Mem.1_ini #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= path_cond_to_17_fun1 true))', '(assert (= pvalid.4 true))', '(assert (= cond_at_6 true))', '(assert (= cap___struct_cap_C_v.words_C.0_init #x0000000000000000))', '(assert (= rodata-witness #xffffffff84017c00))', '(assert (= (select GhostAssertions.1_init #b00000000000000000000000000000000000000000111110000) #x0000000000000008))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (mem-eq Mem_init Mem.1_init) true))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= pvalid true))', '(assert (= (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= cond_at_23 true))', '(assert (= cap_type___unsigned_long_v_after_20 #x0000000000000008))', '(assert (= pvalid.5 true))', '(assert (= pvalid.6 true))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 false))', '(assert (= pvalid.3 true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x8000000000000060))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= callerSlot___ptr_to_struct_cte_C_v_after_5 #x8000000000000060))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= path_cond_to_13_fun1 true))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_initMem.1_ true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x8000000000000068))', '(assert (= path_cond_to_23_fun1 true))', '(assert (= path_cond_to_5_fun0 true))', '(assert (= isFinalCapability_success_at_16 false))', '(assert (= rv_space_ret__unsigned_longlong_v_after_22 #x0000000000000008))', '(assert (= query_load-word64Mem.1_ini.1 #x0000000000000000))', '(assert (= path_cond_to_18_fun1 true))', '(assert (= query_bvaddslot___ptr_to_s.1 #x8000000000000068))', '(assert (= query_bvaddslot___ptr_to_s #x8000000000000060))', '(assert (= cond_at_18 true))', '(assert (= cond_at_19 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ptr.3 #x8000000000000000))', '(assert (= ptr.2 #x8000000000000060))', '(assert (= (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= ptr.4 #x8000000000000060))', '(assert (= final___unsigned_long_v.1_init #x0000000000000000))', '(assert (= fun_success_at_22 false))', '(assert (= query_selectGhostAssertion #x0000000000000008))', '(assert (= (= GhostAssertions_after_3 GhostAssertions.1_init) true))', '(assert (= cap___struct_cap_C_v.words_C.1_init #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= receiver___ptr_to_struct_tcb_C_v_init #x8000000000000000))', '(assert (= cond_at_14 true))', '(check-sat)', '(get-value (path_cond_to_22_fun1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem.1_ini path_cond_to_17_fun1 cond_at_6 rv_space_ret__unsigned_long_v_after_16 rodata-witness ptr callerSlot___ptr_to_struct_cte_C_v_after_5 pvalid cap_type___unsigned_long_v_after_20 cond_at_23 pvalid.4 pvalid.5 pvalid.6 pvalid.1 pvalid.2 pvalid.3 query_mem-eqMem.1_initMem. path_cond_to_6_fun0 exposed___unsigned_long_v_init query_=GhostAssertions.1_i path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ path_cond_to_23_fun1 path_cond_to_5_fun0 isFinalCapability_success_at_16 rv_space_ret__unsigned_longlong_v_after_22 query_load-word64Mem.1_ini.1 path_cond_to_18_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s cond_at_18 cond_at_19 ptr.1 ptr.3 cap___struct_cap_C_v.words_C.0_init ptr.4 final___unsigned_long_v.1_init fun_success_at_22 query_selectGhostAssertion cap___struct_cap_C_v.words_C.1_init query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init cond_at_14 query_load-word64Mem.1_ini.1 query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_load-word64Mem.1_ini query_selectGhostAssertion query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.67s elapsed, 0.03s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 47 vars and 9 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-W6fPm4.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(assert (= path_cond_to_22_fun1 true))', '(assert (= rv_space_ret__unsigned_long_v_after_16 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffffff84017c60))', '(assert (= query_load-word64Mem.1_ini #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= path_cond_to_17_fun1 true))', '(assert (= pvalid.4 true))', '(assert (= cond_at_6 true))', '(assert (= cap___struct_cap_C_v.words_C.0_init #x0000000000000000))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= (select GhostAssertions.1_init #b00000000000000000000000000000000000000000111110000) #x0000000000000008))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (mem-eq Mem_init Mem.1_init) true))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= pvalid true))', '(assert (= (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= cond_at_23 true))', '(assert (= cap_type___unsigned_long_v_after_20 #x0000000000000008))', '(assert (= pvalid.5 true))', '(assert (= pvalid.6 true))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 false))', '(assert (= pvalid.3 true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffffff84017c60))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= callerSlot___ptr_to_struct_cte_C_v_after_5 #x7fffffff84017c60))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= path_cond_to_13_fun1 true))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_initMem.1_ true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffffff84017c68))', '(assert (= path_cond_to_23_fun1 true))', '(assert (= path_cond_to_5_fun0 true))', '(assert (= isFinalCapability_success_at_16 false))', '(assert (= rv_space_ret__unsigned_longlong_v_after_22 #x0000000000000008))', '(assert (= query_load-word64Mem.1_ini.1 #x0000000000000000))', '(assert (= path_cond_to_18_fun1 true))', '(assert (= query_bvaddslot___ptr_to_s.1 #x7fffffff84017c68))', '(assert (= query_bvaddslot___ptr_to_s #x7fffffff84017c60))', '(assert (= cond_at_18 true))', '(assert (= cond_at_19 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ptr.3 #x7fffffff84017c00))', '(assert (= ptr.2 #x7fffffff84017c60))', '(assert (= (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= ptr.4 #x7fffffff84017c60))', '(assert (= final___unsigned_long_v.1_init #x0000000000000000))', '(assert (= fun_success_at_22 false))', '(assert (= query_selectGhostAssertion #x0000000000000008))', '(assert (= (= GhostAssertions_after_3 GhostAssertions.1_init) true))', '(assert (= cap___struct_cap_C_v.words_C.1_init #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= receiver___ptr_to_struct_tcb_C_v_init #x7fffffff84017c00))', '(assert (= cond_at_14 true))', '(check-sat)', '(get-value (path_cond_to_22_fun1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem.1_ini path_cond_to_17_fun1 cond_at_6 rv_space_ret__unsigned_long_v_after_16 rodata-witness ptr callerSlot___ptr_to_struct_cte_C_v_after_5 pvalid cap_type___unsigned_long_v_after_20 cond_at_23 pvalid.4 pvalid.5 pvalid.6 pvalid.1 pvalid.2 pvalid.3 query_mem-eqMem.1_initMem. path_cond_to_6_fun0 exposed___unsigned_long_v_init query_=GhostAssertions.1_i path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ path_cond_to_23_fun1 path_cond_to_5_fun0 isFinalCapability_success_at_16 rv_space_ret__unsigned_longlong_v_after_22 query_load-word64Mem.1_ini.1 path_cond_to_18_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s cond_at_18 cond_at_19 ptr.1 ptr.3 cap___struct_cap_C_v.words_C.0_init ptr.4 final___unsigned_long_v.1_init fun_success_at_22 query_selectGhostAssertion cap___struct_cap_C_v.words_C.1_init query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init cond_at_14 query_load-word64Mem.1_ini.1 query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_load-word64Mem.1_ini query_selectGhostAssertion query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace rep_graph setting up input env at 24
trace done setting up input env at 24
trace rep_graph setting up input env at 134
trace done setting up input env at 134
tryinline:
133
ti1
kkk
Kernel_C.isArchCap
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isArchCap, ['Kernel_C.isArchCap']).
tryinline:
127
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
88
ti1
kkk
Kernel_C.halt
[]
[]
kkkk

tryinline:
86
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
63
ti1
kkk
Kernel_C.cap_thread_cap_get_capTCBPtr
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_thread_cap_get_capTCBPtr, ['Kernel_C.cap_thread_cap_get_capTCBPtr']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000000))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000000)'))
trace Now 4 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.unbindNotification
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
57
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((56, ()), 'fun2')])
trace testing ('hyp', None):
trace   path_cond_to_59_fun2
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ZisJc4.txt
solver inputs:

['(assert (not (not path_cond_to_59_fun2)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-n6KF4S.txt
solver inputs:

['(assert (not (not path_cond_to_59_fun2)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-vYZ_Va.txt
solver inputs:

['(assert (not (not path_cond_to_59_fun2)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0'), ((13, ()), 'fun1'), ((24, ()), 'fun1'), ((134, ()), 'fun2')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (not (word64-eq cap___struct_cap_C_v.words_C.0_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-XVL5p9.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq cap___struct_cap_C_v.words_C.0_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-DxPt3k.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq cap___struct_cap_C_v.words_C.0_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-qQvIu6.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq cap___struct_cap_C_v.words_C.0_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0'), ((13, ()), 'fun1'), ((24, ()), 'fun1'), ((134, ()), 'fun2')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (not (word64-eq cap___struct_cap_C_v.words_C.1_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-rhyCZX.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq cap___struct_cap_C_v.words_C.1_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-XZBCUy.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq cap___struct_cap_C_v.words_C.1_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-KKqxBo.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq cap___struct_cap_C_v.words_C.1_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0'), ((13, ()), 'fun1'), ((24, ()), 'fun1'), ((134, ()), 'fun2')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (not (word64-eq final___unsigned_long_v.1_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-3O6QMY.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq final___unsigned_long_v.1_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-YeXyGk.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq final___unsigned_long_v.1_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-wbqhKO.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (word64-eq final___unsigned_long_v.1_init #x0000000000000000))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.02s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0'), ((13, ()), 'fun1'), ((24, ()), 'fun1'), ((134, ()), 'fun2')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (not (word64-eq exposed___unsigned_long_v_init #x0000000000000001))
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace rep_graph setting up input env at 24
trace done setting up input env at 24
trace rep_graph setting up input env at 134
trace done setting up input env at 134
tryinline:
133
ti1
kkk
Kernel_C.isArchCap
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isArchCap, ['Kernel_C.isArchCap']).
tryinline:
127
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
88
ti1
kkk
Kernel_C.halt
[]
[]
kkkk

tryinline:
86
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
63
ti1
kkk
Kernel_C.cap_thread_cap_get_capTCBPtr
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_thread_cap_get_capTCBPtr, ['Kernel_C.cap_thread_cap_get_capTCBPtr']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000000))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000000)'))
trace Now 4 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.unbindNotification
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
57
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
22
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
16
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Testing hyp whyps
trace requests = set([((56, ()), 'fun2'), ((2, ()), 'fun0'), ((24, ()), 'fun1'), ((13, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (word64-eq exposed___unsigned_long_v_init #x0000000000000001)
trace   path_cond_to_59_fun2
trace Result: True
tryinline:
78
ti1
kkk
Kernel_C.cap_irq_handler_cap_get_capIRQ
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_irq_handler_cap_get_capIRQ, ['Kernel_C.cap_irq_handler_cap_get_capIRQ']).
tryinline:
75
ti1
kkk
Kernel_C.deletingIRQHandler
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((56, ()), 'fun2'), ((2, ()), 'fun0'), ((74, ()), 'fun2'), ((24, ()), 'fun1'), ((13, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem.1_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_16 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (word64-eq exposed___unsigned_long_v_init #x0000000000000001)
trace   path_cond_to_78_fun2
trace Result: True
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
tryinline:
2
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((1, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_5_fun0
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-_Tyceq.txt
solver inputs:

['(assert (not (not path_cond_to_5_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-H_iIT9.txt
solver inputs:

['(assert (not (not path_cond_to_5_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-tOypK0.txt
solver inputs:

['(assert (not (not path_cond_to_5_fun0)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace rep_graph setting up input env at 24
trace done setting up input env at 24
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
22
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
16
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
13
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0'), ((12, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   path_cond_to_13_fun1
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000001))
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace rep_graph setting up input env at 24
trace done setting up input env at 24
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0'), ((24, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_5_fun0)
trace   (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_after_3 GhostAssertions.1_init)
trace   (not false)
trace will fetch model for 18 vars and 2 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Pbmzwx.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) false))))))', '(check-sat)', '(get-value (pvalid ptr.2 slot___ptr_to_struct_cte_C_v_init ptr.1 ptr.3 rodata-witness-val query_mem-eqMem_initMem.1_ pvalid.1 pvalid.2 pvalid.3 path_cond_to_5_fun0 cond_at_6 rodata-witness path_cond_to_6_fun0 query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init ptr callerSlot___ptr_to_struct_cte_C_v_after_5 query_=GhostAssertions_aft query_mem-eqMem_initMem.1_))']
done

trace will fetch model for 18 vars and 2 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-PD2u6E.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) false))))))', '(check-sat)', '(get-value (pvalid ptr.2 slot___ptr_to_struct_cte_C_v_init ptr.1 ptr.3 rodata-witness-val query_mem-eqMem_initMem.1_ pvalid.1 pvalid.2 pvalid.3 path_cond_to_5_fun0 cond_at_6 rodata-witness path_cond_to_6_fun0 query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init ptr callerSlot___ptr_to_struct_cte_C_v_after_5 query_=GhostAssertions_aft query_mem-eqMem_initMem.1_))']
done

trace will fetch model for 18 vars and 2 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-CXFD6S.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) false))))))', '(check-sat)', '(get-value (pvalid ptr.2 slot___ptr_to_struct_cte_C_v_init ptr.1 ptr.3 rodata-witness-val query_mem-eqMem_initMem.1_ pvalid.1 pvalid.2 pvalid.3 path_cond_to_5_fun0 cond_at_6 rodata-witness path_cond_to_6_fun0 query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init ptr callerSlot___ptr_to_struct_cte_C_v_after_5 query_=GhostAssertions_aft query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 18 vars and 2 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Q6EXUe.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) false))))))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffffff84017c60))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_initMem.1_ true))', '(assert (= path_cond_to_5_fun0 true))', '(assert (= cond_at_6 true))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (mem-eq Mem_init Mem.1_init) true))', '(assert (= callerSlot___ptr_to_struct_cte_C_v_after_5 #x7fffffff84017c60))', '(assert (= pvalid true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ptr.3 #x7fffffff84017c00))', '(assert (= ptr.2 #x7fffffff84017c60))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 false))', '(assert (= pvalid.3 true))', '(assert (= (= GhostAssertions_after_3 GhostAssertions.1_init) true))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= receiver___ptr_to_struct_tcb_C_v_init #x7fffffff84017c00))', '(check-sat)', '(get-value (pvalid ptr.2 slot___ptr_to_struct_cte_C_v_init ptr.1 ptr.3 rodata-witness-val query_mem-eqMem_initMem.1_ pvalid.1 pvalid.2 pvalid.3 path_cond_to_5_fun0 cond_at_6 rodata-witness path_cond_to_6_fun0 query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init ptr callerSlot___ptr_to_struct_cte_C_v_after_5 query_=GhostAssertions_aft query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('SONOLAR (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from SONOLAR (offline) in parallel.
trace will fetch model for 18 vars and 2 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('SONOLAR (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-6nzcrX.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_5_fun0) (=> (word64-eq callerSlot___ptr_to_struct_cte_C_v_after_5 slot___ptr_to_struct_cte_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_after_3 GhostAssertions.1_init) false))))))', '(assert (= slot___ptr_to_struct_cte_C_v_init #xffffffff7bfeec60))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_initMem.1_ true))', '(assert (= path_cond_to_5_fun0 true))', '(assert (= cond_at_6 true))', '(assert (= rodata-witness #xffffffff84017ba8))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (mem-eq Mem_init Mem.1_init) true))', '(assert (= callerSlot___ptr_to_struct_cte_C_v_after_5 #xffffffff7bfeec60))', '(assert (= pvalid true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ptr.3 #xffffffff7bfeec00))', '(assert (= ptr.2 #xffffffff7bfeec60))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 false))', '(assert (= pvalid.3 true))', '(assert (= (= GhostAssertions_after_3 GhostAssertions.1_init) true))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= receiver___ptr_to_struct_tcb_C_v_init #xffffffff7bfeec00))', '(check-sat)', '(get-value (pvalid ptr.2 slot___ptr_to_struct_cte_C_v_init ptr.1 ptr.3 rodata-witness-val query_mem-eqMem_initMem.1_ pvalid.1 pvalid.2 pvalid.3 path_cond_to_5_fun0 cond_at_6 rodata-witness path_cond_to_6_fun0 query_=GhostAssertions_aft receiver___ptr_to_struct_tcb_C_v_init ptr callerSlot___ptr_to_struct_cte_C_v_after_5 query_=GhostAssertions_aft query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace rep_graph setting up input env at 24
trace done setting up input env at 24
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
22
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
16
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
13
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((12, ()), 'fun1')])
trace testing ('hyp', None):
trace   path_cond_to_13_fun1
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000001))
trace Result: True
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000003))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000003)'))
trace Now 4 related pvalids
tryinline:
2
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((1, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_5_fun0
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.invokeIRQHandler_ClearIRQHandler
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 7
trace done setting up input env at 7
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ("Array", 4, Type ('Struct', 'Kernel_C.cte_C')))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) irq___unsigned_v_init)'))
trace Now 4 related pvalids
tryinline:
2
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((1, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_5_fun0
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.invokeTCB_Suspend
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
tryinline:
3
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_3_fun0
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-oCo0Mm.txt
solver inputs:

['(assert (not (not path_cond_to_3_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-tbjeOs.txt
solver inputs:

['(assert (not (not path_cond_to_3_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-iXz_Ix.txt
solver inputs:

['(assert (not (not path_cond_to_3_fun0)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.00s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
trace rep_graph setting up input env at 14
trace done setting up input env at 14
tryinline:
13
ti1
kkk
Kernel_C.cancelIPC
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((12, ()), 'fun1'), ((3, ()), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_3_fun0)
trace   (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_init GhostAssertions.1_init)
trace   path_cond_to_13_fun1
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-bgGuSE.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) (not path_cond_to_13_fun1)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-64aY25.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) (not path_cond_to_13_fun1)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ajHMhK.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) (not path_cond_to_13_fun1)))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
trace rep_graph setting up input env at 14
trace done setting up input env at 14
trace rep_graph setting up input env at 52
trace done setting up input env at 52
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.tcb_C'))
trace Now 3 related pvalids
tryinline:
49
ti1
kkk
Kernel_C.thread_state_ptr_get_tsType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.thread_state_ptr_get_tsType, ['Kernel_C.thread_state_ptr_get_tsType']).
tryinline:
26
ti1
kkk
Kernel_C.thread_state_ptr_get_blockingObject
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.thread_state_ptr_get_blockingObject, ['Kernel_C.thread_state_ptr_get_blockingObject']).
tryinline:
23
ti1
kkk
Kernel_C.ep_ptr_get_queue
[('ret__struct_tcb_queue_C#v.head_C', Type ('Word', 64)), ('ret__struct_tcb_queue_C#v.end_C', Type ('Word', 64))]
[('rv#space#ret__struct_tcb_queue_C#v.head_C', Type ('Word', 64)), ('rv#space#ret__struct_tcb_queue_C#v.end_C', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.ep_ptr_get_queue, ['Kernel_C.ep_ptr_get_queue']).
trace Warning: unusual unmatched function (Kernel_C.ep_ptr_get_queue, ['Kernel_C.ep_ptr_get_queue']).
tryinline:
21
ti1
kkk
Kernel_C.tcbEPDequeue
[('ret__struct_tcb_queue_C#v.head_C', Type ('Word', 64)), ('ret__struct_tcb_queue_C#v.end_C', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_tcb_queue_C#v.head_C', Type ('Word', 64)), ('rv#space#ret__struct_tcb_queue_C#v.end_C', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
19
ti1
kkk
Kernel_C.ep_ptr_set_queue
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.ep_ptr_set_queue, ['Kernel_C.ep_ptr_set_queue']).
trace Warning: unusual unmatched function (Kernel_C.ep_ptr_set_queue, ['Kernel_C.ep_ptr_set_queue']).
trace Warning: unusual unmatched function (Kernel_C.ep_ptr_set_queue, ['Kernel_C.ep_ptr_set_queue']).
trace Warning: unusual unmatched function (Kernel_C.ep_ptr_set_queue, ['Kernel_C.ep_ptr_set_queue']).
tryinline:
17
ti1
kkk
Kernel_C.endpoint_ptr_set_state
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.endpoint_ptr_set_state, ['Kernel_C.endpoint_ptr_set_state']).
trace Warning: unusual unmatched function (Kernel_C.endpoint_ptr_set_state, ['Kernel_C.endpoint_ptr_set_state']).
trace Warning: unusual unmatched function (Kernel_C.endpoint_ptr_set_state, ['Kernel_C.endpoint_ptr_set_state']).
trace Warning: unusual unmatched function (Kernel_C.endpoint_ptr_set_state, ['Kernel_C.endpoint_ptr_set_state']).
tryinline:
16
ti1
kkk
Kernel_C.setThreadState
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
29
ti1
kkk
Kernel_C.thread_state_ptr_get_blockingObject
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.thread_state_ptr_get_blockingObject, ['Kernel_C.thread_state_ptr_get_blockingObject']).
tryinline:
27
ti1
kkk
Kernel_C.cancelSignal
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
43
ti1
kkk
Kernel_C.seL4_Fault_NullFault_new
[('ret__struct_seL4_Fault_C#v.words_C.0', Type ('Word', 64)), ('ret__struct_seL4_Fault_C#v.words_C.1', Type ('Word', 64))]
[('rv#space#ret__struct_seL4_Fault_C#v.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_seL4_Fault_C#v.words_C.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.seL4_Fault_NullFault_new, ['Kernel_C.seL4_Fault_NullFault_new']).
trace Warning: unusual unmatched function (Kernel_C.seL4_Fault_NullFault_new, ['Kernel_C.seL4_Fault_NullFault_new']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.tcb_C'))
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000002))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000002)'))
trace Now 5 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 6 related pvalids
tryinline:
36
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
30
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((13, ()), 'fun1'), ((14, ()), 'fun1'), ((3, ()), 'fun0'), ((15, ()), 'fun2')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_3_fun0)
trace   (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_init GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq target___ptr_to_struct_tcb_C_v_init tptr___ptr_to_struct_tcb_C_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_32_fun2
trace   (not true)
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
trace rep_graph setting up input env at 14
trace done setting up input env at 14
trace rep_graph setting up input env at 52
trace done setting up input env at 52
trace Testing hyp whyps
trace requests = set([((13, ()), 'fun1'), ((52, ()), 'fun2'), ((3, ()), 'fun0'), ((14, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_3_fun0)
trace   (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_init GhostAssertions.1_init)
trace   (=> true path_cond_to_13_fun1)
trace   (word64-eq target___ptr_to_struct_tcb_C_v_init tptr___ptr_to_struct_tcb_C_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (not false)
trace will fetch model for 11 vars and 4 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-gPgUqB.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq target___ptr_to_struct_tcb_C_v_init tptr___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))', '(check-sat)', '(get-value (query_=GhostAssertions.1_i tptr___ptr_to_struct_tcb_C_v_init thread___ptr_to_struct_tcb_C_v_init path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_ini query_=GhostAssertions.1_i query_mem-eqMem.1_initMem. query_mem-eqMem_initMem.1_))']
done

trace will fetch model for 11 vars and 4 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-2vqOfM.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq target___ptr_to_struct_tcb_C_v_init tptr___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))', '(check-sat)', '(get-value (query_=GhostAssertions.1_i tptr___ptr_to_struct_tcb_C_v_init thread___ptr_to_struct_tcb_C_v_init path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_ini query_=GhostAssertions.1_i query_mem-eqMem.1_initMem. query_mem-eqMem_initMem.1_))']
done

trace will fetch model for 11 vars and 4 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-IlOA7g.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq target___ptr_to_struct_tcb_C_v_init tptr___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))', '(check-sat)', '(get-value (query_=GhostAssertions.1_i tptr___ptr_to_struct_tcb_C_v_init thread___ptr_to_struct_tcb_C_v_init path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_ini query_=GhostAssertions.1_i query_mem-eqMem.1_initMem. query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 11 vars and 4 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-oOIZAt.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq target___ptr_to_struct_tcb_C_v_init tptr___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= tptr___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= thread___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= query_mem-eqMem_initMem.1_ true))', '(assert (= path_cond_to_13_fun1 true))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= (= GhostAssertions_init GhostAssertions.1_init) true))', '(assert (= target___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= query_=GhostAssertions_ini true))', '(assert (= path_cond_to_3_fun0 true))', '(assert (= (mem-eq Mem_init Mem.1_init) true))', '(assert (= query_mem-eqMem.1_initMem. true))', '(check-sat)', '(get-value (query_=GhostAssertions.1_i tptr___ptr_to_struct_tcb_C_v_init thread___ptr_to_struct_tcb_C_v_init path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_ini query_=GhostAssertions.1_i query_mem-eqMem.1_initMem. query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('SONOLAR (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.01s sys)
trace Got 'sat' from SONOLAR (offline) in parallel.
trace will fetch model for 11 vars and 4 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('SONOLAR (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-cWCswL.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) (=> (=> true path_cond_to_13_fun1) (=> (word64-eq target___ptr_to_struct_tcb_C_v_init tptr___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= tptr___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= thread___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= query_mem-eqMem_initMem.1_ true))', '(assert (= path_cond_to_13_fun1 true))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= (= GhostAssertions_init GhostAssertions.1_init) true))', '(assert (= target___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= rodata-witness #xffffffff84017ba8))', '(assert (= query_=GhostAssertions_ini true))', '(assert (= path_cond_to_3_fun0 true))', '(assert (= (mem-eq Mem_init Mem.1_init) true))', '(assert (= query_mem-eqMem.1_initMem. true))', '(check-sat)', '(get-value (query_=GhostAssertions.1_i tptr___ptr_to_struct_tcb_C_v_init thread___ptr_to_struct_tcb_C_v_init path_cond_to_13_fun1 rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_ini query_=GhostAssertions.1_i query_mem-eqMem.1_initMem. query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.01s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
trace rep_graph setting up input env at 14
trace done setting up input env at 14
trace rep_graph setting up input env at 52
trace done setting up input env at 52
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.tcb_C'))
trace Now 3 related pvalids
tryinline:
49
ti1
kkk
Kernel_C.thread_state_ptr_get_tsType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.thread_state_ptr_get_tsType, ['Kernel_C.thread_state_ptr_get_tsType']).
tryinline:
26
ti1
kkk
Kernel_C.thread_state_ptr_get_blockingObject
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.thread_state_ptr_get_blockingObject, ['Kernel_C.thread_state_ptr_get_blockingObject']).
tryinline:
23
ti1
kkk
Kernel_C.ep_ptr_get_queue
[('ret__struct_tcb_queue_C#v.head_C', Type ('Word', 64)), ('ret__struct_tcb_queue_C#v.end_C', Type ('Word', 64))]
[('rv#space#ret__struct_tcb_queue_C#v.head_C', Type ('Word', 64)), ('rv#space#ret__struct_tcb_queue_C#v.end_C', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.ep_ptr_get_queue, ['Kernel_C.ep_ptr_get_queue']).
trace Warning: unusual unmatched function (Kernel_C.ep_ptr_get_queue, ['Kernel_C.ep_ptr_get_queue']).
tryinline:
21
ti1
kkk
Kernel_C.tcbEPDequeue
[('ret__struct_tcb_queue_C#v.head_C', Type ('Word', 64)), ('ret__struct_tcb_queue_C#v.end_C', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_tcb_queue_C#v.head_C', Type ('Word', 64)), ('rv#space#ret__struct_tcb_queue_C#v.end_C', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
19
ti1
kkk
Kernel_C.ep_ptr_set_queue
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.ep_ptr_set_queue, ['Kernel_C.ep_ptr_set_queue']).
trace Warning: unusual unmatched function (Kernel_C.ep_ptr_set_queue, ['Kernel_C.ep_ptr_set_queue']).
trace Warning: unusual unmatched function (Kernel_C.ep_ptr_set_queue, ['Kernel_C.ep_ptr_set_queue']).
trace Warning: unusual unmatched function (Kernel_C.ep_ptr_set_queue, ['Kernel_C.ep_ptr_set_queue']).
tryinline:
17
ti1
kkk
Kernel_C.endpoint_ptr_set_state
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.endpoint_ptr_set_state, ['Kernel_C.endpoint_ptr_set_state']).
trace Warning: unusual unmatched function (Kernel_C.endpoint_ptr_set_state, ['Kernel_C.endpoint_ptr_set_state']).
trace Warning: unusual unmatched function (Kernel_C.endpoint_ptr_set_state, ['Kernel_C.endpoint_ptr_set_state']).
trace Warning: unusual unmatched function (Kernel_C.endpoint_ptr_set_state, ['Kernel_C.endpoint_ptr_set_state']).
tryinline:
16
ti1
kkk
Kernel_C.setThreadState
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
29
ti1
kkk
Kernel_C.thread_state_ptr_get_blockingObject
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.thread_state_ptr_get_blockingObject, ['Kernel_C.thread_state_ptr_get_blockingObject']).
tryinline:
27
ti1
kkk
Kernel_C.cancelSignal
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
43
ti1
kkk
Kernel_C.seL4_Fault_NullFault_new
[('ret__struct_seL4_Fault_C#v.words_C.0', Type ('Word', 64)), ('ret__struct_seL4_Fault_C#v.words_C.1', Type ('Word', 64))]
[('rv#space#ret__struct_seL4_Fault_C#v.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_seL4_Fault_C#v.words_C.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.seL4_Fault_NullFault_new, ['Kernel_C.seL4_Fault_NullFault_new']).
trace Warning: unusual unmatched function (Kernel_C.seL4_Fault_NullFault_new, ['Kernel_C.seL4_Fault_NullFault_new']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.tcb_C'))
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000002))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000002)'))
trace Now 5 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 6 related pvalids
tryinline:
36
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
30
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((15, ()), 'fun2')])
trace testing ('hyp', None):
trace   path_cond_to_32_fun2
trace   (not true)
trace Result: True
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
tryinline:
3
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_3_fun0
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-bacWaI.txt
solver inputs:

['(assert (not (not path_cond_to_3_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-TJ0VAs.txt
solver inputs:

['(assert (not (not path_cond_to_3_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Y9MrRN.txt
solver inputs:

['(assert (not (not path_cond_to_3_fun0)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
trace rep_graph setting up input env at 14
trace done setting up input env at 14
tryinline:
13
ti1
kkk
Kernel_C.cancelIPC
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((12, ()), 'fun1'), ((3, ()), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_3_fun0)
trace   (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_init GhostAssertions.1_init)
trace   path_cond_to_13_fun1
trace   (not true)
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
trace rep_graph setting up input env at 14
trace done setting up input env at 14
trace Testing hyp whyps
trace requests = set([((3, ()), 'fun0'), ((14, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_3_fun0)
trace   (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init)
trace   (mem-eq Mem_init Mem.1_init)
trace   (= GhostAssertions_init GhostAssertions.1_init)
trace   (not false)
trace will fetch model for 7 vars and 2 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-d9pjwc.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) false))))))', '(check-sat)', '(get-value (thread___ptr_to_struct_tcb_C_v_init rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_=GhostAssertions_ini query_mem-eqMem_initMem.1_))']
done

trace will fetch model for 7 vars and 2 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Wy_ebb.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) false))))))', '(check-sat)', '(get-value (thread___ptr_to_struct_tcb_C_v_init rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_=GhostAssertions_ini query_mem-eqMem_initMem.1_))']
done

trace will fetch model for 7 vars and 2 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ojgWmC.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) false))))))', '(check-sat)', '(get-value (thread___ptr_to_struct_tcb_C_v_init rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_=GhostAssertions_ini query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.01s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 7 vars and 2 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-92UQdG.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) false))))))', '(assert (= thread___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_initMem.1_ true))', '(assert (= (= GhostAssertions_init GhostAssertions.1_init) true))', '(assert (= target___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= query_=GhostAssertions_ini true))', '(assert (= path_cond_to_3_fun0 true))', '(assert (= (mem-eq Mem_init Mem.1_init) true))', '(check-sat)', '(get-value (thread___ptr_to_struct_tcb_C_v_init rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_=GhostAssertions_ini query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('SONOLAR (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from SONOLAR (offline) in parallel.
trace will fetch model for 7 vars and 2 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('SONOLAR (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Nch4dG.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_3_fun0) (=> (word64-eq thread___ptr_to_struct_tcb_C_v_init target___ptr_to_struct_tcb_C_v_init) (=> (mem-eq Mem_init Mem.1_init) (=> (= GhostAssertions_init GhostAssertions.1_init) false))))))', '(assert (= thread___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_initMem.1_ true))', '(assert (= (= GhostAssertions_init GhostAssertions.1_init) true))', '(assert (= target___ptr_to_struct_tcb_C_v_init #x0000000000000000))', '(assert (= rodata-witness #xffffffff84017ba8))', '(assert (= query_=GhostAssertions_ini true))', '(assert (= path_cond_to_3_fun0 true))', '(assert (= (mem-eq Mem_init Mem.1_init) true))', '(check-sat)', '(get-value (thread___ptr_to_struct_tcb_C_v_init rodata-witness-val query_mem-eqMem_initMem.1_ target___ptr_to_struct_tcb_C_v_init rodata-witness query_=GhostAssertions_ini path_cond_to_3_fun0 query_=GhostAssertions_ini query_mem-eqMem_initMem.1_))']
done

trace   <-- parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
trace rep_graph setting up input env at 14
trace done setting up input env at 14
tryinline:
13
ti1
kkk
Kernel_C.cancelIPC
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((12, ()), 'fun1')])
trace testing ('hyp', None):
trace   path_cond_to_13_fun1
trace   (not true)
trace Result: True
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
tryinline:
3
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_3_fun0
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.invokeTCB_CopyRegisters
problem name Recursion Test pairing None
trace Loop (10, [9, 13, 14, 15, 16, 17, 18, 11])
trace Loop (25, [24, 28, 29, 30, 31, 32, 33, 26])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 40
trace done setting up input env at 40
tryinline:
38
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((37, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_38_fun0
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.doReplyTransfer
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 26
trace done setting up input env at 26
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.tcb_C'))
trace Now 3 related pvalids
tryinline:
24
ti1
kkk
Kernel_C.seL4_Fault_get_seL4_FaultType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.seL4_Fault_get_seL4_FaultType, ['Kernel_C.seL4_Fault_get_seL4_FaultType']).
tryinline:
7
ti1
kkk
Kernel_C.doIPCTransfer
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

tryinline:
4
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((3, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_7_fun0
trace   (not true)
trace Result: True
tryinline:
18
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((3, ()), 'fun0'), ((17, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_20_fun0
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.finaliseSlot
problem name Recursion Test pairing None
trace Loop (9, [8, 12, 13, 14, 21, 22, 23, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 10])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
56
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
53
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((52, ((9, vc_options ([], [1])),)), 'fun0'), ((9, ((9, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_53_9=i+1_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-reTTM5.txt
solver inputs:

['(assert (not (not (and path_cond_to_53_9=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-QnTLyO.txt
solver inputs:

['(assert (not (not (and path_cond_to_53_9=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Iq93Iz.txt
solver inputs:

['(assert (not (not (and path_cond_to_53_9=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (9, [61, 8, 12, 13, 14, 21, 22, 23, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 10])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace rep_graph setting up input env at 171
trace done setting up input env at 171
tryinline:
170
ti1
kkk
Kernel_C.isArchCap
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isArchCap, ['Kernel_C.isArchCap']).
tryinline:
164
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
125
ti1
kkk
Kernel_C.halt
[]
[]
kkkk

tryinline:
123
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
100
ti1
kkk
Kernel_C.cap_thread_cap_get_capTCBPtr
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_thread_cap_get_capTCBPtr, ['Kernel_C.cap_thread_cap_get_capTCBPtr']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000000))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000000)'))
trace Now 4 related pvalids
tryinline:
95
ti1
kkk
Kernel_C.unbindNotification
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
56
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
trace Testing hyp whyps
trace requests = set([((93, ()), 'fun1'), ((53, ((9, vc_options ([], [1])),)), 'fun0'), ((9, ((9, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_53_9=i+1_fun0)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_9 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init)
trace   path_cond_to_96_fun1
trace   (not true)
trace Result: True
tryinline:
115
ti1
kkk
Kernel_C.cap_irq_handler_cap_get_capIRQ
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_irq_handler_cap_get_capIRQ, ['Kernel_C.cap_irq_handler_cap_get_capIRQ']).
tryinline:
112
ti1
kkk
Kernel_C.deletingIRQHandler
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((93, ()), 'fun1'), ((53, ((9, vc_options ([], [1])),)), 'fun0'), ((9, ((9, vc_options ([0], [])),)), 'fun0'), ((111, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_53_9=i+1_fun0)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_9 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init)
trace   path_cond_to_115_fun1
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-osoSuP.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (not path_cond_to_115_fun1))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-kl9tE1.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (not path_cond_to_115_fun1))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-BqZtp4.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (not path_cond_to_115_fun1))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (9, [61, 8, 12, 13, 14, 21, 22, 23, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 10])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace rep_graph setting up input env at 171
trace done setting up input env at 171
trace rep_graph setting up input env at 178
trace done setting up input env at 178
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ("Array", 4, Type ('Struct', 'Kernel_C.cte_C')))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) irq___unsigned_v.1_init)'))
trace Now 4 related pvalids
tryinline:
173
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
56
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
170
ti1
kkk
Kernel_C.isArchCap
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isArchCap, ['Kernel_C.isArchCap']).
tryinline:
164
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
125
ti1
kkk
Kernel_C.halt
[]
[]
kkkk

tryinline:
123
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
115
ti1
kkk
Kernel_C.cap_irq_handler_cap_get_capIRQ
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_irq_handler_cap_get_capIRQ, ['Kernel_C.cap_irq_handler_cap_get_capIRQ']).
trace Testing hyp whyps
trace requests = set([((9, ((9, vc_options ([0], [])),)), 'fun0'), ((53, ((9, vc_options ([], [1])),)), 'fun0'), ((171, ()), 'fun1'), ((172, ()), 'fun2'), ((112, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_53_9=i+1_fun0)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_9 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init)
trace   (=> true path_cond_to_115_fun1)
trace   (word32-eq irq___unsigned_v_after_113 irq___unsigned_v.1_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_176_fun2
trace   (not true)
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace rep_graph setting up input env at 171
trace done setting up input env at 171
trace rep_graph setting up input env at 178
trace done setting up input env at 178
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
56
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
170
ti1
kkk
Kernel_C.isArchCap
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isArchCap, ['Kernel_C.isArchCap']).
tryinline:
164
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
125
ti1
kkk
Kernel_C.halt
[]
[]
kkkk

tryinline:
123
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
115
ti1
kkk
Kernel_C.cap_irq_handler_cap_get_capIRQ
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_irq_handler_cap_get_capIRQ, ['Kernel_C.cap_irq_handler_cap_get_capIRQ']).
trace Testing hyp whyps
trace requests = set([((9, ((9, vc_options ([0], [])),)), 'fun0'), ((53, ((9, vc_options ([], [1])),)), 'fun0'), ((178, ()), 'fun2'), ((171, ()), 'fun1'), ((112, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_53_9=i+1_fun0)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_9 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init)
trace   (=> true path_cond_to_115_fun1)
trace   (word32-eq irq___unsigned_v_after_113 irq___unsigned_v.1_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (not false)
trace will fetch model for 79 vars and 10 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Go_B0Y.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (=> (=> true path_cond_to_115_fun1) (=> (word32-eq irq___unsigned_v_after_113 irq___unsigned_v.1_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 cond_at_121 rv_space_ret__unsigned_longlong_v_after_loop_at_9 halt_success_at_125 cond_at_124 cond_at_127 path_cond_to_53_9=i+1_fun0 path_cond_to_120_fun1 path_cond_to_126_fun1 path_cond_to_118_fun1 path_cond_to_119_fun1 rodata-witness cond_at_54_9=i+1 pvalid.3 cond_at_161 ptr path_cond_to_59_fun0 pvalid cond_at_162 path_cond_to_125_fun1 path_cond_to_170_fun1 loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 path_cond_to_161_fun1 irq___unsigned_v.1_init pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 isArchCap_success_at_170 query_mem-eqMem_after_loop path_cond_to_160_fun1 fun_success_at_115 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft rv_space_ret__unsigned_longlong_v.1_after_115 cond_at_160 rv_space_ret__unsigned_longlong_v.1_after_164 rv_space_ret__unsigned_longlong_v.1_after_123 path_cond_to_116_fun1 rodata-witness-val fun_success_at_164 ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_159_fun1 query_=GhostAssertions.1_i cond_at_10_9=i+1 rv_space_ret__unsigned_long_v.1_after_170 fun_success_at_123 cond_at_126 cond_at_118 cond_at_119 path_cond_to_164_fun1 path_cond_to_115_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 cond_at_116 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init irq___unsigned_v_after_113 cond_at_120 query_load-word64Mem_initb cond_at_59 path_cond_to_123_fun1 cond_at_168 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem.))']
done

trace will fetch model for 79 vars and 10 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-2Y_Uk2.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (=> (=> true path_cond_to_115_fun1) (=> (word32-eq irq___unsigned_v_after_113 irq___unsigned_v.1_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 cond_at_121 rv_space_ret__unsigned_longlong_v_after_loop_at_9 halt_success_at_125 cond_at_124 cond_at_127 path_cond_to_53_9=i+1_fun0 path_cond_to_120_fun1 path_cond_to_126_fun1 path_cond_to_118_fun1 path_cond_to_119_fun1 rodata-witness cond_at_54_9=i+1 pvalid.3 cond_at_161 ptr path_cond_to_59_fun0 pvalid cond_at_162 path_cond_to_125_fun1 path_cond_to_170_fun1 loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 path_cond_to_161_fun1 irq___unsigned_v.1_init pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 isArchCap_success_at_170 query_mem-eqMem_after_loop path_cond_to_160_fun1 fun_success_at_115 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft rv_space_ret__unsigned_longlong_v.1_after_115 cond_at_160 rv_space_ret__unsigned_longlong_v.1_after_164 rv_space_ret__unsigned_longlong_v.1_after_123 path_cond_to_116_fun1 rodata-witness-val fun_success_at_164 ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_159_fun1 query_=GhostAssertions.1_i cond_at_10_9=i+1 rv_space_ret__unsigned_long_v.1_after_170 fun_success_at_123 cond_at_126 cond_at_118 cond_at_119 path_cond_to_164_fun1 path_cond_to_115_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 cond_at_116 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init irq___unsigned_v_after_113 cond_at_120 query_load-word64Mem_initb cond_at_59 path_cond_to_123_fun1 cond_at_168 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem.))']
done

trace will fetch model for 79 vars and 10 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-lCh3Kg.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (=> (=> true path_cond_to_115_fun1) (=> (word32-eq irq___unsigned_v_after_113 irq___unsigned_v.1_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 cond_at_121 rv_space_ret__unsigned_longlong_v_after_loop_at_9 halt_success_at_125 cond_at_124 cond_at_127 path_cond_to_53_9=i+1_fun0 path_cond_to_120_fun1 path_cond_to_126_fun1 path_cond_to_118_fun1 path_cond_to_119_fun1 rodata-witness cond_at_54_9=i+1 pvalid.3 cond_at_161 ptr path_cond_to_59_fun0 pvalid cond_at_162 path_cond_to_125_fun1 path_cond_to_170_fun1 loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 path_cond_to_161_fun1 irq___unsigned_v.1_init pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 isArchCap_success_at_170 query_mem-eqMem_after_loop path_cond_to_160_fun1 fun_success_at_115 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft rv_space_ret__unsigned_longlong_v.1_after_115 cond_at_160 rv_space_ret__unsigned_longlong_v.1_after_164 rv_space_ret__unsigned_longlong_v.1_after_123 path_cond_to_116_fun1 rodata-witness-val fun_success_at_164 ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_159_fun1 query_=GhostAssertions.1_i cond_at_10_9=i+1 rv_space_ret__unsigned_long_v.1_after_170 fun_success_at_123 cond_at_126 cond_at_118 cond_at_119 path_cond_to_164_fun1 path_cond_to_115_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 cond_at_116 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init irq___unsigned_v_after_113 cond_at_120 query_load-word64Mem_initb cond_at_59 path_cond_to_123_fun1 cond_at_168 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem.))']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.63s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace will fetch model for 79 vars and 10 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-PsufuS.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (=> (=> true path_cond_to_115_fun1) (=> (word32-eq irq___unsigned_v_after_113 irq___unsigned_v.1_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(assert (= query_load-word64Mem_after.1 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #xffffffff840029a8))', '(assert (= cond_at_121 false))', '(assert (= cond_at_120 false))', '(assert (= (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) true))', '(assert (= halt_success_at_125 false))', '(assert (= cond_at_124 false))', '(assert (= cond_at_127 false))', '(assert (= cond_at_126 false))', '(assert (= path_cond_to_126_fun1 false))', '(assert (= path_cond_to_118_fun1 true))', '(assert (= path_cond_to_119_fun1 true))', '(assert (= cond_at_168 false))', '(assert (= pvalid.3 true))', '(assert (= cond_at_161 false))', '(assert (= ptr #xffffffff84002b88))', '(assert (= cond_at_162 false))', '(assert (= loop_9_count_after_11 #x0000000000000000))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= path_cond_to_160_fun1 true))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= rv_space_ret__unsigned_long_v_after_56_9=i+1 #x8000000000000000))', '(assert (= isArchCap_success_at_170 false))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_9 #x0000000000000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_164 #x8000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= fun_success_at_164 false))', '(assert (= ret__unsigned_longlong_v_after_loop_at_9 #x8000000000000000))', '(assert (= path_cond_to_116_fun1 true))', '(assert (= fun_success_at_123 false))', '(assert (= path_cond_to_53_9=i+1_fun0 true))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= cap___struct_cap_C_v.words_C.0_init #x0000000000000000))', '(assert (= path_cond_to_56_9=i+1_fun0 true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= path_cond_to_59_fun0 true))', '(assert (= path_cond_to_123_fun1 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_58 #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_9 Mem.1_init) true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_115 #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= path_cond_to_120_fun1 true))', '(assert (= rodata-witness #xffffffff84017c00))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= cond_at_54_9=i+1 true))', '(assert (= path_cond_to_125_fun1 false))', '(assert (= fun_success_at_115 false))', '(assert (= pvalid true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_170_fun1 true))', '(assert (= query_bvaddslot___ptr_to_s.1 #xffffffff840029b0))', '(assert (= irq___unsigned_v_after_113 #x00000000))', '(assert (= fun_success_at_58 false))', '(assert (= path_cond_to_161_fun1 true))', '(assert (= irq___unsigned_v.1_init #x00000000))', '(assert (= cond_at_160 false))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029a8))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= query_load-word64Mem_after #x0000000000000000))', '(assert (= loop_9_count_after_loop_at_9 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_123 #x0000000000000010))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029b0))', '(assert (= path_cond_to_115_fun1 true))', '(assert (= cond_at_116 true))', '(assert (= rv_space_ret__unsigned_long_v.1_after_170 #x0000000000000000))', '(assert (= cond_at_118 true))', '(assert (= cond_at_119 false))', '(assert (= path_cond_to_164_fun1 true))', '(assert (= path_cond_to_159_fun1 true))', '(assert (= query_bvaddslot___ptr_to_s #xffffffff840029a8))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_58_fun0 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= pc_of_loop_at_9 true))', '(assert (= ptr.2 #xffffffff840029a8))', '(assert (= cond_at_10_9=i+1 true))', '(assert (= isFinalCapability_success_at_56_9=i+1 false))', '(assert (= final___unsigned_long_v.1_init #x8000000000000000))', '(assert (= immediate___unsigned_long_v_init #x0000000000000000))', '(assert (= cap___struct_cap_C_v.words_C.1_init #x0000000000000000))', '(assert (= cond_at_59 true))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 cond_at_121 rv_space_ret__unsigned_longlong_v_after_loop_at_9 halt_success_at_125 cond_at_124 cond_at_127 path_cond_to_53_9=i+1_fun0 path_cond_to_120_fun1 path_cond_to_126_fun1 path_cond_to_118_fun1 path_cond_to_119_fun1 rodata-witness cond_at_54_9=i+1 pvalid.3 cond_at_161 ptr path_cond_to_59_fun0 pvalid cond_at_162 path_cond_to_125_fun1 path_cond_to_170_fun1 loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 path_cond_to_161_fun1 irq___unsigned_v.1_init pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 isArchCap_success_at_170 query_mem-eqMem_after_loop path_cond_to_160_fun1 fun_success_at_115 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft rv_space_ret__unsigned_longlong_v.1_after_115 cond_at_160 rv_space_ret__unsigned_longlong_v.1_after_164 rv_space_ret__unsigned_longlong_v.1_after_123 path_cond_to_116_fun1 rodata-witness-val fun_success_at_164 ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_159_fun1 query_=GhostAssertions.1_i cond_at_10_9=i+1 rv_space_ret__unsigned_long_v.1_after_170 fun_success_at_123 cond_at_126 cond_at_118 cond_at_119 path_cond_to_164_fun1 path_cond_to_115_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 cond_at_116 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init irq___unsigned_v_after_113 cond_at_120 query_load-word64Mem_initb cond_at_59 path_cond_to_123_fun1 cond_at_168 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem.))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.67s elapsed, 0.03s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 79 vars and 10 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-9Li3oT.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (=> (=> true path_cond_to_115_fun1) (=> (word32-eq irq___unsigned_v_after_113 irq___unsigned_v.1_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(assert (= query_load-word64Mem_after.1 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffffff84017ca8))', '(assert (= cond_at_121 false))', '(assert (= cond_at_120 false))', '(assert (= (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) true))', '(assert (= halt_success_at_125 false))', '(assert (= cond_at_124 false))', '(assert (= cond_at_127 false))', '(assert (= cond_at_126 false))', '(assert (= path_cond_to_126_fun1 false))', '(assert (= path_cond_to_118_fun1 true))', '(assert (= path_cond_to_119_fun1 true))', '(assert (= cond_at_168 false))', '(assert (= pvalid.3 true))', '(assert (= cond_at_161 false))', '(assert (= ptr #xffffffff84002b88))', '(assert (= cond_at_162 false))', '(assert (= loop_9_count_after_11 #x0000000000000000))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= path_cond_to_160_fun1 true))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= rv_space_ret__unsigned_long_v_after_56_9=i+1 #x0000000000000001))', '(assert (= isArchCap_success_at_170 false))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_9 #x0000000000000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_164 #x0000000000000001))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= fun_success_at_164 false))', '(assert (= ret__unsigned_longlong_v_after_loop_at_9 #x0000000000000001))', '(assert (= path_cond_to_116_fun1 true))', '(assert (= fun_success_at_123 false))', '(assert (= path_cond_to_53_9=i+1_fun0 true))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= cap___struct_cap_C_v.words_C.0_init #x0000000000000000))', '(assert (= path_cond_to_56_9=i+1_fun0 true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= path_cond_to_59_fun0 true))', '(assert (= path_cond_to_123_fun1 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_58 #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_9 Mem.1_init) true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_115 #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= path_cond_to_120_fun1 true))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= cond_at_54_9=i+1 true))', '(assert (= path_cond_to_125_fun1 false))', '(assert (= fun_success_at_115 false))', '(assert (= pvalid true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_170_fun1 true))', '(assert (= query_bvaddslot___ptr_to_s.1 #x7fffffff84017cb0))', '(assert (= irq___unsigned_v_after_113 #x00000000))', '(assert (= fun_success_at_58 false))', '(assert (= path_cond_to_161_fun1 true))', '(assert (= irq___unsigned_v.1_init #x00000000))', '(assert (= cond_at_160 false))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffffff84017ca8))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= query_load-word64Mem_after #x0000000000000000))', '(assert (= loop_9_count_after_loop_at_9 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_123 #x0000000000000010))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffffff84017cb0))', '(assert (= path_cond_to_115_fun1 true))', '(assert (= cond_at_116 true))', '(assert (= rv_space_ret__unsigned_long_v.1_after_170 #x0000000000000000))', '(assert (= cond_at_118 true))', '(assert (= cond_at_119 false))', '(assert (= path_cond_to_164_fun1 true))', '(assert (= path_cond_to_159_fun1 true))', '(assert (= query_bvaddslot___ptr_to_s #x7fffffff84017ca8))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_58_fun0 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= pc_of_loop_at_9 true))', '(assert (= ptr.2 #x7fffffff84017ca8))', '(assert (= cond_at_10_9=i+1 true))', '(assert (= isFinalCapability_success_at_56_9=i+1 false))', '(assert (= final___unsigned_long_v.1_init #x0000000000000001))', '(assert (= immediate___unsigned_long_v_init #x0000000000000000))', '(assert (= cap___struct_cap_C_v.words_C.1_init #x0000000000000000))', '(assert (= cond_at_59 true))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 cond_at_121 rv_space_ret__unsigned_longlong_v_after_loop_at_9 halt_success_at_125 cond_at_124 cond_at_127 path_cond_to_53_9=i+1_fun0 path_cond_to_120_fun1 path_cond_to_126_fun1 path_cond_to_118_fun1 path_cond_to_119_fun1 rodata-witness cond_at_54_9=i+1 pvalid.3 cond_at_161 ptr path_cond_to_59_fun0 pvalid cond_at_162 path_cond_to_125_fun1 path_cond_to_170_fun1 loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 path_cond_to_161_fun1 irq___unsigned_v.1_init pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 isArchCap_success_at_170 query_mem-eqMem_after_loop path_cond_to_160_fun1 fun_success_at_115 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft rv_space_ret__unsigned_longlong_v.1_after_115 cond_at_160 rv_space_ret__unsigned_longlong_v.1_after_164 rv_space_ret__unsigned_longlong_v.1_after_123 path_cond_to_116_fun1 rodata-witness-val fun_success_at_164 ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_159_fun1 query_=GhostAssertions.1_i cond_at_10_9=i+1 rv_space_ret__unsigned_long_v.1_after_170 fun_success_at_123 cond_at_126 cond_at_118 cond_at_119 path_cond_to_164_fun1 path_cond_to_115_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 cond_at_116 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init irq___unsigned_v_after_113 cond_at_120 query_load-word64Mem_initb cond_at_59 path_cond_to_123_fun1 cond_at_168 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem.))']
done

trace   <-- parallel solver ('SONOLAR (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from SONOLAR (offline) in parallel.
trace will fetch model for 79 vars and 10 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('SONOLAR (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-bjXQrl.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) (=> (=> true path_cond_to_115_fun1) (=> (word32-eq irq___unsigned_v_after_113 irq___unsigned_v.1_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false)))))))))))))', '(assert (= query_load-word64Mem_after.1 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x33ffdc0003c1b7f0))', '(assert (= cond_at_121 false))', '(assert (= cond_at_120 false))', '(assert (= (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) true))', '(assert (= halt_success_at_125 false))', '(assert (= cond_at_124 false))', '(assert (= cond_at_127 false))', '(assert (= cond_at_126 false))', '(assert (= path_cond_to_126_fun1 false))', '(assert (= path_cond_to_118_fun1 true))', '(assert (= path_cond_to_119_fun1 true))', '(assert (= cond_at_168 false))', '(assert (= pvalid.3 true))', '(assert (= cond_at_161 false))', '(assert (= ptr #xffffffff84002b88))', '(assert (= cond_at_162 false))', '(assert (= loop_9_count_after_11 #x0000000000000000))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= path_cond_to_160_fun1 true))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= rv_space_ret__unsigned_long_v_after_56_9=i+1 #xe000000000000000))', '(assert (= isArchCap_success_at_170 false))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_9 #x0000000000000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_164 #xfffffffffffffffa))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= fun_success_at_164 false))', '(assert (= ret__unsigned_longlong_v_after_loop_at_9 #x8000000000000000))', '(assert (= path_cond_to_116_fun1 true))', '(assert (= fun_success_at_123 false))', '(assert (= path_cond_to_53_9=i+1_fun0 true))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= cap___struct_cap_C_v.words_C.0_init #x0000000000000000))', '(assert (= path_cond_to_56_9=i+1_fun0 true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= path_cond_to_59_fun0 true))', '(assert (= path_cond_to_123_fun1 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_58 #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_9 Mem.1_init) true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_115 #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= path_cond_to_120_fun1 true))', '(assert (= rodata-witness #xffffffff84017ba8))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= cond_at_54_9=i+1 true))', '(assert (= path_cond_to_125_fun1 false))', '(assert (= fun_success_at_115 false))', '(assert (= pvalid true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_170_fun1 true))', '(assert (= query_bvaddslot___ptr_to_s.1 #x33ffdc0003c1b7f8))', '(assert (= irq___unsigned_v_after_113 #x00000000))', '(assert (= fun_success_at_58 false))', '(assert (= path_cond_to_161_fun1 true))', '(assert (= irq___unsigned_v.1_init #x00000000))', '(assert (= cond_at_160 false))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x33ffdc0003c1b7f0))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= query_load-word64Mem_after #x0000000000000000))', '(assert (= loop_9_count_after_loop_at_9 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_123 #x0000000000000010))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x33ffdc0003c1b7f8))', '(assert (= path_cond_to_115_fun1 true))', '(assert (= cond_at_116 true))', '(assert (= rv_space_ret__unsigned_long_v.1_after_170 #x0000000000000000))', '(assert (= cond_at_118 true))', '(assert (= cond_at_119 false))', '(assert (= path_cond_to_164_fun1 true))', '(assert (= path_cond_to_159_fun1 true))', '(assert (= query_bvaddslot___ptr_to_s #x33ffdc0003c1b7f0))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_58_fun0 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= pc_of_loop_at_9 true))', '(assert (= ptr.2 #x33ffdc0003c1b7f0))', '(assert (= cond_at_10_9=i+1 true))', '(assert (= isFinalCapability_success_at_56_9=i+1 false))', '(assert (= final___unsigned_long_v.1_init #xe000000000000000))', '(assert (= immediate___unsigned_long_v_init #x0000000000000000))', '(assert (= cap___struct_cap_C_v.words_C.1_init #x0000000000000000))', '(assert (= cond_at_59 true))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 cond_at_121 rv_space_ret__unsigned_longlong_v_after_loop_at_9 halt_success_at_125 cond_at_124 cond_at_127 path_cond_to_53_9=i+1_fun0 path_cond_to_120_fun1 path_cond_to_126_fun1 path_cond_to_118_fun1 path_cond_to_119_fun1 rodata-witness cond_at_54_9=i+1 pvalid.3 cond_at_161 ptr path_cond_to_59_fun0 pvalid cond_at_162 path_cond_to_125_fun1 path_cond_to_170_fun1 loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 path_cond_to_161_fun1 irq___unsigned_v.1_init pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 isArchCap_success_at_170 query_mem-eqMem_after_loop path_cond_to_160_fun1 fun_success_at_115 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft rv_space_ret__unsigned_longlong_v.1_after_115 cond_at_160 rv_space_ret__unsigned_longlong_v.1_after_164 rv_space_ret__unsigned_longlong_v.1_after_123 path_cond_to_116_fun1 rodata-witness-val fun_success_at_164 ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_159_fun1 query_=GhostAssertions.1_i cond_at_10_9=i+1 rv_space_ret__unsigned_long_v.1_after_170 fun_success_at_123 cond_at_126 cond_at_118 cond_at_119 path_cond_to_164_fun1 path_cond_to_115_fun1 query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 cond_at_116 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init irq___unsigned_v_after_113 cond_at_120 query_load-word64Mem_initb cond_at_59 path_cond_to_123_fun1 cond_at_168 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_=GhostAssertions.1_i query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem.))']
done

trace   <-- parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace rep_graph setting up input env at 171
trace done setting up input env at 171
trace rep_graph setting up input env at 178
trace done setting up input env at 178
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ("Array", 4, Type ('Struct', 'Kernel_C.cte_C')))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) irq___unsigned_v.1_init)'))
trace Now 4 related pvalids
tryinline:
173
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((172, ()), 'fun2')])
trace testing ('hyp', None):
trace   path_cond_to_176_fun2
trace   (not true)
trace Result: True
problem name Recursion Test pairing None
trace Loop (9, [8, 12, 13, 14, 21, 22, 23, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 10])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
56
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
53
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((52, ((9, vc_options ([], [1])),)), 'fun0'), ((9, ((9, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_53_9=i+1_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-5gOf38.txt
solver inputs:

['(assert (not (not (and path_cond_to_53_9=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-E0kwwX.txt
solver inputs:

['(assert (not (not (and path_cond_to_53_9=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Y_fJi9.txt
solver inputs:

['(assert (not (not (and path_cond_to_53_9=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (9, [61, 8, 12, 13, 14, 21, 22, 23, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 10])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace rep_graph setting up input env at 171
trace done setting up input env at 171
tryinline:
170
ti1
kkk
Kernel_C.isArchCap
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isArchCap, ['Kernel_C.isArchCap']).
tryinline:
164
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
125
ti1
kkk
Kernel_C.halt
[]
[]
kkkk

tryinline:
123
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
100
ti1
kkk
Kernel_C.cap_thread_cap_get_capTCBPtr
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_thread_cap_get_capTCBPtr, ['Kernel_C.cap_thread_cap_get_capTCBPtr']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000000))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000000)'))
trace Now 4 related pvalids
tryinline:
95
ti1
kkk
Kernel_C.unbindNotification
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
56
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
trace Testing hyp whyps
trace requests = set([((93, ()), 'fun1'), ((53, ((9, vc_options ([], [1])),)), 'fun0'), ((9, ((9, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_53_9=i+1_fun0)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_9 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init)
trace   path_cond_to_96_fun1
trace   (not true)
trace Result: True
tryinline:
115
ti1
kkk
Kernel_C.cap_irq_handler_cap_get_capIRQ
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_irq_handler_cap_get_capIRQ, ['Kernel_C.cap_irq_handler_cap_get_capIRQ']).
tryinline:
112
ti1
kkk
Kernel_C.deletingIRQHandler
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((93, ()), 'fun1'), ((53, ((9, vc_options ([], [1])),)), 'fun0'), ((9, ((9, vc_options ([0], [])),)), 'fun0'), ((111, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_53_9=i+1_fun0)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_9 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init)
trace   path_cond_to_115_fun1
trace   (not true)
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace rep_graph setting up input env at 171
trace done setting up input env at 171
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
56
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
trace Testing hyp whyps
trace requests = set([((9, ((9, vc_options ([0], [])),)), 'fun0'), ((53, ((9, vc_options ([], [1])),)), 'fun0'), ((171, ()), 'fun1')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_53_9=i+1_fun0)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init)
trace   (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init)
trace   (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_9 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init)
trace   (not false)
trace will fetch model for 41 vars and 8 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-RwS9Ts.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) false)))))))))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 rv_space_ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_53_9=i+1_fun0 rodata-witness cond_at_54_9=i+1 pvalid.3 ptr path_cond_to_59_fun0 pvalid loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 rodata-witness-val query_mem-eqMem_after_loop ret__unsigned_longlong_v_after_loop_at_9 cond_at_10_9=i+1 query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init query_load-word64Mem_initb cond_at_59 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1))']
done

trace will fetch model for 41 vars and 8 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-KKA1iD.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) false)))))))))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 rv_space_ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_53_9=i+1_fun0 rodata-witness cond_at_54_9=i+1 pvalid.3 ptr path_cond_to_59_fun0 pvalid loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 rodata-witness-val query_mem-eqMem_after_loop ret__unsigned_longlong_v_after_loop_at_9 cond_at_10_9=i+1 query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init query_load-word64Mem_initb cond_at_59 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1))']
done

trace will fetch model for 41 vars and 8 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ZZOGyM.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) false)))))))))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 rv_space_ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_53_9=i+1_fun0 rodata-witness cond_at_54_9=i+1 pvalid.3 ptr path_cond_to_59_fun0 pvalid loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 rodata-witness-val query_mem-eqMem_after_loop ret__unsigned_longlong_v_after_loop_at_9 cond_at_10_9=i+1 query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init query_load-word64Mem_initb cond_at_59 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 41 vars and 8 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-vZZBRN.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) false)))))))))', '(assert (= query_load-word64Mem_after.1 #x0000000000000000))', '(assert (= cap___struct_cap_C_v.words_C.0_init #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffffff84017ca8))', '(assert (= (mem-eq Mem_after_loop_at_9 Mem.1_init) true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_9 #x0000000000000000))', '(assert (= (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) true))', '(assert (= path_cond_to_53_9=i+1_fun0 true))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= cond_at_54_9=i+1 true))', '(assert (= pvalid.3 true))', '(assert (= ptr #xffffffff84002b88))', '(assert (= exposed___unsigned_long_v_init #x0000000000000000))', '(assert (= pvalid true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= loop_9_count_after_11 #x0000000000000000))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= fun_success_at_58 false))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= rv_space_ret__unsigned_long_v_after_56_9=i+1 #x0000000000000000))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffffff84017ca8))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= query_load-word64Mem_after #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_58 #x0000000000000000))', '(assert (= loop_9_count_after_loop_at_9 #x0000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffffff84017cb0))', '(assert (= ret__unsigned_longlong_v_after_loop_at_9 #x0000000000000001))', '(assert (= cond_at_10_9=i+1 true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= query_bvaddslot___ptr_to_s.1 #x7fffffff84017cb0))', '(assert (= query_bvaddslot___ptr_to_s #x7fffffff84017ca8))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_58_fun0 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= pc_of_loop_at_9 true))', '(assert (= ptr.2 #x7fffffff84017ca8))', '(assert (= path_cond_to_56_9=i+1_fun0 true))', '(assert (= isFinalCapability_success_at_56_9=i+1 false))', '(assert (= final___unsigned_long_v.1_init #x0000000000000000))', '(assert (= immediate___unsigned_long_v_init #x0000000000000000))', '(assert (= cap___struct_cap_C_v.words_C.1_init #x0000000000000000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= cond_at_59 true))', '(assert (= path_cond_to_59_fun0 true))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 rv_space_ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_53_9=i+1_fun0 rodata-witness cond_at_54_9=i+1 pvalid.3 ptr path_cond_to_59_fun0 pvalid loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 rodata-witness-val query_mem-eqMem_after_loop ret__unsigned_longlong_v_after_loop_at_9 cond_at_10_9=i+1 query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init query_load-word64Mem_initb cond_at_59 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1))']
done

trace   <-- parallel solver ('SONOLAR (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from SONOLAR (offline) in parallel.
trace will fetch model for 41 vars and 8 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('SONOLAR (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-fHflbn.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_53_9=i+1_fun0) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) cap___struct_cap_C_v.words_C.0_init) (=> (word64-eq (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) cap___struct_cap_C_v.words_C.1_init) (=> (word64-eq rv_space_ret__unsigned_long_v_after_56_9=i+1 final___unsigned_long_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_9 Mem.1_init) (=> (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) false)))))))))', '(assert (= query_load-word64Mem_after.1 #x0000000000000000))', '(assert (= cap___struct_cap_C_v.words_C.0_init #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x8000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_9 Mem.1_init) true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_9 #x0000000000000000))', '(assert (= (= GhostAssertions_after_loop_at_9 GhostAssertions.1_init) true))', '(assert (= path_cond_to_53_9=i+1_fun0 true))', '(assert (= rodata-witness #xffffffff84017ca8))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= cond_at_54_9=i+1 true))', '(assert (= pvalid.3 true))', '(assert (= ptr #xffffffff84002b88))', '(assert (= exposed___unsigned_long_v_init #x0000000000000000))', '(assert (= pvalid true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= loop_9_count_after_11 #x0000000000000000))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= fun_success_at_58 false))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= rv_space_ret__unsigned_long_v_after_56_9=i+1 #x0000000000000000))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x8000000000000000))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= query_load-word64Mem_after #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_58 #x0000000000000000))', '(assert (= loop_9_count_after_loop_at_9 #x0000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x8000000000000008))', '(assert (= ret__unsigned_longlong_v_after_loop_at_9 #x8000000000000000))', '(assert (= cond_at_10_9=i+1 true))', '(assert (= (load-word64 Mem_init (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= query_bvaddslot___ptr_to_s.1 #x8000000000000008))', '(assert (= query_bvaddslot___ptr_to_s #x8000000000000000))', '(assert (= (load-word64 Mem_after_loop_at_9 (bvadd slot___ptr_to_struct_cte_C_v_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_58_fun0 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= pc_of_loop_at_9 true))', '(assert (= ptr.2 #x8000000000000000))', '(assert (= path_cond_to_56_9=i+1_fun0 true))', '(assert (= isFinalCapability_success_at_56_9=i+1 false))', '(assert (= final___unsigned_long_v.1_init #x0000000000000000))', '(assert (= immediate___unsigned_long_v_init #x0000000000000000))', '(assert (= cap___struct_cap_C_v.words_C.1_init #x0000000000000000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= cond_at_59 true))', '(assert (= path_cond_to_59_fun0 true))', '(check-sat)', '(get-value (query_load-word64Mem_after.1 ptr.2 slot___ptr_to_struct_cte_C_v_init query_load-word64Mem_initb.1 rv_space_ret__unsigned_longlong_v_after_loop_at_9 path_cond_to_53_9=i+1_fun0 rodata-witness cond_at_54_9=i+1 pvalid.3 ptr path_cond_to_59_fun0 pvalid loop_9_count_after_11 exposed___unsigned_long_v_init pvalid.5 fun_success_at_58 pvalid.1 pvalid.2 rv_space_ret__unsigned_long_v_after_56_9=i+1 query_load-word64Mem_after rv_space_ret__unsigned_longlong_v_after_58 loop_9_count_after_loop_at_9 rodata-witness-val query_mem-eqMem_after_loop ret__unsigned_longlong_v_after_loop_at_9 cond_at_10_9=i+1 query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s path_cond_to_58_fun0 ptr.1 pc_of_loop_at_9 cap___struct_cap_C_v.words_C.0_init path_cond_to_56_9=i+1_fun0 isFinalCapability_success_at_56_9=i+1 final___unsigned_long_v.1_init pvalid.4 immediate___unsigned_long_v_init cap___struct_cap_C_v.words_C.1_init query_load-word64Mem_initb cond_at_59 query_load-word64Mem_initb query_load-word64Mem_after.1 query_mem-eqMem_after_loop query_=GhostAssertions_aft query_bvaddslot___ptr_to_s.1 query_bvaddslot___ptr_to_s query_load-word64Mem_after query_load-word64Mem_initb.1))']
done

trace   <-- parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace rep_graph setting up input env at 171
trace done setting up input env at 171
tryinline:
170
ti1
kkk
Kernel_C.isArchCap
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isArchCap, ['Kernel_C.isArchCap']).
tryinline:
164
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
125
ti1
kkk
Kernel_C.halt
[]
[]
kkkk

tryinline:
123
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
100
ti1
kkk
Kernel_C.cap_thread_cap_get_capTCBPtr
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_thread_cap_get_capTCBPtr, ['Kernel_C.cap_thread_cap_get_capTCBPtr']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000000))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000000)'))
trace Now 4 related pvalids
tryinline:
95
ti1
kkk
Kernel_C.unbindNotification
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((93, ()), 'fun1')])
trace testing ('hyp', None):
trace   path_cond_to_96_fun1
trace   (not true)
trace Result: True
tryinline:
115
ti1
kkk
Kernel_C.cap_irq_handler_cap_get_capIRQ
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_irq_handler_cap_get_capIRQ, ['Kernel_C.cap_irq_handler_cap_get_capIRQ']).
tryinline:
112
ti1
kkk
Kernel_C.deletingIRQHandler
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((93, ()), 'fun1'), ((111, ()), 'fun1')])
trace testing ('hyp', None):
trace   path_cond_to_115_fun1
trace   (not true)
trace Result: True
problem name Recursion Test pairing None
trace Loop (9, [8, 12, 13, 14, 21, 22, 23, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 10])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 60
trace done setting up input env at 60
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
58
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
56
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
53
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((52, ((9, vc_options ([], [1])),)), 'fun0'), ((9, ((9, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_53_9=i+1_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000001))
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.restart
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 10
trace done setting up input env at 10
tryinline:
9
ti1
kkk
Kernel_C.isBlocked
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.isBlocked, ['Kernel_C.isBlocked']).
tryinline:
6
ti1
kkk
Kernel_C.cancelIPC
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((5, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_6_fun0
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.sendSignal
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 38
trace done setting up input env at 38
tryinline:
37
ti1
kkk
Kernel_C.notification_ptr_get_state
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.notification_ptr_get_state, ['Kernel_C.notification_ptr_get_state']).
tryinline:
15
ti1
kkk
Kernel_C.notification_ptr_get_ntfnBoundTCB
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.notification_ptr_get_ntfnBoundTCB, ['Kernel_C.notification_ptr_get_ntfnBoundTCB']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.tcb_C'))
trace Now 3 related pvalids
tryinline:
9
ti1
kkk
Kernel_C.thread_state_ptr_get_tsType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.thread_state_ptr_get_tsType, ['Kernel_C.thread_state_ptr_get_tsType']).
tryinline:
5
ti1
kkk
Kernel_C.cancelIPC
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((4, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_5_fun0
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.invokeTCB_ReadRegisters
problem name Recursion Test pairing None
trace Loop (10, [9, 13, 14, 15, 16, 17, 18, 11])
trace Loop (21, [20, 24, 25, 26, 27, 28, 29, 22])
trace Loop (33, [32, 36, 37, 38, 39, 40, 41, 34])
trace Loop (44, [43, 47, 48, 49, 50, 51, 52, 45])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 67
trace done setting up input env at 67
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Global (Type ("Ptr", Type (\'Struct\', \'Kernel_C.tcb_C\')))'))
trace Now 3 related pvalids
tryinline:
63
ti1
kkk
Kernel_C.suspend
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((62, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_63_fun0
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.invokeIRQHandler_SetIRQHandler
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 8
trace done setting up input env at 8
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ("Array", 4, Type ('Struct', 'Kernel_C.cte_C')))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) irq___unsigned_v_init)'))
trace Now 4 related pvalids
tryinline:
3
ti1
kkk
Kernel_C.cteDeleteOne
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((2, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_6_fun0
trace   (not true)
trace Result: True
Doing recursion analysis for function group:
  ['Kernel_C.reduceZombie', 'Kernel_C.cteDelete', 'Kernel_C.finaliseSlot']
trace Checking idents for Kernel_C.cteRevoke
problem name Recursion Test pairing None
trace Loop (4, [3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
23
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((22, ((4, vc_options ([], [1])),)), 'fun0'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_23_4=i+1_fun0
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-uYeNTD.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-lTYNRy.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-1LF3li.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
tryinline:
42
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((23, ((4, vc_options ([], [1])),)), 'fun0'), ((41, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   path_cond_to_42_fun1
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ExklUL.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not path_cond_to_42_fun1))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-E9fNxY.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not path_cond_to_42_fun1))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-F1BD1Z.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not path_cond_to_42_fun1))))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
75
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((74, ((52, vc_options ([], [1])),)), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_75_52=i+1_fun2
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-TYMI28.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not path_cond_to_75_52=i+1_fun2)))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-6XBOmB.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not path_cond_to_75_52=i+1_fun2)))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-GbTopC.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not path_cond_to_75_52=i+1_fun2)))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
tryinline:
140
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64)), ('Mem.3', Type ('Builtin', 'Mem')), ('HTD.3', Type ('Builtin', 'HTD')), ('PMS.3', Type ('Builtin', 'PMS')), ('GhostAssertions.3', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace Testing hyp whyps
trace requests = set([((139, ()), 'fun3'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   path_cond_to_141_fun3
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-YG8_r1.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-wzLynS.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-yduFol.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
tryinline:
168
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.4', Type ('Builtin', 'Mem')), ('HTD.4', Type ('Builtin', 'HTD')), ('PMS.4', Type ('Builtin', 'PMS')), ('GhostAssertions.4', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((167, ()), 'fun4'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   path_cond_to_168_fun4
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-TgpGbq.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (not path_cond_to_168_fun4)))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-vQMH8_.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (not path_cond_to_168_fun4)))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-DkG3Wb.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (not path_cond_to_168_fun4)))))))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace Loop (178, [177, 181, 182, 183, 190, 191, 192, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 179])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
227
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
225
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
222
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

tryinline:
220
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
209
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
201
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((178, ((178, vc_options ([0], [])),)), 'fun5'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((200, ((178, vc_options ([], [1])),)), 'fun5'), ((140, ()), 'fun3'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   path_cond_to_201_178=i+1_fun5
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-baKYoG.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (not path_cond_to_201_178=i+1_fun5))))))))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-49sXO_.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (not path_cond_to_201_178=i+1_fun5))))))))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-lfIocG.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (not path_cond_to_201_178=i+1_fun5))))))))))))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.01s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace Loop (178, [230, 177, 181, 182, 183, 190, 191, 192, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 179])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace rep_graph setting up input env at 286
trace done setting up input env at 286
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
284
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
280
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
277
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.4_after_280 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.4_after_280 ((_ sign_extend 32) #x00000001))'))
tryinline:
266
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64)), ('Mem.6', Type ('Builtin', 'Mem')), ('HTD.6', Type ('Builtin', 'HTD')), ('PMS.6', Type ('Builtin', 'PMS')), ('GhostAssertions.6', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
227
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
225
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
222
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

tryinline:
220
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
209
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((229, ()), 'fun5'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((178, ((178, vc_options ([0], [])),)), 'fun5'), ((43, ()), 'fun1'), ((265, ()), 'fun6'), ((4, ((4, vc_options ([0], [])),)), 'fun0'), ((201, ((178, vc_options ([], [1])),)), 'fun5')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (=> true path_cond_to_201_178=i+1_fun5)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init)
trace   (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init)
trace   (mem-eq Mem.5_after_212_178=i+1 Mem.6_init)
trace   (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init)
trace   path_cond_to_267_fun6
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace rep_graph setting up input env at 286
trace done setting up input env at 286
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
227
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
225
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
222
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

tryinline:
220
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
209
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((229, ()), 'fun5'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((286, ()), 'fun6'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((43, ()), 'fun1'), ((178, ((178, vc_options ([0], [])),)), 'fun5'), ((4, ((4, vc_options ([0], [])),)), 'fun0'), ((201, ((178, vc_options ([], [1])),)), 'fun5')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (=> true path_cond_to_201_178=i+1_fun5)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init)
trace   (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init)
trace   (mem-eq Mem.5_after_212_178=i+1 Mem.6_init)
trace   (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init)
trace   (not false)
trace will fetch model for 229 vars and 40 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-pWOs52.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (=> (=> true path_cond_to_201_178=i+1_fun5) (=> (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init) (=> (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init) (=> (mem-eq Mem.5_after_212_178=i+1 Mem.6_init) (=> (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init) false))))))))))))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_213_178=i+1 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 finaliseCap_success_at_222_178=i+1 path_cond_to_86_52=i+1_fun2 isFinalCapability_success_at_225_178=i+1 fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_220_178=i+1 ptr query_load-word64store-wor.1 immediate___unsigned_long_v.3_init query_load-word64store-wor cond_at_206_178=i+1 rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 path_cond_to_212_178=i+1_fun5 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 path_cond_to_201_178=i+1_fun5 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 capRemovable_success_at_220_178=i+1 ret__int_v.3_after_207_178=i+1 ret__unsigned_longlong_v_after_loop_at_4 ret__unsigned_longlong_v.3_after_loop_at_178 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 cond_at_218_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_206_178=i+1 path_cond_to_141_fun3 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 query_bvaddslot___ptr_to_s.5 path_cond_to_32_fun0 path_cond_to_26_fun0 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_209_178=i+1 query_bvaddslot___ptr_to_s.4 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb rv_space_ret__unsigned_longlong_v.3_after_227 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_210_178=i+1 fun_success_at_158 fun_success_at_227 query_load-word64Mem_initb.1 fun_success_at_154 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_207_178=i+1 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.17 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid.18 pvalid.19 pvalid rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_after_222_178=i+1 cond_at_179_178=i+1 query_=GhostAssertions.5_a cond_at_97_52=i+1 query_=GhostAssertions.3_i query_mem-eqMem.1_initMem. rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_218_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_208_178=i+1 path_cond_to_228_fun5 cond_at_223_178=i+1 cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_168_fun4 pvalid.23 pvalid.22 path_cond_to_151_fun3 pvalid.20 path_cond_to_213_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_after_222_178=i+1 capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init rv_space_ret__unsigned_long_v.3_after_220_178=i+1 pvalid.25 path_cond_to_225_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_220_178=i+1 pvalid.24 capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.7 ptr.6 immediate___unsigned_long_v_init rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_211_178=i+1 query_load-word64Mem.5_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_201_178=i+1 query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 rv_space_ret__unsigned_long_v.3_after_209_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_after_222_178=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 query_=GhostAssertions.4_i pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_219_178=i+1 cond_at_5_4=i+1 path_cond_to_227_fun5 query_load-word64Mem.5_aft.2 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 fc_ret___struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_220_178=i+1 ret__int_v.3_v_at_206_178=i+1 path_cond_to_96_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_212_178=i+1 query_=GhostAssertions.2_a query_mem-eqMem.5_after_21 query_=GhostAssertions.1_i endSlot___ptr_to_struct_cte_C_v_after_141 query_mem-eqMem.4_initMem. pvalid.16 rv_space_ret__unsigned_long_v.3_v_at_206_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_221_178=i+1 pvalid.21 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_load-word64Mem.5_aft cond_at_148 cond_at_213_178=i+1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_after_222_178=i+1 pvalid.13 rv_space_ret__unsigned_long_v.3_after_225_178=i+1 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init path_cond_to_209_178=i+1_fun5 fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_220_178=i+1 query_bvaddbvaddslot___ptr.5 pc_of_loop_at_178 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_221_178=i+1 query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 path_cond_to_87_52=i+1_fun2 query_bvaddbvaddslot___ptr.1 immediate___unsigned_long_v.2_init rodata-witness query_bvaddbvaddslot___ptr.4 slot___ptr_to_struct_cte_C_v.6_init cond_at_142 path_cond_to_206_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.5_ini.1 loop_9_count.1_after_180 query_load-word64Mem.2_ini.1 slot___ptr_to_struct_cte_C_v.5_init path_cond_to_6_fun0 cond_at_210_178=i+1 cond_at_27 path_cond_to_99_52=i+1_fun2 path_cond_to_222_178=i+1_fun5 rv_space_ret__unsigned_longlong_v.3_after_loop_at_178 capCyclicZombie_success_at_209_178=i+1 cond_at_159 path_cond_to_159_fun3 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_221_178=i+1 loop_9_count.1_after_loop_at_178 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 query_load-word64Mem.5_aft.1 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_221_178=i+1 cond_at_87_52=i+1 ret__int_v.3_after_211_178=i+1 cond_at_228 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_mem-eqMem.5_after_21 query_load-word64Mem.5_aft.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64Mem.5_aft query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.1_i query_mem-eqMem_after_loop query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.5_aft.2 query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_mem-eqMem.4_initMem. query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_load-word64Mem.5_ini query_bvaddslot___ptr_to_s.4 query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_=GhostAssertions.5_a query_bvaddslot___ptr_to_s.5 query_bvaddslot___ptr_to_s.3 query_load-word64Mem.5_ini.1 query_bvaddslot___ptr_to_s query_bvaddbvaddslot___ptr.5 query_load-word64Mem_initb query_bvaddbvaddslot___ptr.4 query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_load-word64store-wor.1 query_=GhostAssertions.4_i query_=GhostAssertions_aft))']
done

trace will fetch model for 229 vars and 40 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-BKZo6Z.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (=> (=> true path_cond_to_201_178=i+1_fun5) (=> (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init) (=> (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init) (=> (mem-eq Mem.5_after_212_178=i+1 Mem.6_init) (=> (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init) false))))))))))))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_213_178=i+1 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 finaliseCap_success_at_222_178=i+1 path_cond_to_86_52=i+1_fun2 isFinalCapability_success_at_225_178=i+1 fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_220_178=i+1 ptr query_load-word64store-wor.1 immediate___unsigned_long_v.3_init query_load-word64store-wor cond_at_206_178=i+1 rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 path_cond_to_212_178=i+1_fun5 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 path_cond_to_201_178=i+1_fun5 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 capRemovable_success_at_220_178=i+1 ret__int_v.3_after_207_178=i+1 ret__unsigned_longlong_v_after_loop_at_4 ret__unsigned_longlong_v.3_after_loop_at_178 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 cond_at_218_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_206_178=i+1 path_cond_to_141_fun3 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 query_bvaddslot___ptr_to_s.5 path_cond_to_32_fun0 path_cond_to_26_fun0 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_209_178=i+1 query_bvaddslot___ptr_to_s.4 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb rv_space_ret__unsigned_longlong_v.3_after_227 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_210_178=i+1 fun_success_at_158 fun_success_at_227 query_load-word64Mem_initb.1 fun_success_at_154 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_207_178=i+1 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.17 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid.18 pvalid.19 pvalid rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_after_222_178=i+1 cond_at_179_178=i+1 query_=GhostAssertions.5_a cond_at_97_52=i+1 query_=GhostAssertions.3_i query_mem-eqMem.1_initMem. rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_218_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_208_178=i+1 path_cond_to_228_fun5 cond_at_223_178=i+1 cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_168_fun4 pvalid.23 pvalid.22 path_cond_to_151_fun3 pvalid.20 path_cond_to_213_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_after_222_178=i+1 capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init rv_space_ret__unsigned_long_v.3_after_220_178=i+1 pvalid.25 path_cond_to_225_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_220_178=i+1 pvalid.24 capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.7 ptr.6 immediate___unsigned_long_v_init rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_211_178=i+1 query_load-word64Mem.5_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_201_178=i+1 query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 rv_space_ret__unsigned_long_v.3_after_209_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_after_222_178=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 query_=GhostAssertions.4_i pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_219_178=i+1 cond_at_5_4=i+1 path_cond_to_227_fun5 query_load-word64Mem.5_aft.2 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 fc_ret___struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_220_178=i+1 ret__int_v.3_v_at_206_178=i+1 path_cond_to_96_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_212_178=i+1 query_=GhostAssertions.2_a query_mem-eqMem.5_after_21 query_=GhostAssertions.1_i endSlot___ptr_to_struct_cte_C_v_after_141 query_mem-eqMem.4_initMem. pvalid.16 rv_space_ret__unsigned_long_v.3_v_at_206_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_221_178=i+1 pvalid.21 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_load-word64Mem.5_aft cond_at_148 cond_at_213_178=i+1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_after_222_178=i+1 pvalid.13 rv_space_ret__unsigned_long_v.3_after_225_178=i+1 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init path_cond_to_209_178=i+1_fun5 fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_220_178=i+1 query_bvaddbvaddslot___ptr.5 pc_of_loop_at_178 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_221_178=i+1 query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 path_cond_to_87_52=i+1_fun2 query_bvaddbvaddslot___ptr.1 immediate___unsigned_long_v.2_init rodata-witness query_bvaddbvaddslot___ptr.4 slot___ptr_to_struct_cte_C_v.6_init cond_at_142 path_cond_to_206_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.5_ini.1 loop_9_count.1_after_180 query_load-word64Mem.2_ini.1 slot___ptr_to_struct_cte_C_v.5_init path_cond_to_6_fun0 cond_at_210_178=i+1 cond_at_27 path_cond_to_99_52=i+1_fun2 path_cond_to_222_178=i+1_fun5 rv_space_ret__unsigned_longlong_v.3_after_loop_at_178 capCyclicZombie_success_at_209_178=i+1 cond_at_159 path_cond_to_159_fun3 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_221_178=i+1 loop_9_count.1_after_loop_at_178 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 query_load-word64Mem.5_aft.1 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_221_178=i+1 cond_at_87_52=i+1 ret__int_v.3_after_211_178=i+1 cond_at_228 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_mem-eqMem.5_after_21 query_load-word64Mem.5_aft.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64Mem.5_aft query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.1_i query_mem-eqMem_after_loop query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.5_aft.2 query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_mem-eqMem.4_initMem. query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_load-word64Mem.5_ini query_bvaddslot___ptr_to_s.4 query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_=GhostAssertions.5_a query_bvaddslot___ptr_to_s.5 query_bvaddslot___ptr_to_s.3 query_load-word64Mem.5_ini.1 query_bvaddslot___ptr_to_s query_bvaddbvaddslot___ptr.5 query_load-word64Mem_initb query_bvaddbvaddslot___ptr.4 query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_load-word64store-wor.1 query_=GhostAssertions.4_i query_=GhostAssertions_aft))']
done

trace will fetch model for 229 vars and 40 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-43n_Qp.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (=> (=> true path_cond_to_201_178=i+1_fun5) (=> (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init) (=> (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init) (=> (mem-eq Mem.5_after_212_178=i+1 Mem.6_init) (=> (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init) false))))))))))))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_213_178=i+1 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 finaliseCap_success_at_222_178=i+1 path_cond_to_86_52=i+1_fun2 isFinalCapability_success_at_225_178=i+1 fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_220_178=i+1 ptr query_load-word64store-wor.1 immediate___unsigned_long_v.3_init query_load-word64store-wor cond_at_206_178=i+1 rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 path_cond_to_212_178=i+1_fun5 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 path_cond_to_201_178=i+1_fun5 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 capRemovable_success_at_220_178=i+1 ret__int_v.3_after_207_178=i+1 ret__unsigned_longlong_v_after_loop_at_4 ret__unsigned_longlong_v.3_after_loop_at_178 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 cond_at_218_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_206_178=i+1 path_cond_to_141_fun3 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 query_bvaddslot___ptr_to_s.5 path_cond_to_32_fun0 path_cond_to_26_fun0 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_209_178=i+1 query_bvaddslot___ptr_to_s.4 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb rv_space_ret__unsigned_longlong_v.3_after_227 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_210_178=i+1 fun_success_at_158 fun_success_at_227 query_load-word64Mem_initb.1 fun_success_at_154 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_207_178=i+1 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.17 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid.18 pvalid.19 pvalid rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_after_222_178=i+1 cond_at_179_178=i+1 query_=GhostAssertions.5_a cond_at_97_52=i+1 query_=GhostAssertions.3_i query_mem-eqMem.1_initMem. rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_218_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_208_178=i+1 path_cond_to_228_fun5 cond_at_223_178=i+1 cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_168_fun4 pvalid.23 pvalid.22 path_cond_to_151_fun3 pvalid.20 path_cond_to_213_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_after_222_178=i+1 capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init rv_space_ret__unsigned_long_v.3_after_220_178=i+1 pvalid.25 path_cond_to_225_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_220_178=i+1 pvalid.24 capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.7 ptr.6 immediate___unsigned_long_v_init rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_211_178=i+1 query_load-word64Mem.5_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_201_178=i+1 query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 rv_space_ret__unsigned_long_v.3_after_209_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_after_222_178=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 query_=GhostAssertions.4_i pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_219_178=i+1 cond_at_5_4=i+1 path_cond_to_227_fun5 query_load-word64Mem.5_aft.2 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 fc_ret___struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_220_178=i+1 ret__int_v.3_v_at_206_178=i+1 path_cond_to_96_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_212_178=i+1 query_=GhostAssertions.2_a query_mem-eqMem.5_after_21 query_=GhostAssertions.1_i endSlot___ptr_to_struct_cte_C_v_after_141 query_mem-eqMem.4_initMem. pvalid.16 rv_space_ret__unsigned_long_v.3_v_at_206_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_221_178=i+1 pvalid.21 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_load-word64Mem.5_aft cond_at_148 cond_at_213_178=i+1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_after_222_178=i+1 pvalid.13 rv_space_ret__unsigned_long_v.3_after_225_178=i+1 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init path_cond_to_209_178=i+1_fun5 fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_220_178=i+1 query_bvaddbvaddslot___ptr.5 pc_of_loop_at_178 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_221_178=i+1 query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 path_cond_to_87_52=i+1_fun2 query_bvaddbvaddslot___ptr.1 immediate___unsigned_long_v.2_init rodata-witness query_bvaddbvaddslot___ptr.4 slot___ptr_to_struct_cte_C_v.6_init cond_at_142 path_cond_to_206_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.5_ini.1 loop_9_count.1_after_180 query_load-word64Mem.2_ini.1 slot___ptr_to_struct_cte_C_v.5_init path_cond_to_6_fun0 cond_at_210_178=i+1 cond_at_27 path_cond_to_99_52=i+1_fun2 path_cond_to_222_178=i+1_fun5 rv_space_ret__unsigned_longlong_v.3_after_loop_at_178 capCyclicZombie_success_at_209_178=i+1 cond_at_159 path_cond_to_159_fun3 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_221_178=i+1 loop_9_count.1_after_loop_at_178 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 query_load-word64Mem.5_aft.1 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_221_178=i+1 cond_at_87_52=i+1 ret__int_v.3_after_211_178=i+1 cond_at_228 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_mem-eqMem.5_after_21 query_load-word64Mem.5_aft.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64Mem.5_aft query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.1_i query_mem-eqMem_after_loop query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.5_aft.2 query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_mem-eqMem.4_initMem. query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_load-word64Mem.5_ini query_bvaddslot___ptr_to_s.4 query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_=GhostAssertions.5_a query_bvaddslot___ptr_to_s.5 query_bvaddslot___ptr_to_s.3 query_load-word64Mem.5_ini.1 query_bvaddslot___ptr_to_s query_bvaddbvaddslot___ptr.5 query_load-word64Mem_initb query_bvaddbvaddslot___ptr.4 query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_load-word64store-wor.1 query_=GhostAssertions.4_i query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.63s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace will fetch model for 229 vars and 40 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-dCoN2F.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (=> (=> true path_cond_to_201_178=i+1_fun5) (=> (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init) (=> (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init) (=> (mem-eq Mem.5_after_212_178=i+1 Mem.6_init) (=> (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init) false))))))))))))))))))))))))))))))))', '(assert (= slot___ptr_to_struct_cte_C_v_init #xffffffff840029a8))', '(assert (= immediate___unsigned_long_v.1_init #x0000000000000001))', '(assert (= path_cond_to_141_fun3 true))', '(assert (= isFinalCapability_success_at_225_178=i+1 false))', '(assert (= fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_220_178=i+1 #x0000000000000000))', '(assert (= ptr #xffffffff84002b88))', '(assert (= immediate___unsigned_long_v.3_init #x0000000000000000))', '(assert (= query_load-word64store-wor #x0000000000000000))', '(assert (= (mem-eq Mem.3_init Mem.4_init) true))', '(assert (= ret__unsigned_longlong_v.3_after_loop_at_178 #x8000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_94_52=i+1 #x0000000000000000))', '(assert (= path_cond_to_201_178=i+1_fun5 true))', '(assert (= ret__int_v.1_after_85_52=i+1 #x00000000))', '(assert (= path_cond_to_142_fun3 true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029b0))', '(assert (= query_bvaddbvaddslot___ptr.5 #x8000000001fffff0))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_206_178=i+1 #x0000000000000000))', '(assert (= path_cond_to_158_fun3 true))', '(assert (= query_bvaddslot___ptr_to_s.3 #xffffffff840029b0))', '(assert (= query_bvaddslot___ptr_to_s.2 #xffffffff840029a8))', '(assert (= query_bvaddslot___ptr_to_s.1 #xffffffff840029b0))', '(assert (= query_bvaddslot___ptr_to_s.5 #x8000000001fffff0))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_209_178=i+1 #x0000000000000000))', '(assert (= (load-word64 (store-word64 Mem.5_after_222_178=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.5_init #x0000000000000000) #x0000000000000000) fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_220_178=i+1) (bvadd (bvadd slot___ptr_to_struct_cte_C_v.5_init #x0000000000000000) #x0000000000000008)) #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #xffffffff840029b8))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029a8))', '(assert (= fun_success_at_158 false))', '(assert (= fun_success_at_227 false))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= fun_success_at_154 false))', '(assert (= fun_success_at_151 false))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= pvalid.16 true))', '(assert (= pvalid.17 true))', '(assert (= pvalid.14 true))', '(assert (= pvalid.15 true))', '(assert (= pvalid.12 true))', '(assert (= cond_at_102 true))', '(assert (= pvalid.10 true))', '(assert (= pvalid.11 true))', '(assert (= pvalid.18 true))', '(assert (= pvalid.19 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_after_222_178=i+1 #x0000000000000000))', '(assert (= query_=GhostAssertions.5_a true))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= path_cond_to_228_fun5 true))', '(assert (= cond_at_53_52=i+1 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_218_178=i+1 #x0000000000000000))', '(assert (= path_cond_to_151_fun3 true))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= path_cond_to_213_178=i+1_fun5 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_after_222_178=i+1 #x0000000000000000))', '(assert (= capCyclicZombie_success_at_83_52=i+1 false))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #xffffffff840029a8))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_=GhostAssertions.3_i true))', '(assert (= path_cond_to_225_178=i+1_fun5 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_220_178=i+1 #x0000000000000000))', '(assert (= path_cond_to_102_fun2 true))', '(assert (= query_bvaddslot___ptr_to_s #xffffffff840029a8))', '(assert (= pc_of_loop_at_4 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_208_178=i+1 #x0000000000000000))', '(assert (= ptr.3 #xffffffff840029a8))', '(assert (= ptr.2 #xffffffff840029a8))', '(assert (= ptr.5 #x7ffffffff9ffffe8))', '(assert (= ptr.4 #xffffffff840029a8))', '(assert (= ptr.7 #x8000000001ffffe8))', '(assert (= ptr.6 #x8000000001ffffe8))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(assert (= query_mem-eqMem.2_after_86 true))', '(assert (= (load-word64 Mem.5_after_loop_at_178 (bvadd slot___ptr_to_struct_cte_C_v.5_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_load-word64Mem.2_aft #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.3_after_209_178=i+1 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_after_222_178=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.3_after_227 #x0000000000000000))', '(assert (= pc_of_loop_at_52 true))', '(assert (= loop_9_count.1_after_180 #x0000000000000000))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= type___unsigned_long_v_after_149 #x0000000000000000))', '(assert (= fun_success_at_31 false))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= path_cond_to_209_178=i+1_fun5 true))', '(assert (= (load-word64 Mem.5_init (bvadd slot___ptr_to_struct_cte_C_v.5_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_83_52=i+1_fun2 false))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_101 #x0000000000000000))', '(assert (= ret__int_v.3_v_at_206_178=i+1 #x00000000))', '(assert (= query_mem-eqMem.3_initMem. true))', '(assert (= cond_at_206_178=i+1 false))', '(assert (= endSlot___ptr_to_struct_cte_C_v_after_141 #x8000000001ffffe8))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.5_init #x0000000000000000) #x0000000000000000) #x8000000001ffffe8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_201_178=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr.1 #xffffffff840029c0))', '(assert (= cond_at_213_178=i+1 true))', '(assert (= path_cond_to_42_fun1 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_after_222_178=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.3_after_225_178=i+1 #x0000000000000000))', '(assert (= (load-word64 Mem.3_init (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_220_178=i+1 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v.6_init #x8000000001ffffe8))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= path_cond_to_87_52=i+1_fun2 true))', '(assert (= (mem-eq Mem.5_after_212_178=i+1 Mem.6_init) true))', '(assert (= (load-word64 Mem.5_after_loop_at_178 (bvadd slot___ptr_to_struct_cte_C_v.5_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.5_init #x0000000000000000) #x0000000000000008) #x8000000001fffff0))', '(assert (= (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) true))', '(assert (= query_load-word64Mem.3_ini #x0000000000000000))', '(assert (= (load-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000)) #x0000000000000000))', '(assert (= query_load-word64Mem.2_ini.1 #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029c0))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= cond_at_210_178=i+1 true))', '(assert (= path_cond_to_99_52=i+1_fun2 true))', '(assert (= path_cond_to_222_178=i+1_fun5 true))', '(assert (= rv_space_ret__unsigned_longlong_v.3_after_loop_at_178 #x0000000000000000))', '(assert (= (load-word64 Mem.3_init (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= cond_at_159 true))', '(assert (= capCyclicZombie_success_at_209_178=i+1 false))', '(assert (= loop_9_count.1_after_loop_at_178 #x0000000000000000))', '(assert (= (load-word64 Mem.5_init (bvadd slot___ptr_to_struct_cte_C_v.5_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.2_after_151 #x0000000000000000))', '(assert (= cond_at_155 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_211_178=i+1 #x0000000000000000))', '(assert (= loop_9_count_after_loop_at_52 #x0000000000000000))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= query_load-word64Mem.5_aft.1 #x0000000000000000))', '(assert (= ret__int_v_after_loop_at_4 #x80000000))', '(assert (= query_load-word64Mem.5_ini #x0000000000000000))', '(assert (= cond_at_228 true))', '(assert (= rv_space_ret__unsigned_long_v.2_after_158 #x7ffffffff9ffffe8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_213_178=i+1 #x0000000000000000))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #xffffffff840029a8))', '(assert (= slot___ptr_to_struct_cte_C_v.3_init #xffffffff840029a8))', '(assert (= rv_space_ret__unsigned_long_v.2_after_154 #x0000000000400001))', '(assert (= path_cond_to_154_fun3 true))', '(assert (= finaliseCap_success_at_222_178=i+1 false))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_168_fun4 true))', '(assert (= ret__int_v.1_after_81_52=i+1 #x00000001))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= ret__int_v.3_after_207_178=i+1 #x00000000))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v.5_init #x8000000001ffffe8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= cond_at_32 true))', '(assert (= ret__unsigned_longlong_v.1_after_loop_at_52 #x8000000000000000))', '(assert (= cond_at_218_178=i+1 false))', '(assert (= rv_space_ret__unsigned_long_v.3_v_at_206_178=i+1 #x0000000000000000))', '(assert (= (= GhostAssertions.4_init GhostAssertions.5_init) true))', '(assert (= capRemovable_success_at_220_178=i+1 false))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= isFinalCapability_success_at_99_52=i+1 false))', '(assert (= cond_at_80_52=i+1 false))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= query_bvaddslot___ptr_to_s.4 #x8000000001ffffe8))', '(assert (= path_cond_to_80_52=i+1_fun2 true))', '(assert (= path_cond_to_75_52=i+1_fun2 true))', '(assert (= query_load-word64Mem.2_aft.1 #x0000000000000000))', '(assert (= query_load-word64Mem.2_aft.2 #x0000000000000000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) true))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v.4_init #x8000000001ffffe8))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_212_178=i+1 #x0000000000000000))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid true))', '(assert (= cond_at_179_178=i+1 true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029b8))', '(assert (= cond_at_97_52=i+1 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_101_fun2 true))', '(assert (= slot___ptr_to_struct_cte_C_v.2_init #xffffffff840029a8))', '(assert (= pvalid.23 true))', '(assert (= pvalid.22 true))', '(assert (= pvalid.21 true))', '(assert (= pvalid.20 true))', '(assert (= pvalid.25 true))', '(assert (= pvalid.24 true))', '(assert (= rv_space_ret__unsigned_long_v.3_after_220_178=i+1 #x0000000000000000))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029b0))', '(assert (= capRemovable_success_at_94_52=i+1 false))', '(assert (= query_load-word64store-wor.1 #x0000000000000000))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= ret__int_v.1_v_at_80_52=i+1 #x00000000))', '(assert (= immediate___unsigned_long_v_init #x0000000000000001))', '(assert (= cond_at_92_52=i+1 false))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid.1 true))', '(assert (= query_load-word64Mem.3_ini.1 #x0000000000000000))', '(assert (= pvalid.2 true))', '(assert (= query_=GhostAssertions.4_i true))', '(assert (= cond_at_152 true))', '(assert (= pvalid.8 true))', '(assert (= pvalid.9 true))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= pvalid.6 true))', '(assert (= pvalid.7 true))', '(assert (= (load-word64 Mem.5_after_222_178=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.5_init #x0000000000000000) #x0000000000000000)) #x0000000000000000))', '(assert (= loop_9_count_after_54 #x0000000000000000))', '(assert (= pvalid.3 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_219_178=i+1 #x0000000000000000))', '(assert (= path_cond_to_227_fun5 true))', '(assert (= path_cond_to_86_52=i+1_fun2 true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.5_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x8000000001ffffe8))', '(assert (= fc_ret___struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_220_178=i+1 #x0000000000000000))', '(assert (= path_cond_to_96_52=i+1_fun2 true))', '(assert (= query_=GhostAssertions.2_a true))', '(assert (= query_mem-eqMem.5_after_21 true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.5_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x8000000001fffff0))', '(assert (= (mem-eq Mem.4_init Mem.5_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029a8))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_221_178=i+1 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_210_178=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_99_52=i+1 #x0000000000000000))', '(assert (= cond_at_84_52=i+1 false))', '(assert (= query_load-word64Mem.5_aft #x0000000000000000))', '(assert (= finaliseCap_success_at_96_52=i+1 false))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_207_178=i+1 #x0000000000000000))', '(assert (= query_load-word64Mem.2_ini #x0000000000000000))', '(assert (= path_cond_to_212_178=i+1_fun5 true))', '(assert (= pvalid.13 true))', '(assert (= query_mem-eqMem.4_initMem. true))', '(assert (= exposed___unsigned_long_v.1_init #x0000000000000000))', '(assert (= query_load-word64Mem.5_aft.2 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_221_178=i+1 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr.2 #xffffffff840029a8))', '(assert (= query_bvaddbvaddslot___ptr.3 #xffffffff840029b0))', '(assert (= cond_at_223_178=i+1 true))', '(assert (= cond_at_148 true))', '(assert (= immediate___unsigned_long_v.2_init #x0000000000000000))', '(assert (= rodata-witness #xffffffff84017c00))', '(assert (= query_bvaddbvaddslot___ptr.4 #x8000000001ffffe8))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) #xffffffff840029a8))', '(assert (= (= GhostAssertions.3_init GhostAssertions.4_init) true))', '(assert (= cond_at_142 true))', '(assert (= path_cond_to_206_178=i+1_fun5 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= query_load-word64Mem.5_ini.1 #x0000000000000000))', '(assert (= (load-word64 (store-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1) (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008)) #x0000000000000000))', '(assert (= pc_of_loop_at_178 true))', '(assert (= cond_at_27 false))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008) #xffffffff840029b0))', '(assert (= path_cond_to_159_fun3 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_221_178=i+1 #x0000000000000000))', '(assert (= fun_success_at_101 false))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 #x0000000000000000))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_83_52=i+1 #x8000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_221_178=i+1 #x0000000000000000))', '(assert (= cond_at_87_52=i+1 true))', '(assert (= ret__int_v.3_after_211_178=i+1 #x00000001))', '(assert (= (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init) true))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_213_178=i+1 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 finaliseCap_success_at_222_178=i+1 path_cond_to_86_52=i+1_fun2 isFinalCapability_success_at_225_178=i+1 fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_220_178=i+1 ptr query_load-word64store-wor.1 immediate___unsigned_long_v.3_init query_load-word64store-wor cond_at_206_178=i+1 rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 path_cond_to_212_178=i+1_fun5 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 path_cond_to_201_178=i+1_fun5 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 capRemovable_success_at_220_178=i+1 ret__int_v.3_after_207_178=i+1 ret__unsigned_longlong_v_after_loop_at_4 ret__unsigned_longlong_v.3_after_loop_at_178 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 cond_at_218_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_206_178=i+1 path_cond_to_141_fun3 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 query_bvaddslot___ptr_to_s.5 path_cond_to_32_fun0 path_cond_to_26_fun0 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_209_178=i+1 query_bvaddslot___ptr_to_s.4 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb rv_space_ret__unsigned_longlong_v.3_after_227 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_210_178=i+1 fun_success_at_158 fun_success_at_227 query_load-word64Mem_initb.1 fun_success_at_154 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_207_178=i+1 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.17 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid.18 pvalid.19 pvalid rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_after_222_178=i+1 cond_at_179_178=i+1 query_=GhostAssertions.5_a cond_at_97_52=i+1 query_=GhostAssertions.3_i query_mem-eqMem.1_initMem. rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_218_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_208_178=i+1 path_cond_to_228_fun5 cond_at_223_178=i+1 cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_168_fun4 pvalid.23 pvalid.22 path_cond_to_151_fun3 pvalid.20 path_cond_to_213_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_after_222_178=i+1 capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init rv_space_ret__unsigned_long_v.3_after_220_178=i+1 pvalid.25 path_cond_to_225_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_220_178=i+1 pvalid.24 capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.7 ptr.6 immediate___unsigned_long_v_init rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_211_178=i+1 query_load-word64Mem.5_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_201_178=i+1 query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 rv_space_ret__unsigned_long_v.3_after_209_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_after_222_178=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 query_=GhostAssertions.4_i pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_219_178=i+1 cond_at_5_4=i+1 path_cond_to_227_fun5 query_load-word64Mem.5_aft.2 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 fc_ret___struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_220_178=i+1 ret__int_v.3_v_at_206_178=i+1 path_cond_to_96_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_212_178=i+1 query_=GhostAssertions.2_a query_mem-eqMem.5_after_21 query_=GhostAssertions.1_i endSlot___ptr_to_struct_cte_C_v_after_141 query_mem-eqMem.4_initMem. pvalid.16 rv_space_ret__unsigned_long_v.3_v_at_206_178=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_221_178=i+1 pvalid.21 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_load-word64Mem.5_aft cond_at_148 cond_at_213_178=i+1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_after_222_178=i+1 pvalid.13 rv_space_ret__unsigned_long_v.3_after_225_178=i+1 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init path_cond_to_209_178=i+1_fun5 fc_ret___struct_finaliseCap_ret_C_v.remainder_C.words_C.0.1_v_at_220_178=i+1 query_bvaddbvaddslot___ptr.5 pc_of_loop_at_178 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1.1_v_at_221_178=i+1 query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 path_cond_to_87_52=i+1_fun2 query_bvaddbvaddslot___ptr.1 immediate___unsigned_long_v.2_init rodata-witness query_bvaddbvaddslot___ptr.4 slot___ptr_to_struct_cte_C_v.6_init cond_at_142 path_cond_to_206_178=i+1_fun5 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.5_ini.1 loop_9_count.1_after_180 query_load-word64Mem.2_ini.1 slot___ptr_to_struct_cte_C_v.5_init path_cond_to_6_fun0 cond_at_210_178=i+1 cond_at_27 path_cond_to_99_52=i+1_fun2 path_cond_to_222_178=i+1_fun5 rv_space_ret__unsigned_longlong_v.3_after_loop_at_178 capCyclicZombie_success_at_209_178=i+1 cond_at_159 path_cond_to_159_fun3 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0.1_v_at_221_178=i+1 loop_9_count.1_after_loop_at_178 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 query_load-word64Mem.5_aft.1 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1.1_v_at_221_178=i+1 cond_at_87_52=i+1 ret__int_v.3_after_211_178=i+1 cond_at_228 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_mem-eqMem.5_after_21 query_load-word64Mem.5_aft.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64Mem.5_aft query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.1_i query_mem-eqMem_after_loop query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.5_aft.2 query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_mem-eqMem.4_initMem. query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_load-word64Mem.5_ini query_bvaddslot___ptr_to_s.4 query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_=GhostAssertions.5_a query_bvaddslot___ptr_to_s.5 query_bvaddslot___ptr_to_s.3 query_load-word64Mem.5_ini.1 query_bvaddslot___ptr_to_s query_bvaddbvaddslot___ptr.5 query_load-word64Mem_initb query_bvaddbvaddslot___ptr.4 query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_load-word64store-wor.1 query_=GhostAssertions.4_i query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.63s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace rep_graph setting up input env at 286
trace done setting up input env at 286
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
284
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
280
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
277
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.4_after_280 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.4_after_280 ((_ sign_extend 32) #x00000001))'))
tryinline:
266
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64)), ('Mem.6', Type ('Builtin', 'Mem')), ('HTD.6', Type ('Builtin', 'HTD')), ('PMS.6', Type ('Builtin', 'PMS')), ('GhostAssertions.6', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((265, ()), 'fun6')])
trace testing ('hyp', None):
trace   path_cond_to_267_fun6
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-J6Omku.txt
solver inputs:

['(assert (not (not path_cond_to_267_fun6)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-1feg6E.txt
solver inputs:

['(assert (not (not path_cond_to_267_fun6)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-0KOCOz.txt
solver inputs:

['(assert (not (not path_cond_to_267_fun6)))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((229, ()), 'fun5'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((286, ()), 'fun6'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((43, ()), 'fun1'), ((178, ((178, vc_options ([0], [])),)), 'fun5'), ((4, ((4, vc_options ([0], [])),)), 'fun0'), ((201, ((178, vc_options ([], [1])),)), 'fun5')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (=> true path_cond_to_201_178=i+1_fun5)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init)
trace   (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init)
trace   (mem-eq Mem.5_after_212_178=i+1 Mem.6_init)
trace   (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init)
trace   (not (word64-eq slot___ptr_to_struct_cte_C_v.6_init #x8000000001ffffe8))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-NztRv0.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (=> (=> true path_cond_to_201_178=i+1_fun5) (=> (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init) (=> (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init) (=> (mem-eq Mem.5_after_212_178=i+1 Mem.6_init) (=> (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init) (word64-eq slot___ptr_to_struct_cte_C_v.6_init #x8000000001ffffe8)))))))))))))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-MLqZc2.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (=> (=> true path_cond_to_201_178=i+1_fun5) (=> (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init) (=> (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init) (=> (mem-eq Mem.5_after_212_178=i+1 Mem.6_init) (=> (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init) (word64-eq slot___ptr_to_struct_cte_C_v.6_init #x8000000001ffffe8)))))))))))))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-CWKgdW.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (=> (=> true path_cond_to_201_178=i+1_fun5) (=> (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init) (=> (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init) (=> (mem-eq Mem.5_after_212_178=i+1 Mem.6_init) (=> (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init) (word64-eq slot___ptr_to_struct_cte_C_v.6_init #x8000000001ffffe8)))))))))))))))))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((229, ()), 'fun5'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((286, ()), 'fun6'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((43, ()), 'fun1'), ((178, ((178, vc_options ([0], [])),)), 'fun5'), ((4, ((4, vc_options ([0], [])),)), 'fun0'), ((201, ((178, vc_options ([], [1])),)), 'fun5')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (=> true path_cond_to_201_178=i+1_fun5)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init)
trace   (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init)
trace   (mem-eq Mem.5_after_212_178=i+1 Mem.6_init)
trace   (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init)
trace   (not (word64-eq immediate___unsigned_long_v.3_init #x0000000000000000))
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace rep_graph setting up input env at 286
trace done setting up input env at 286
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
284
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
280
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
277
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.4', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.4_after_280 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.4_after_280 ((_ sign_extend 32) #x00000001))'))
tryinline:
266
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.4', Type ('Word', 64)), ('Mem.6', Type ('Builtin', 'Mem')), ('HTD.6', Type ('Builtin', 'HTD')), ('PMS.6', Type ('Builtin', 'PMS')), ('GhostAssertions.6', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
227
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
225
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
222
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

tryinline:
220
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
209
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((229, ()), 'fun5'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((178, ((178, vc_options ([0], [])),)), 'fun5'), ((43, ()), 'fun1'), ((265, ()), 'fun6'), ((4, ((4, vc_options ([0], [])),)), 'fun0'), ((201, ((178, vc_options ([], [1])),)), 'fun5')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (=> true path_cond_to_201_178=i+1_fun5)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.5_init slot___ptr_to_struct_cte_C_v.6_init)
trace   (word64-eq immediate___unsigned_long_v.2_init immediate___unsigned_long_v.3_init)
trace   (mem-eq Mem.5_after_212_178=i+1 Mem.6_init)
trace   (= GhostAssertions.5_after_222_178=i+1 GhostAssertions.6_init)
trace   (word64-eq immediate___unsigned_long_v.3_init #x0000000000000000)
trace   path_cond_to_267_fun6
trace Result: True
problem name Recursion Test pairing None
trace Loop (4, [3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
23
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((22, ((4, vc_options ([], [1])),)), 'fun0'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_23_4=i+1_fun0
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-hF5AMk.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-OmsBc5.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ZQ7k6m.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (1.25s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
tryinline:
42
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((23, ((4, vc_options ([], [1])),)), 'fun0'), ((41, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   path_cond_to_42_fun1
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ilz6UW.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not path_cond_to_42_fun1))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-AdILLR.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not path_cond_to_42_fun1))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-EMAodH.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not path_cond_to_42_fun1))))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
75
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((74, ((52, vc_options ([], [1])),)), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_75_52=i+1_fun2
trace   (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-QW9CPp.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-qws5Qg.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-wyUttu.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
tryinline:
140
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64)), ('Mem.3', Type ('Builtin', 'Mem')), ('HTD.3', Type ('Builtin', 'HTD')), ('PMS.3', Type ('Builtin', 'PMS')), ('GhostAssertions.3', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace Testing hyp whyps
trace requests = set([((139, ()), 'fun3'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   path_cond_to_141_fun3
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-31XNxy.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-csS78N.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Y1cvdu.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
tryinline:
168
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.4', Type ('Builtin', 'Mem')), ('HTD.4', Type ('Builtin', 'HTD')), ('PMS.4', Type ('Builtin', 'PMS')), ('GhostAssertions.4', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((167, ()), 'fun4'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   path_cond_to_168_fun4
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-5AE6G9.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (not path_cond_to_168_fun4)))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Fs08VU.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (not path_cond_to_168_fun4)))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-kryDV0.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (not path_cond_to_168_fun4)))))))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace Loop (178, [177, 181, 182, 183, 190, 191, 192, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 179])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
227
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
225
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
222
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

tryinline:
220
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
209
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
201
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((178, ((178, vc_options ([0], [])),)), 'fun5'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((200, ((178, vc_options ([], [1])),)), 'fun5'), ((140, ()), 'fun3'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   path_cond_to_201_178=i+1_fun5
trace   (not (word64-eq immediate___unsigned_long_v.2_init #x0000000000000000))
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((229, ()), 'fun5'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (not false)
trace will fetch model for 148 vars and 28 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-afZIJX.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) false)))))))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 path_cond_to_141_fun3 cond_at_148 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb fun_success_at_158 query_load-word64Mem_initb.1 fun_success_at_154 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_168_fun4 path_cond_to_151_fun3 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.3_i capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.6 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 query_=GhostAssertions.4_i pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 path_cond_to_96_52=i+1_fun2 query_=GhostAssertions.2_a endSlot___ptr_to_struct_cte_C_v_after_141 query_mem-eqMem.4_initMem. pvalid.16 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 pvalid.13 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 immediate___unsigned_long_v.2_init rodata-witness cond_at_142 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 slot___ptr_to_struct_cte_C_v.5_init path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 cond_at_159 path_cond_to_159_fun3 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.4_i query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_mem-eqMem_after_loop query_=GhostAssertions.1_i query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_bvaddslot___ptr_to_s.3 query_mem-eqMem.4_initMem. query_bvaddslot___ptr_to_s query_load-word64Mem_initb query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_=GhostAssertions_aft))']
done

trace will fetch model for 148 vars and 28 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-gd9NIs.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) false)))))))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 path_cond_to_141_fun3 cond_at_148 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb fun_success_at_158 query_load-word64Mem_initb.1 fun_success_at_154 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_168_fun4 path_cond_to_151_fun3 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.3_i capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.6 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 query_=GhostAssertions.4_i pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 path_cond_to_96_52=i+1_fun2 query_=GhostAssertions.2_a endSlot___ptr_to_struct_cte_C_v_after_141 query_mem-eqMem.4_initMem. pvalid.16 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 pvalid.13 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 immediate___unsigned_long_v.2_init rodata-witness cond_at_142 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 slot___ptr_to_struct_cte_C_v.5_init path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 cond_at_159 path_cond_to_159_fun3 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.4_i query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_mem-eqMem_after_loop query_=GhostAssertions.1_i query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_bvaddslot___ptr_to_s.3 query_mem-eqMem.4_initMem. query_bvaddslot___ptr_to_s query_load-word64Mem_initb query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_=GhostAssertions_aft))']
done

trace will fetch model for 148 vars and 28 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-R7A76C.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) false)))))))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 path_cond_to_141_fun3 cond_at_148 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb fun_success_at_158 query_load-word64Mem_initb.1 fun_success_at_154 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_168_fun4 path_cond_to_151_fun3 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.3_i capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.6 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 query_=GhostAssertions.4_i pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 path_cond_to_96_52=i+1_fun2 query_=GhostAssertions.2_a endSlot___ptr_to_struct_cte_C_v_after_141 query_mem-eqMem.4_initMem. pvalid.16 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 pvalid.13 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 immediate___unsigned_long_v.2_init rodata-witness cond_at_142 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 slot___ptr_to_struct_cte_C_v.5_init path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 cond_at_159 path_cond_to_159_fun3 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.4_i query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_mem-eqMem_after_loop query_=GhostAssertions.1_i query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_bvaddslot___ptr_to_s.3 query_mem-eqMem.4_initMem. query_bvaddslot___ptr_to_s query_load-word64Mem_initb query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.01s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace will fetch model for 148 vars and 28 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-LGA5id.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) false)))))))))))))))))))))))))))', '(assert (= rv_space_ret__unsigned_long_v.2_after_158 #x7ffffffff9ffffe8))', '(assert (= slot___ptr_to_struct_cte_C_v_init #xffffffff840029a8))', '(assert (= immediate___unsigned_long_v.1_init #x0000000000000001))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #xffffffff840029a8))', '(assert (= slot___ptr_to_struct_cte_C_v.3_init #xffffffff840029a8))', '(assert (= path_cond_to_141_fun3 true))', '(assert (= path_cond_to_154_fun3 true))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_load-word64Mem.2_aft #x0000000000000000))', '(assert (= cond_at_97_52=i+1 true))', '(assert (= (mem-eq Mem.3_init Mem.4_init) true))', '(assert (= rv_space_ret__unsigned_long_v.1_after_94_52=i+1 #x0000000000000000))', '(assert (= ret__int_v.1_after_81_52=i+1 #x00000001))', '(assert (= ret__int_v.1_after_85_52=i+1 #x00000000))', '(assert (= path_cond_to_142_fun3 true))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029b0))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v.5_init #x8000000001ffffe8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= cond_at_32 true))', '(assert (= ret__unsigned_longlong_v.1_after_loop_at_52 #x8000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.2_after_154 #x0000000000400001))', '(assert (= (= GhostAssertions.4_init GhostAssertions.5_init) true))', '(assert (= path_cond_to_158_fun3 true))', '(assert (= query_bvaddslot___ptr_to_s.3 #xffffffff840029b0))', '(assert (= query_bvaddslot___ptr_to_s.2 #xffffffff840029a8))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= isFinalCapability_success_at_99_52=i+1 false))', '(assert (= cond_at_80_52=i+1 false))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= path_cond_to_80_52=i+1_fun2 true))', '(assert (= path_cond_to_75_52=i+1_fun2 true))', '(assert (= query_load-word64Mem.2_aft.1 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #xffffffff840029b8))', '(assert (= query_load-word64Mem.2_aft.2 #x0000000000000000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029a8))', '(assert (= fun_success_at_158 false))', '(assert (= cond_at_148 true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= fun_success_at_154 false))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v.4_init #x8000000001ffffe8))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= pvalid.16 true))', '(assert (= pvalid.14 true))', '(assert (= pvalid.15 true))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= cond_at_102 true))', '(assert (= pvalid.10 true))', '(assert (= pvalid.11 true))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029b8))', '(assert (= query_load-word64store-wor #x0000000000000000))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= cond_at_53_52=i+1 true))', '(assert (= path_cond_to_101_fun2 true))', '(assert (= slot___ptr_to_struct_cte_C_v.2_init #xffffffff840029a8))', '(assert (= path_cond_to_168_fun4 true))', '(assert (= path_cond_to_151_fun3 true))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= capCyclicZombie_success_at_83_52=i+1 false))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #xffffffff840029a8))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_=GhostAssertions.3_i true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029b0))', '(assert (= capRemovable_success_at_94_52=i+1 false))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= path_cond_to_102_fun2 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s #xffffffff840029a8))', '(assert (= pc_of_loop_at_4 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ret__int_v.1_v_at_80_52=i+1 #x00000000))', '(assert (= ptr.3 #xffffffff840029a8))', '(assert (= ptr.2 #xffffffff840029a8))', '(assert (= ptr.5 #x7ffffffff9ffffe8))', '(assert (= ptr.4 #xffffffff840029a8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= ptr.6 #x8000000001ffffe8))', '(assert (= immediate___unsigned_long_v_init #x0000000000000001))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(assert (= query_mem-eqMem.2_after_86 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s.1 #xffffffff840029b0))', '(assert (= cond_at_92_52=i+1 false))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= query_load-word64Mem.3_ini.1 #x0000000000000000))', '(assert (= loop_9_count_after_54 #x0000000000000000))', '(assert (= query_=GhostAssertions.4_i true))', '(assert (= pc_of_loop_at_52 true))', '(assert (= pvalid.8 true))', '(assert (= pvalid.9 true))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= pvalid.6 true))', '(assert (= pvalid.7 true))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= pvalid.3 true))', '(assert (= type___unsigned_long_v_after_149 #x0000000000000000))', '(assert (= fun_success_at_31 false))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= path_cond_to_86_52=i+1_fun2 true))', '(assert (= path_cond_to_83_52=i+1_fun2 false))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_101 #x0000000000000000))', '(assert (= fun_success_at_151 false))', '(assert (= query_=GhostAssertions.2_a true))', '(assert (= endSlot___ptr_to_struct_cte_C_v_after_141 #x8000000001ffffe8))', '(assert (= (mem-eq Mem.4_init Mem.5_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029a8))', '(assert (= query_mem-eqMem.4_initMem. true))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_99_52=i+1 #x0000000000000000))', '(assert (= cond_at_84_52=i+1 false))', '(assert (= finaliseCap_success_at_96_52=i+1 false))', '(assert (= query_load-word64Mem.2_ini #x0000000000000000))', '(assert (= pvalid.12 true))', '(assert (= path_cond_to_42_fun1 true))', '(assert (= pvalid.13 true))', '(assert (= (load-word64 Mem.3_init (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= exposed___unsigned_long_v.1_init #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= query_bvaddbvaddslot___ptr.2 #xffffffff840029a8))', '(assert (= query_bvaddbvaddslot___ptr.3 #xffffffff840029b0))', '(assert (= path_cond_to_87_52=i+1_fun2 true))', '(assert (= immediate___unsigned_long_v.2_init #x0000000000000000))', '(assert (= rodata-witness #xffffffff84017c00))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) #xffffffff840029a8))', '(assert (= (= GhostAssertions.3_init GhostAssertions.4_init) true))', '(assert (= cond_at_142 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) true))', '(assert (= query_load-word64Mem.3_ini #x0000000000000000))', '(assert (= ret__int_v_after_loop_at_4 #x80000000))', '(assert (= (load-word64 (store-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1) (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008)) #x0000000000000000))', '(assert (= path_cond_to_96_52=i+1_fun2 true))', '(assert (= (load-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000)) #x0000000000000000))', '(assert (= query_load-word64Mem.2_ini.1 #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029c0))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= cond_at_27 false))', '(assert (= path_cond_to_99_52=i+1_fun2 true))', '(assert (= (load-word64 Mem.3_init (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008) #xffffffff840029b0))', '(assert (= cond_at_159 true))', '(assert (= path_cond_to_159_fun3 true))', '(assert (= cond_at_152 true))', '(assert (= query_mem-eqMem.3_initMem. true))', '(assert (= rv_space_ret__unsigned_longlong_v.2_after_151 #x0000000000000000))', '(assert (= cond_at_155 true))', '(assert (= fun_success_at_101 false))', '(assert (= loop_9_count_after_loop_at_52 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr.1 #xffffffff840029c0))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_83_52=i+1 #x8000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= cond_at_87_52=i+1 true))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 path_cond_to_141_fun3 cond_at_148 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb fun_success_at_158 query_load-word64Mem_initb.1 fun_success_at_154 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_168_fun4 path_cond_to_151_fun3 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.3_i capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.6 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 query_=GhostAssertions.4_i pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 path_cond_to_96_52=i+1_fun2 query_=GhostAssertions.2_a endSlot___ptr_to_struct_cte_C_v_after_141 query_mem-eqMem.4_initMem. pvalid.16 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 pvalid.13 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 immediate___unsigned_long_v.2_init rodata-witness cond_at_142 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 slot___ptr_to_struct_cte_C_v.5_init path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 cond_at_159 path_cond_to_159_fun3 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.4_i query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_mem-eqMem_after_loop query_=GhostAssertions.1_i query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_bvaddslot___ptr_to_s.3 query_mem-eqMem.4_initMem. query_bvaddslot___ptr_to_s query_load-word64Mem_initb query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.63s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
227
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
225
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
222
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

tryinline:
220
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
209
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
201
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Testing hyp whyps
trace requests = set([((200, ((178, vc_options ([], [1])),)), 'fun5'), ((178, ((178, vc_options ([0], [])),)), 'fun5')])
trace testing ('hyp', None):
trace   path_cond_to_201_178=i+1_fun5
trace   (not (word64-eq immediate___unsigned_long_v.2_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-QiDOFq.txt
solver inputs:

['(assert (not (not (and path_cond_to_201_178=i+1_fun5 (not (word64-eq immediate___unsigned_long_v.2_init #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-PPRrgz.txt
solver inputs:

['(assert (not (not (and path_cond_to_201_178=i+1_fun5 (not (word64-eq immediate___unsigned_long_v.2_init #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-btDAx2.txt
solver inputs:

['(assert (not (not (and path_cond_to_201_178=i+1_fun5 (not (word64-eq immediate___unsigned_long_v.2_init #x0000000000000000))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.03s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((229, ()), 'fun5'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (not (word64-eq slot___ptr_to_struct_cte_C_v.5_init #x8000000001ffffe8))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-zYNr8Z.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (word64-eq slot___ptr_to_struct_cte_C_v.5_init #x8000000001ffffe8))))))))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-3FRVh9.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (word64-eq slot___ptr_to_struct_cte_C_v.5_init #x8000000001ffffe8))))))))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-3fwLuy.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (=> (=> true path_cond_to_168_fun4) (=> (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init) (=> (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init) (=> (mem-eq Mem.4_init Mem.5_init) (=> (= GhostAssertions.4_init GhostAssertions.5_init) (word64-eq slot___ptr_to_struct_cte_C_v.5_init #x8000000001ffffe8))))))))))))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.01s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((229, ()), 'fun5'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (not (word64-eq immediate___unsigned_long_v.2_init #x0000000000000000))
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace rep_graph setting up input env at 229
trace done setting up input env at 229
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
227
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
225
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
222
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

tryinline:
220
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
209
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
201
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.3', Type ('Word', 64)), ('Mem.5', Type ('Builtin', 'Mem')), ('HTD.5', Type ('Builtin', 'HTD')), ('PMS.5', Type ('Builtin', 'PMS')), ('GhostAssertions.5', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((178, ((178, vc_options ([0], [])),)), 'fun5'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((168, ()), 'fun4'), ((200, ((178, vc_options ([], [1])),)), 'fun5'), ((140, ()), 'fun3'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (=> true path_cond_to_168_fun4)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.4_init slot___ptr_to_struct_cte_C_v.5_init)
trace   (word64-eq exposed___unsigned_long_v.1_init immediate___unsigned_long_v.2_init)
trace   (mem-eq Mem.4_init Mem.5_init)
trace   (= GhostAssertions.4_init GhostAssertions.5_init)
trace   (word64-eq immediate___unsigned_long_v.2_init #x0000000000000000)
trace   path_cond_to_201_178=i+1_fun5
trace   (not (word64-eq immediate___unsigned_long_v.2_init #x0000000000000000))
trace Result: True
problem name Recursion Test pairing None
trace Loop (4, [3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
23
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((22, ((4, vc_options ([], [1])),)), 'fun0'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_23_4=i+1_fun0
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-7ywCDo.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-mEVAEk.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-T98q3t.txt
solver inputs:

['(assert (not (not path_cond_to_23_4=i+1_fun0)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
tryinline:
42
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((23, ((4, vc_options ([], [1])),)), 'fun0'), ((41, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   path_cond_to_42_fun1
trace   (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-a5qUTX.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-pdhsP3.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ZEL3Tb.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.02s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
75
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((74, ((52, vc_options ([], [1])),)), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_75_52=i+1_fun2
trace   (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-cmfZeZ.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-v3xHao.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Nmqsl8.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
tryinline:
140
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64)), ('Mem.3', Type ('Builtin', 'Mem')), ('HTD.3', Type ('Builtin', 'HTD')), ('PMS.3', Type ('Builtin', 'PMS')), ('GhostAssertions.3', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace Testing hyp whyps
trace requests = set([((139, ()), 'fun3'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   path_cond_to_141_fun3
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-heV9EY.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-lm1NmT.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-9IYyby.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (not path_cond_to_141_fun3))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
tryinline:
168
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.4', Type ('Builtin', 'Mem')), ('HTD.4', Type ('Builtin', 'HTD')), ('PMS.4', Type ('Builtin', 'PMS')), ('GhostAssertions.4', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((167, ()), 'fun4'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   path_cond_to_168_fun4
trace   (not (word64-eq exposed___unsigned_long_v.1_init #x0000000000000000))
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (not false)
trace will fetch model for 143 vars and 26 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-FelHvr.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) false))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 path_cond_to_141_fun3 cond_at_148 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb fun_success_at_158 query_load-word64Mem_initb.1 fun_success_at_154 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_151_fun3 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.3_i capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.6 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 path_cond_to_96_52=i+1_fun2 query_=GhostAssertions.2_a endSlot___ptr_to_struct_cte_C_v_after_141 pvalid.16 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 pvalid.13 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness cond_at_142 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 cond_at_159 path_cond_to_159_fun3 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_mem-eqMem_after_loop query_=GhostAssertions.1_i query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_=GhostAssertions_aft))']
done

trace will fetch model for 143 vars and 26 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-RGYqjv.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) false))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 path_cond_to_141_fun3 cond_at_148 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb fun_success_at_158 query_load-word64Mem_initb.1 fun_success_at_154 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_151_fun3 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.3_i capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.6 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 path_cond_to_96_52=i+1_fun2 query_=GhostAssertions.2_a endSlot___ptr_to_struct_cte_C_v_after_141 pvalid.16 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 pvalid.13 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness cond_at_142 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 cond_at_159 path_cond_to_159_fun3 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_mem-eqMem_after_loop query_=GhostAssertions.1_i query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_=GhostAssertions_aft))']
done

trace will fetch model for 143 vars and 26 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-s_6BlM.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) false))))))))))))))))))))))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 path_cond_to_141_fun3 cond_at_148 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb fun_success_at_158 query_load-word64Mem_initb.1 fun_success_at_154 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_151_fun3 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.3_i capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.6 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 path_cond_to_96_52=i+1_fun2 query_=GhostAssertions.2_a endSlot___ptr_to_struct_cte_C_v_after_141 pvalid.16 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 pvalid.13 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness cond_at_142 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 cond_at_159 path_cond_to_159_fun3 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_mem-eqMem_after_loop query_=GhostAssertions.1_i query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.01s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace will fetch model for 143 vars and 26 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-xWWRVR.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) false))))))))))))))))))))))', '(assert (= rv_space_ret__unsigned_long_v.2_after_158 #x7ffffffff9ffffe8))', '(assert (= slot___ptr_to_struct_cte_C_v_init #xffffffff840029a8))', '(assert (= immediate___unsigned_long_v.1_init #x0000000000000001))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #xffffffff840029a8))', '(assert (= slot___ptr_to_struct_cte_C_v.3_init #xffffffff840029a8))', '(assert (= path_cond_to_141_fun3 true))', '(assert (= path_cond_to_154_fun3 true))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_load-word64Mem.2_aft #x0000000000000000))', '(assert (= cond_at_97_52=i+1 true))', '(assert (= (mem-eq Mem.3_init Mem.4_init) true))', '(assert (= rv_space_ret__unsigned_long_v.1_after_94_52=i+1 #x0000000000000000))', '(assert (= ret__int_v.1_after_81_52=i+1 #x00000001))', '(assert (= ret__int_v.1_after_85_52=i+1 #x00000000))', '(assert (= path_cond_to_142_fun3 true))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029b0))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= cond_at_32 true))', '(assert (= ret__unsigned_longlong_v.1_after_loop_at_52 #x8000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.2_after_154 #x0000000000400001))', '(assert (= cond_at_148 true))', '(assert (= path_cond_to_158_fun3 true))', '(assert (= query_bvaddslot___ptr_to_s.3 #xffffffff840029b0))', '(assert (= query_bvaddslot___ptr_to_s.2 #xffffffff840029a8))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= isFinalCapability_success_at_99_52=i+1 false))', '(assert (= cond_at_80_52=i+1 false))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= path_cond_to_80_52=i+1_fun2 true))', '(assert (= path_cond_to_75_52=i+1_fun2 true))', '(assert (= query_load-word64Mem.2_aft.1 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #xffffffff840029b8))', '(assert (= query_load-word64Mem.2_aft.2 #x0000000000000000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029a8))', '(assert (= fun_success_at_158 false))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= fun_success_at_154 false))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v.4_init #x8000000001ffffe8))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= pvalid.16 true))', '(assert (= pvalid.14 true))', '(assert (= pvalid.15 true))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= cond_at_102 true))', '(assert (= pvalid.10 true))', '(assert (= pvalid.11 true))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029b8))', '(assert (= query_load-word64store-wor #x0000000000000000))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= cond_at_53_52=i+1 true))', '(assert (= path_cond_to_101_fun2 true))', '(assert (= slot___ptr_to_struct_cte_C_v.2_init #xffffffff840029a8))', '(assert (= path_cond_to_151_fun3 true))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= capCyclicZombie_success_at_83_52=i+1 false))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #xffffffff840029a8))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_=GhostAssertions.3_i true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029b0))', '(assert (= capRemovable_success_at_94_52=i+1 false))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= path_cond_to_102_fun2 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s #xffffffff840029a8))', '(assert (= pc_of_loop_at_4 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ret__int_v.1_v_at_80_52=i+1 #x00000000))', '(assert (= ptr.3 #xffffffff840029a8))', '(assert (= ptr.2 #xffffffff840029a8))', '(assert (= ptr.5 #x7ffffffff9ffffe8))', '(assert (= ptr.4 #xffffffff840029a8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= ptr.6 #x8000000001ffffe8))', '(assert (= immediate___unsigned_long_v_init #x0000000000000001))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(assert (= query_mem-eqMem.2_after_86 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s.1 #xffffffff840029b0))', '(assert (= cond_at_92_52=i+1 false))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= query_load-word64Mem.3_ini.1 #x0000000000000000))', '(assert (= loop_9_count_after_54 #x0000000000000000))', '(assert (= pc_of_loop_at_52 true))', '(assert (= pvalid.8 true))', '(assert (= pvalid.9 true))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= pvalid.6 true))', '(assert (= pvalid.7 true))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= pvalid.3 true))', '(assert (= type___unsigned_long_v_after_149 #x0000000000000000))', '(assert (= fun_success_at_31 false))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= path_cond_to_86_52=i+1_fun2 true))', '(assert (= path_cond_to_83_52=i+1_fun2 false))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_101 #x0000000000000000))', '(assert (= fun_success_at_151 false))', '(assert (= query_=GhostAssertions.2_a true))', '(assert (= endSlot___ptr_to_struct_cte_C_v_after_141 #x8000000001ffffe8))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029a8))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_99_52=i+1 #x0000000000000000))', '(assert (= cond_at_84_52=i+1 false))', '(assert (= finaliseCap_success_at_96_52=i+1 false))', '(assert (= query_load-word64Mem.2_ini #x0000000000000000))', '(assert (= pvalid.12 true))', '(assert (= path_cond_to_42_fun1 true))', '(assert (= pvalid.13 true))', '(assert (= (load-word64 Mem.3_init (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= exposed___unsigned_long_v.1_init #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= query_bvaddbvaddslot___ptr.2 #xffffffff840029a8))', '(assert (= query_bvaddbvaddslot___ptr.3 #xffffffff840029b0))', '(assert (= path_cond_to_87_52=i+1_fun2 true))', '(assert (= rodata-witness #xffffffff84017c00))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) #xffffffff840029a8))', '(assert (= (= GhostAssertions.3_init GhostAssertions.4_init) true))', '(assert (= cond_at_142 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) true))', '(assert (= query_load-word64Mem.3_ini #x0000000000000000))', '(assert (= ret__int_v_after_loop_at_4 #x80000000))', '(assert (= (load-word64 (store-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1) (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008)) #x0000000000000000))', '(assert (= path_cond_to_96_52=i+1_fun2 true))', '(assert (= (load-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000)) #x0000000000000000))', '(assert (= query_load-word64Mem.2_ini.1 #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029c0))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= cond_at_27 false))', '(assert (= path_cond_to_99_52=i+1_fun2 true))', '(assert (= (load-word64 Mem.3_init (bvadd slot___ptr_to_struct_cte_C_v.3_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008) #xffffffff840029b0))', '(assert (= cond_at_159 true))', '(assert (= path_cond_to_159_fun3 true))', '(assert (= cond_at_152 true))', '(assert (= query_mem-eqMem.3_initMem. true))', '(assert (= rv_space_ret__unsigned_longlong_v.2_after_151 #x0000000000000000))', '(assert (= cond_at_155 true))', '(assert (= fun_success_at_101 false))', '(assert (= loop_9_count_after_loop_at_52 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr.1 #xffffffff840029c0))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_83_52=i+1 #x8000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= cond_at_87_52=i+1 true))', '(check-sat)', '(get-value (rv_space_ret__unsigned_long_v.2_after_158 slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init rv_space_ret__unsigned_long_v.2_after_154 path_cond_to_154_fun3 path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 pvalid.15 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_142_fun3 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 path_cond_to_141_fun3 cond_at_148 path_cond_to_158_fun3 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s.2 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb fun_success_at_158 query_load-word64Mem_initb.1 fun_success_at_154 slot___ptr_to_struct_cte_C_v.4_init path_cond_to_31_fun0 fun_success_at_151 pvalid.14 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 path_cond_to_151_fun3 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.3_i capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 ptr.5 ptr.4 ptr.6 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 query_load-word64Mem.3_ini.1 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 type___unsigned_long_v_after_149 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 path_cond_to_96_52=i+1_fun2 query_=GhostAssertions.2_a endSlot___ptr_to_struct_cte_C_v_after_141 pvalid.16 path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini pvalid.12 path_cond_to_42_fun1 pvalid.13 exposed___unsigned_long_v_init exposed___unsigned_long_v.1_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness cond_at_142 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 cond_at_159 path_cond_to_159_fun3 cond_at_152 query_mem-eqMem.3_initMem. rv_space_ret__unsigned_longlong_v.2_after_151 cond_at_155 fun_success_at_101 query_load-word64Mem.3_ini rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_mem-eqMem.2_after_86 query_bvaddslot___ptr_to_s.2 query_load-word64Mem.2_ini.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.3_i query_load-word64store-wor query_load-word64Mem.2_aft query_=GhostAssertions.2_a query_mem-eqMem.3_initMem. query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_bvaddslot___ptr_to_s.1 query_mem-eqMem_after_loop query_=GhostAssertions.1_i query_load-word64Mem.3_ini.1 query_bvaddbvaddslot___ptr.3 query_load-word64Mem.2_aft.1 query_bvaddslot___ptr_to_s.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb query_load-word64Mem.2_ini query_load-word64Mem.3_ini query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.63s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
tryinline:
168
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.4', Type ('Builtin', 'Mem')), ('HTD.4', Type ('Builtin', 'HTD')), ('PMS.4', Type ('Builtin', 'PMS')), ('GhostAssertions.4', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Testing hyp whyps
trace requests = set([((167, ()), 'fun4')])
trace testing ('hyp', None):
trace   path_cond_to_168_fun4
trace   (not (word64-eq exposed___unsigned_long_v.1_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-N4VdIP.txt
solver inputs:

['(assert (not (not (and path_cond_to_168_fun4 (not (word64-eq exposed___unsigned_long_v.1_init #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-BWbgTc.txt
solver inputs:

['(assert (not (not (and path_cond_to_168_fun4 (not (word64-eq exposed___unsigned_long_v.1_init #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-hV99A5.txt
solver inputs:

['(assert (not (not (and path_cond_to_168_fun4 (not (word64-eq exposed___unsigned_long_v.1_init #x0000000000000000))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (not (word64-eq slot___ptr_to_struct_cte_C_v.4_init #x8000000001ffffe8))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-cnfd5G.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (word64-eq slot___ptr_to_struct_cte_C_v.4_init #x8000000001ffffe8)))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-tfYqFw.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (word64-eq slot___ptr_to_struct_cte_C_v.4_init #x8000000001ffffe8)))))))))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-SBAese.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) (=> (=> true path_cond_to_141_fun3) (=> (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init) (=> (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init) (=> (mem-eq Mem.3_init Mem.4_init) (=> (= GhostAssertions.3_init GhostAssertions.4_init) (word64-eq slot___ptr_to_struct_cte_C_v.4_init #x8000000001ffffe8)))))))))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((169, ()), 'fun4'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (not (word64-eq exposed___unsigned_long_v.1_init #x0000000000000000))
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace rep_graph setting up input env at 169
trace done setting up input env at 169
tryinline:
168
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1.1', Type ('Word', 64)), ('Mem.4', Type ('Builtin', 'Mem')), ('HTD.4', Type ('Builtin', 'HTD')), ('PMS.4', Type ('Builtin', 'PMS')), ('GhostAssertions.4', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((167, ()), 'fun4'), ((140, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (=> true path_cond_to_141_fun3)
trace   (word64-eq endSlot___ptr_to_struct_cte_C_v_after_141 slot___ptr_to_struct_cte_C_v.4_init)
trace   (word64-eq ((_ sign_extend 32) #x00000000) exposed___unsigned_long_v.1_init)
trace   (mem-eq Mem.3_init Mem.4_init)
trace   (= GhostAssertions.3_init GhostAssertions.4_init)
trace   (word64-eq exposed___unsigned_long_v.1_init #x0000000000000000)
trace   path_cond_to_168_fun4
trace   (not (word64-eq exposed___unsigned_long_v.1_init #x0000000000000000))
trace Result: True
problem name Recursion Test pairing None
trace Loop (4, [3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
23
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((22, ((4, vc_options ([], [1])),)), 'fun0'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_23_4=i+1_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-F5j3xE.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-qgrc9H.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-f6QPVW.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
tryinline:
42
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((23, ((4, vc_options ([], [1])),)), 'fun0'), ((41, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   path_cond_to_42_fun1
trace   (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-YCmJCt.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-s4fLjR.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-3uquy4.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
75
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((74, ((52, vc_options ([], [1])),)), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_75_52=i+1_fun2
trace   (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-nAKsAW.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-nsc57a.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-10eiFO.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (not (and path_cond_to_75_52=i+1_fun2 (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))))))))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [104, 51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
tryinline:
140
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64)), ('Mem.3', Type ('Builtin', 'Mem')), ('HTD.3', Type ('Builtin', 'HTD')), ('PMS.3', Type ('Builtin', 'PMS')), ('GhostAssertions.3', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace Testing hyp whyps
trace requests = set([((139, ()), 'fun3'), ((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   path_cond_to_141_fun3
trace   (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000000))
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((75, ((52, vc_options ([], [1])),)), 'fun2'), ((103, ()), 'fun2'), ((160, ()), 'fun3'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (=> true path_cond_to_75_52=i+1_fun2)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init)
trace   (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init)
trace   (mem-eq Mem.2_after_86_52=i+1 Mem.3_init)
trace   (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init)
trace   (not false)
trace will fetch model for 108 vars and 20 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-EUNe3x.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) false)))))))))))))))))', '(check-sat)', '(get-value (slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb query_load-word64Mem_initb.1 path_cond_to_96_52=i+1_fun2 path_cond_to_31_fun0 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 query_=GhostAssertions.2_a path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini path_cond_to_42_fun1 exposed___unsigned_long_v_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 fun_success_at_101 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_load-word64Mem_initb query_mem-eqMem.2_after_86 query_mem-eqMem_after_loop query_load-word64Mem.2_ini query_bvaddbvaddslot___ptr query_load-word64Mem.2_ini.1 query_=GhostAssertions.2_a query_load-word64store-wor query_load-word64Mem.2_aft.2 query_load-word64Mem.2_aft.1 query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_bvaddbvaddslot___ptr.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb.1 query_load-word64Mem.2_aft query_bvaddslot___ptr_to_s.1))']
done

trace will fetch model for 108 vars and 20 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-T9gJ7A.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) false)))))))))))))))))', '(check-sat)', '(get-value (slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb query_load-word64Mem_initb.1 path_cond_to_96_52=i+1_fun2 path_cond_to_31_fun0 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 query_=GhostAssertions.2_a path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini path_cond_to_42_fun1 exposed___unsigned_long_v_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 fun_success_at_101 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_load-word64Mem_initb query_mem-eqMem.2_after_86 query_mem-eqMem_after_loop query_load-word64Mem.2_ini query_bvaddbvaddslot___ptr query_load-word64Mem.2_ini.1 query_=GhostAssertions.2_a query_load-word64store-wor query_load-word64Mem.2_aft.2 query_load-word64Mem.2_aft.1 query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_bvaddbvaddslot___ptr.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb.1 query_load-word64Mem.2_aft query_bvaddslot___ptr_to_s.1))']
done

trace will fetch model for 108 vars and 20 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-MorJzI.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) false)))))))))))))))))', '(check-sat)', '(get-value (slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb query_load-word64Mem_initb.1 path_cond_to_96_52=i+1_fun2 path_cond_to_31_fun0 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 query_=GhostAssertions.2_a path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini path_cond_to_42_fun1 exposed___unsigned_long_v_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 fun_success_at_101 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_load-word64Mem_initb query_mem-eqMem.2_after_86 query_mem-eqMem_after_loop query_load-word64Mem.2_ini query_bvaddbvaddslot___ptr query_load-word64Mem.2_ini.1 query_=GhostAssertions.2_a query_load-word64store-wor query_load-word64Mem.2_aft.2 query_load-word64Mem.2_aft.1 query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_bvaddbvaddslot___ptr.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb.1 query_load-word64Mem.2_aft query_bvaddslot___ptr_to_s.1))']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace will fetch model for 108 vars and 20 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('Yices2 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-8QKJBU.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) false)))))))))))))))))', '(assert (= slot___ptr_to_struct_cte_C_v_init #xffffffff840029a8))', '(assert (= immediate___unsigned_long_v.1_init #x0000000000000001))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #xffffffff840029a8))', '(assert (= slot___ptr_to_struct_cte_C_v.3_init #xffffffff840029a8))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_load-word64Mem.2_aft #x0000000000000000))', '(assert (= cond_at_97_52=i+1 true))', '(assert (= rv_space_ret__unsigned_long_v.1_after_94_52=i+1 #x0000000000000000))', '(assert (= ret__int_v.1_after_81_52=i+1 #x00000001))', '(assert (= ret__int_v.1_after_85_52=i+1 #x00000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029b0))', '(assert (= path_cond_to_87_52=i+1_fun2 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= cond_at_32 true))', '(assert (= ret__unsigned_longlong_v.1_after_loop_at_52 #x8000000000000000))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= isFinalCapability_success_at_99_52=i+1 false))', '(assert (= cond_at_80_52=i+1 false))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= path_cond_to_80_52=i+1_fun2 true))', '(assert (= path_cond_to_75_52=i+1_fun2 true))', '(assert (= query_load-word64Mem.2_aft.1 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #xffffffff840029b8))', '(assert (= query_load-word64Mem.2_aft.2 #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_96_52=i+1_fun2 true))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= finaliseCap_success_at_96_52=i+1 false))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= cond_at_102 true))', '(assert (= pvalid.10 true))', '(assert (= pvalid.11 true))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029b8))', '(assert (= query_load-word64store-wor #x0000000000000000))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= cond_at_53_52=i+1 true))', '(assert (= path_cond_to_101_fun2 true))', '(assert (= slot___ptr_to_struct_cte_C_v.2_init #xffffffff840029a8))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= capCyclicZombie_success_at_83_52=i+1 false))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #xffffffff840029a8))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= capRemovable_success_at_94_52=i+1 false))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= path_cond_to_102_fun2 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s #xffffffff840029a8))', '(assert (= pc_of_loop_at_4 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ret__int_v.1_v_at_80_52=i+1 #x00000000))', '(assert (= ptr.3 #xffffffff840029a8))', '(assert (= ptr.2 #xffffffff840029a8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= immediate___unsigned_long_v_init #x0000000000000001))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(assert (= query_mem-eqMem.2_after_86 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s.1 #xffffffff840029b0))', '(assert (= cond_at_92_52=i+1 false))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid.2 true))', '(assert (= pc_of_loop_at_52 true))', '(assert (= pvalid.8 true))', '(assert (= pvalid.9 true))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= pvalid.6 true))', '(assert (= pvalid.7 true))', '(assert (= pvalid.1 true))', '(assert (= loop_9_count_after_54 #x0000000000000000))', '(assert (= pvalid.3 true))', '(assert (= fun_success_at_31 false))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= path_cond_to_83_52=i+1_fun2 false))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_101 #x0000000000000000))', '(assert (= query_=GhostAssertions.2_a true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #xffffffff840029a8))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_99_52=i+1 #x0000000000000000))', '(assert (= cond_at_84_52=i+1 false))', '(assert (= query_bvaddbvaddslot___ptr.1 #xffffffff840029c0))', '(assert (= query_load-word64Mem.2_ini #x0000000000000000))', '(assert (= path_cond_to_42_fun1 true))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= query_bvaddbvaddslot___ptr.2 #xffffffff840029a8))', '(assert (= query_bvaddbvaddslot___ptr.3 #xffffffff840029b0))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= rodata-witness #xffffffff84017c00))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) #xffffffff840029a8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) true))', '(assert (= path_cond_to_86_52=i+1_fun2 true))', '(assert (= ret__int_v_after_loop_at_4 #x80000000))', '(assert (= (load-word64 (store-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1) (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008)) #x0000000000000000))', '(assert (= (load-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000)) #x0000000000000000))', '(assert (= query_load-word64Mem.2_ini.1 #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #xffffffff840029c0))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= cond_at_27 false))', '(assert (= path_cond_to_99_52=i+1_fun2 true))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008) #xffffffff840029b0))', '(assert (= fun_success_at_101 false))', '(assert (= loop_9_count_after_loop_at_52 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 #x0000000000000000))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_83_52=i+1 #x8000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= cond_at_87_52=i+1 true))', '(check-sat)', '(get-value (slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb query_load-word64Mem_initb.1 path_cond_to_96_52=i+1_fun2 path_cond_to_31_fun0 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 query_=GhostAssertions.2_a path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini path_cond_to_42_fun1 exposed___unsigned_long_v_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 fun_success_at_101 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_load-word64Mem_initb query_mem-eqMem.2_after_86 query_mem-eqMem_after_loop query_load-word64Mem.2_ini query_bvaddbvaddslot___ptr query_load-word64Mem.2_ini.1 query_=GhostAssertions.2_a query_load-word64store-wor query_load-word64Mem.2_aft.2 query_load-word64Mem.2_aft.1 query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_bvaddbvaddslot___ptr.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb.1 query_load-word64Mem.2_aft query_bvaddslot___ptr_to_s.1))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.67s elapsed, 0.04s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 108 vars and 20 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-0KEs0d.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) false)))))))))))))))))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffffff84017ca8))', '(assert (= immediate___unsigned_long_v.1_init #x0000000000000001))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #x7fffffff84017ca8))', '(assert (= slot___ptr_to_struct_cte_C_v.3_init #x7fffffff84017ca8))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_load-word64Mem.2_aft #x0000000000000000))', '(assert (= cond_at_97_52=i+1 true))', '(assert (= rv_space_ret__unsigned_long_v.1_after_94_52=i+1 #x0000000000000000))', '(assert (= ret__int_v.1_after_81_52=i+1 #x00000000))', '(assert (= ret__int_v.1_after_85_52=i+1 #x00000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffffff84017cb0))', '(assert (= path_cond_to_87_52=i+1_fun2 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= cond_at_32 true))', '(assert (= ret__unsigned_longlong_v.1_after_loop_at_52 #x0000000000000001))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= isFinalCapability_success_at_99_52=i+1 false))', '(assert (= cond_at_80_52=i+1 false))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= path_cond_to_80_52=i+1_fun2 true))', '(assert (= path_cond_to_75_52=i+1_fun2 true))', '(assert (= query_load-word64Mem.2_aft.1 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #x7fffffff84017cb8))', '(assert (= query_load-word64Mem.2_aft.2 #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_96_52=i+1_fun2 true))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= finaliseCap_success_at_96_52=i+1 false))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= cond_at_102 true))', '(assert (= pvalid.10 true))', '(assert (= pvalid.11 true))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffffff84017cb8))', '(assert (= query_load-word64store-wor #x0000000000000000))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= cond_at_53_52=i+1 true))', '(assert (= path_cond_to_101_fun2 true))', '(assert (= slot___ptr_to_struct_cte_C_v.2_init #x7fffffff84017ca8))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= capCyclicZombie_success_at_83_52=i+1 false))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #x7fffffff84017ca8))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= capRemovable_success_at_94_52=i+1 false))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= path_cond_to_102_fun2 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s #x7fffffff84017ca8))', '(assert (= pc_of_loop_at_4 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ret__int_v.1_v_at_80_52=i+1 #x00000000))', '(assert (= ptr.3 #x7fffffff84017ca8))', '(assert (= ptr.2 #x7fffffff84017ca8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= immediate___unsigned_long_v_init #x0000000000000001))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(assert (= query_mem-eqMem.2_after_86 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s.1 #x7fffffff84017cb0))', '(assert (= cond_at_92_52=i+1 false))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid.2 true))', '(assert (= pc_of_loop_at_52 true))', '(assert (= pvalid.8 true))', '(assert (= pvalid.9 true))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= pvalid.6 true))', '(assert (= pvalid.7 true))', '(assert (= pvalid.1 true))', '(assert (= loop_9_count_after_54 #x0000000000000000))', '(assert (= pvalid.3 true))', '(assert (= fun_success_at_31 false))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= path_cond_to_83_52=i+1_fun2 false))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_101 #x0000000000000000))', '(assert (= query_=GhostAssertions.2_a true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffffff84017ca8))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_99_52=i+1 #x0000000000000000))', '(assert (= cond_at_84_52=i+1 false))', '(assert (= query_bvaddbvaddslot___ptr.1 #x7fffffff84017cc0))', '(assert (= query_load-word64Mem.2_ini #x0000000000000000))', '(assert (= path_cond_to_42_fun1 true))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= query_bvaddbvaddslot___ptr.2 #x7fffffff84017ca8))', '(assert (= query_bvaddbvaddslot___ptr.3 #x7fffffff84017cb0))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) #x7fffffff84017ca8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) true))', '(assert (= path_cond_to_86_52=i+1_fun2 true))', '(assert (= ret__int_v_after_loop_at_4 #x00000001))', '(assert (= (load-word64 (store-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1) (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008)) #x0000000000000000))', '(assert (= (load-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000)) #x0000000000000000))', '(assert (= query_load-word64Mem.2_ini.1 #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffffff84017cc0))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= cond_at_27 false))', '(assert (= path_cond_to_99_52=i+1_fun2 true))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008) #x7fffffff84017cb0))', '(assert (= fun_success_at_101 false))', '(assert (= loop_9_count_after_loop_at_52 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 #x0000000000000000))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_83_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= cond_at_87_52=i+1 true))', '(check-sat)', '(get-value (slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb query_load-word64Mem_initb.1 path_cond_to_96_52=i+1_fun2 path_cond_to_31_fun0 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 query_=GhostAssertions.2_a path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini path_cond_to_42_fun1 exposed___unsigned_long_v_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 fun_success_at_101 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_load-word64Mem_initb query_mem-eqMem.2_after_86 query_mem-eqMem_after_loop query_load-word64Mem.2_ini query_bvaddbvaddslot___ptr query_load-word64Mem.2_ini.1 query_=GhostAssertions.2_a query_load-word64store-wor query_load-word64Mem.2_aft.2 query_load-word64Mem.2_aft.1 query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_bvaddbvaddslot___ptr.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb.1 query_load-word64Mem.2_aft query_bvaddslot___ptr_to_s.1))']
done

trace   <-- parallel solver ('SONOLAR (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from SONOLAR (offline) in parallel.
trace will fetch model for 108 vars and 20 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('SONOLAR (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-iXxLzt.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) (=> (=> true path_cond_to_75_52=i+1_fun2) (=> (word64-eq slot___ptr_to_struct_cte_C_v.2_init slot___ptr_to_struct_cte_C_v.3_init) (=> (word64-eq immediate___unsigned_long_v_init immediate___unsigned_long_v.1_init) (=> (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) (=> (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) false)))))))))))))))))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x8000000000000000))', '(assert (= immediate___unsigned_long_v.1_init #x0000000000000001))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #x064fc01b37ffffe8))', '(assert (= slot___ptr_to_struct_cte_C_v.3_init #x064fc01b37ffffe8))', '(assert (= ptr #xffffffff84002b88))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_load-word64Mem.2_aft #x0000000000000000))', '(assert (= cond_at_97_52=i+1 true))', '(assert (= rv_space_ret__unsigned_long_v.1_after_94_52=i+1 #x0000000000000000))', '(assert (= ret__int_v.1_after_81_52=i+1 #x00000000))', '(assert (= ret__int_v.1_after_85_52=i+1 #x00000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x064fc01b37fffff0))', '(assert (= path_cond_to_87_52=i+1_fun2 true))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= cond_at_32 true))', '(assert (= ret__unsigned_longlong_v.1_after_loop_at_52 #x8000000000000000))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= isFinalCapability_success_at_99_52=i+1 false))', '(assert (= cond_at_80_52=i+1 false))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= path_cond_to_80_52=i+1_fun2 true))', '(assert (= path_cond_to_75_52=i+1_fun2 true))', '(assert (= query_load-word64Mem.2_aft.1 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #x8000000000000010))', '(assert (= query_load-word64Mem.2_aft.2 #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= (mem-eq Mem.2_after_86_52=i+1 Mem.3_init) true))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= path_cond_to_96_52=i+1_fun2 true))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= finaliseCap_success_at_96_52=i+1 false))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= cond_at_102 true))', '(assert (= pvalid.10 true))', '(assert (= pvalid.11 true))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x8000000000000010))', '(assert (= query_load-word64store-wor #x0000000000000000))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= cond_at_53_52=i+1 true))', '(assert (= path_cond_to_101_fun2 true))', '(assert (= slot___ptr_to_struct_cte_C_v.2_init #x064fc01b37ffffe8))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= capCyclicZombie_success_at_83_52=i+1 false))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #x064fc01b37ffffe8))', '(assert (= (load-word64 Mem.2_after_loop_at_52 (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= capRemovable_success_at_94_52=i+1 false))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= path_cond_to_102_fun2 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s #x064fc01b37ffffe8))', '(assert (= pc_of_loop_at_4 true))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ret__int_v.1_v_at_80_52=i+1 #x00000000))', '(assert (= ptr.3 #x064fc01b37ffffe8))', '(assert (= ptr.2 #x8000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 #x0000000000000000))', '(assert (= immediate___unsigned_long_v_init #x0000000000000001))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(assert (= query_mem-eqMem.2_after_86 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddslot___ptr_to_s.1 #x064fc01b37fffff0))', '(assert (= cond_at_92_52=i+1 false))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= pvalid.2 true))', '(assert (= pc_of_loop_at_52 true))', '(assert (= pvalid.8 true))', '(assert (= pvalid.9 true))', '(assert (= pvalid.4 true))', '(assert (= pvalid.5 true))', '(assert (= pvalid.6 true))', '(assert (= pvalid.7 true))', '(assert (= pvalid.1 true))', '(assert (= loop_9_count_after_54 #x0000000000000000))', '(assert (= pvalid.3 true))', '(assert (= fun_success_at_31 false))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= path_cond_to_83_52=i+1_fun2 false))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_101 #x0000000000000000))', '(assert (= query_=GhostAssertions.2_a true))', '(assert (= (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x064fc01b37ffffe8))', '(assert (= (load-word64 Mem.2_init (bvadd slot___ptr_to_struct_cte_C_v.2_init (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_99_52=i+1 #x0000000000000000))', '(assert (= cond_at_84_52=i+1 false))', '(assert (= query_bvaddbvaddslot___ptr.1 #x8000000000000018))', '(assert (= query_load-word64Mem.2_ini #x0000000000000000))', '(assert (= path_cond_to_42_fun1 true))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= query_bvaddbvaddslot___ptr.2 #x064fc01b37ffffe8))', '(assert (= query_bvaddbvaddslot___ptr.3 #x064fc01b37fffff0))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= rodata-witness #xffffffff84017ba8))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) #x064fc01b37ffffe8))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= (= GhostAssertions.2_after_96_52=i+1 GhostAssertions.3_init) true))', '(assert (= path_cond_to_86_52=i+1_fun2 true))', '(assert (= ret__int_v_after_loop_at_4 #xc0000000))', '(assert (= (load-word64 (store-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000) rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1) (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008)) #x0000000000000000))', '(assert (= (load-word64 Mem.2_after_96_52=i+1 (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000000)) #x0000000000000000))', '(assert (= query_load-word64Mem.2_ini.1 #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x8000000000000018))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= cond_at_27 false))', '(assert (= path_cond_to_99_52=i+1_fun2 true))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000) #x0000000000000008) #x064fc01b37fffff0))', '(assert (= fun_success_at_101 false))', '(assert (= loop_9_count_after_loop_at_52 #x0000000000000000))', '(assert (= rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 #x0000000000000000))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v.1_after_83_52=i+1 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= cond_at_87_52=i+1 true))', '(check-sat)', '(get-value (slot___ptr_to_struct_cte_C_v_init immediate___unsigned_long_v.1_init nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.3_init path_cond_to_86_52=i+1_fun2 ptr query_load-word64store-wor rv_space_ret__unsigned_long_v.1_after_94_52=i+1 query_mem-eqMem_after_loop ret__int_v.1_after_81_52=i+1 ret__int_v.1_after_85_52=i+1 path_cond_to_87_52=i+1_fun2 rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.0_after_96_52=i+1 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.0_after_96_52=i+1 ret__unsigned_longlong_v.1_after_loop_at_52 query_bvaddslot___ptr_to_s.1 isFinalCapability_success_at_99_52=i+1 cond_at_80_52=i+1 path_cond_to_32_fun0 path_cond_to_26_fun0 path_cond_to_80_52=i+1_fun2 path_cond_to_75_52=i+1_fun2 query_load-word64Mem.2_aft.1 query_bvaddbvaddslot___ptr query_load-word64Mem.2_aft.2 query_load-word64Mem_initb query_load-word64Mem_initb.1 path_cond_to_96_52=i+1_fun2 path_cond_to_31_fun0 finaliseCap_success_at_96_52=i+1 isMDBParentOf_success_at_26 cond_at_102 pvalid.10 pvalid.11 ret__unsigned_long_v_after_loop_at_4 pvalid cond_at_97_52=i+1 query_mem-eqMem.1_initMem. cond_at_53_52=i+1 path_cond_to_101_fun2 slot___ptr_to_struct_cte_C_v.2_init cond_at_32 query_=GhostAssertions.1_i capCyclicZombie_success_at_83_52=i+1 slot___ptr_to_struct_cte_C_v.1_init capRemovable_success_at_94_52=i+1 nextPtr___ptr_to_struct_cte_C_v_after_29 path_cond_to_102_fun2 query_bvaddslot___ptr_to_s pc_of_loop_at_4 ptr.1 ret__int_v.1_v_at_80_52=i+1 ptr.3 ptr.2 immediate___unsigned_long_v_init query_mem-eqMem.2_after_86 rv_space_ret__unsigned_longlong_v_after_loop_at_4 query_load-word64Mem.2_aft cond_at_92_52=i+1 loop_4_count_after_loop_at_4 loop_9_count_after_54 pc_of_loop_at_52 pvalid.8 pvalid.9 pvalid.4 pvalid.5 pvalid.6 pvalid.7 pvalid.1 pvalid.2 pvalid.3 fun_success_at_31 cond_at_5_4=i+1 query_=GhostAssertions_aft ret__int_v_after_24 rv_space_ret__unsigned_long_v_after_26 path_cond_to_83_52=i+1_fun2 rodata-witness-val rv_space_ret__unsigned_longlong_v.1_after_101 query_=GhostAssertions.2_a path_cond_to_23_4=i+1_fun0 rv_space_ret__unsigned_long_v.1_v_at_80_52=i+1 rv_space_ret__unsigned_long_v.1_after_99_52=i+1 cond_at_84_52=i+1 query_bvaddbvaddslot___ptr.1 query_load-word64Mem.2_ini path_cond_to_42_fun1 exposed___unsigned_long_v_init query_bvaddbvaddslot___ptr.2 query_bvaddbvaddslot___ptr.3 ret__unsigned_longlong_v_after_loop_at_4 rodata-witness rv_space_ret__struct_finaliseCap_ret_C_v.remainder_C.words_C.1_after_96_52=i+1 loop_9_count_after_loop_at_52 ret__int_v_after_loop_at_4 query_load-word64Mem.2_ini.1 path_cond_to_6_fun0 cond_at_27 path_cond_to_99_52=i+1_fun2 fun_success_at_101 rv_space_ret__struct_finaliseCap_ret_C_v.cleanupInfo_C.words_C.1_after_96_52=i+1 rv_space_ret__unsigned_longlong_v_after_31 rv_space_ret__unsigned_longlong_v.1_after_loop_at_52 loop_4_count_after_6 ret__int_v_after_28 rv_space_ret__unsigned_long_v.1_after_83_52=i+1 rv_space_ret__unsigned_long_v_after_loop_at_4 cond_at_87_52=i+1 query_load-word64Mem_initb query_mem-eqMem.2_after_86 query_mem-eqMem_after_loop query_load-word64Mem.2_ini query_bvaddbvaddslot___ptr query_load-word64Mem.2_ini.1 query_=GhostAssertions.2_a query_load-word64store-wor query_load-word64Mem.2_aft.2 query_load-word64Mem.2_aft.1 query_=GhostAssertions_aft query_mem-eqMem.1_initMem. query_bvaddbvaddslot___ptr.1 query_bvaddbvaddslot___ptr.2 query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.3 query_bvaddslot___ptr_to_s query_load-word64Mem_initb.1 query_load-word64Mem.2_aft query_bvaddslot___ptr_to_s.1))']
done

trace   <-- parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.65s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace rep_graph setting up input env at 160
trace done setting up input env at 160
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
158
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombiePtr
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombiePtr, ['Kernel_C.cap_zombie_cap_get_capZombiePtr']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
154
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieNumber
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieNumber, ['Kernel_C.cap_zombie_cap_get_capZombieNumber']).
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
tryinline:
151
ti1
kkk
Kernel_C.cap_zombie_cap_get_capZombieType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.2', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_zombie_cap_get_capZombieType, ['Kernel_C.cap_zombie_cap_get_capZombieType']).
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '(bvsub rv_space_ret__unsigned_long_v.2_after_154 ((_ sign_extend 32) #x00000001))'))
tryinline:
140
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.2', Type ('Word', 64)), ('Mem.3', Type ('Builtin', 'Mem')), ('HTD.3', Type ('Builtin', 'HTD')), ('PMS.3', Type ('Builtin', 'PMS')), ('GhostAssertions.3', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((139, ()), 'fun3')])
trace testing ('hyp', None):
trace   path_cond_to_141_fun3
trace   (not (word64-eq ((_ sign_extend 32) #x00000000) #x0000000000000000))
trace Result: True
problem name Recursion Test pairing None
trace Loop (4, [3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
23
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((22, ((4, vc_options ([], [1])),)), 'fun0'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_23_4=i+1_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-G1xITm.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-NXJywJ.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-_nfKjN.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
tryinline:
42
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((23, ((4, vc_options ([], [1])),)), 'fun0'), ((41, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   path_cond_to_42_fun1
trace   (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-vzGFoK.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-OouDji.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-E0VrRB.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (not (and path_cond_to_42_fun1 (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000)))))))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace Loop (52, [51, 55, 56, 57, 64, 65, 66, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 53])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
75
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((74, ((52, vc_options ([], [1])),)), 'fun2'), ((23, ((4, vc_options ([], [1])),)), 'fun0'), ((42, ()), 'fun1'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   path_cond_to_75_52=i+1_fun2
trace   (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))
trace   (not true)
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((23, ((4, vc_options ([], [1])),)), 'fun0'), ((43, ()), 'fun1'), ((42, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0'), ((103, ()), 'fun2')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (=> true path_cond_to_42_fun1)
trace   (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init)
trace   (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init)
trace   (mem-eq Mem.1_init Mem.2_init)
trace   (= GhostAssertions.1_init GhostAssertions.2_init)
trace   (not false)
trace will fetch model for 46 vars and 8 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-UXsgd7.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 ret__unsigned_longlong_v_after_loop_at_4 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 ret__int_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft cond_at_27 slot___ptr_to_struct_cte_C_v.2_init rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.1_i pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 immediate___unsigned_long_v_init query_bvaddbvaddslot___ptr query_load-word64Mem_initb path_cond_to_42_fun1 query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft))']
done

trace will fetch model for 46 vars and 8 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-yTnybF.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 ret__unsigned_longlong_v_after_loop_at_4 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 ret__int_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft cond_at_27 slot___ptr_to_struct_cte_C_v.2_init rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.1_i pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 immediate___unsigned_long_v_init query_bvaddbvaddslot___ptr query_load-word64Mem_initb path_cond_to_42_fun1 query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft))']
done

trace will fetch model for 46 vars and 8 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-e6_4hq.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 ret__unsigned_longlong_v_after_loop_at_4 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 ret__int_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft cond_at_27 slot___ptr_to_struct_cte_C_v.2_init rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.1_i pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 immediate___unsigned_long_v_init query_bvaddbvaddslot___ptr query_load-word64Mem_initb path_cond_to_42_fun1 query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 46 vars and 8 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-9U2Dx4.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr.1 #x7fffffff84017cc0))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffffff84017ca8))', '(assert (= pvalid true))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= pc_of_loop_at_4 true))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffffff84017cb8))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= ptr #xffffffff84002b88))', '(assert (= ret__int_v_after_loop_at_4 #x00000001))', '(assert (= fun_success_at_31 false))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffffff84017cc0))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= cond_at_27 false))', '(assert (= slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #x0000000000000000))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= immediate___unsigned_long_v_init #x0000000000000001))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= cond_at_32 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ptr.2 #x7fffffff84017ca8))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #x7fffffff84017cb8))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= path_cond_to_42_fun1 true))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 ret__unsigned_longlong_v_after_loop_at_4 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 ret__int_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft cond_at_27 slot___ptr_to_struct_cte_C_v.2_init rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.1_i pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 immediate___unsigned_long_v_init query_bvaddbvaddslot___ptr query_load-word64Mem_initb path_cond_to_42_fun1 query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('SONOLAR (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from SONOLAR (offline) in parallel.
trace will fetch model for 46 vars and 8 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('SONOLAR (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-rLzYnq.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) (=> (=> true path_cond_to_42_fun1) (=> (word64-eq slot___ptr_to_struct_cte_C_v.1_init slot___ptr_to_struct_cte_C_v.2_init) (=> (word64-eq exposed___unsigned_long_v_init immediate___unsigned_long_v_init) (=> (mem-eq Mem.1_init Mem.2_init) (=> (= GhostAssertions.1_init GhostAssertions.2_init) false))))))))))))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #x0000000000000000))', '(assert (= (= GhostAssertions.1_init GhostAssertions.2_init) true))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr.1 #x7fffdff23f018008))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= rodata-witness #xffffffff84017ad0))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffdff23f017ff0))', '(assert (= pvalid true))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= pc_of_loop_at_4 true))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffdff23f018000))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= ptr #xffffffff84002b88))', '(assert (= ret__int_v_after_loop_at_4 #xe0000000))', '(assert (= fun_success_at_31 false))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffdff23f018008))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= (mem-eq Mem.1_init Mem.2_init) true))', '(assert (= query_mem-eqMem.1_initMem. true))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= cond_at_27 false))', '(assert (= slot___ptr_to_struct_cte_C_v.2_init #x0000000000000000))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #x0000000000000000))', '(assert (= query_=GhostAssertions.1_i true))', '(assert (= immediate___unsigned_long_v_init #x0000000000000001))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= cond_at_32 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ptr.2 #x7fffdff23f017ff0))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #x7fffdff23f018000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= path_cond_to_42_fun1 true))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 ret__unsigned_longlong_v_after_loop_at_4 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 ret__int_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft cond_at_27 slot___ptr_to_struct_cte_C_v.2_init rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init query_=GhostAssertions.1_i pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 immediate___unsigned_long_v_init query_bvaddbvaddslot___ptr query_load-word64Mem_initb path_cond_to_42_fun1 query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_=GhostAssertions.1_i query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_mem-eqMem.1_initMem. query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.01s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace rep_graph setting up input env at 103
trace done setting up input env at 103
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
101
ti1
kkk
Kernel_C.cap_get_capType
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
trace Warning: unusual unmatched function (Kernel_C.cap_get_capType, ['Kernel_C.cap_get_capType']).
tryinline:
99
ti1
kkk
Kernel_C.isFinalCapability
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
96
ti1
kkk
Kernel_C.finaliseCap
[('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

tryinline:
94
ti1
kkk
Kernel_C.capRemovable
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capRemovable, ['Kernel_C.capRemovable']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
83
ti1
kkk
Kernel_C.capCyclicZombie
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.capCyclicZombie, ['Kernel_C.capCyclicZombie']).
tryinline:
75
ti1
kkk
Kernel_C.reduceZombie
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v.1', Type ('Word', 64)), ('Mem.2', Type ('Builtin', 'Mem')), ('HTD.2', Type ('Builtin', 'HTD')), ('PMS.2', Type ('Builtin', 'PMS')), ('GhostAssertions.2', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Warning: unusual unmatched function (Kernel_C.reduceZombie, ['Kernel_C.reduceZombie']).
trace Testing hyp whyps
trace requests = set([((52, ((52, vc_options ([0], [])),)), 'fun2'), ((74, ((52, vc_options ([], [1])),)), 'fun2')])
trace testing ('hyp', None):
trace   path_cond_to_75_52=i+1_fun2
trace   (not (word64-eq immediate___unsigned_long_v_init #x0000000000000000))
trace   (not true)
trace Result: True
problem name Recursion Test pairing None
trace Loop (4, [3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
23
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((22, ((4, vc_options ([], [1])),)), 'fun0'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_23_4=i+1_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ub2eU1.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-DXtLhN.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-PDWI92.txt
solver inputs:

['(assert (not (not (and path_cond_to_23_4=i+1_fun0 (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.02s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Loop (4, [34, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
tryinline:
42
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((23, ((4, vc_options ([], [1])),)), 'fun0'), ((41, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   path_cond_to_42_fun1
trace   (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000))
trace   (not true)
trace Result: True
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Testing hyp whyps
trace requests = set([((23, ((4, vc_options ([], [1])),)), 'fun0'), ((43, ()), 'fun1'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_23_4=i+1_fun0)
trace   (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init)
trace   (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init)
trace   (mem-eq Mem_after_loop_at_4 Mem.1_init)
trace   (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init)
trace   (not false)
trace will fetch model for 41 vars and 6 compound exprs.
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-uK3j3Y.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) false)))))))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_=GhostAssertions_aft cond_at_27 ret__unsigned_longlong_v_after_loop_at_4 rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 ret__int_v_after_loop_at_4 query_bvaddbvaddslot___ptr query_load-word64Mem_initb query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_=GhostAssertions_aft))']
done

trace will fetch model for 41 vars and 6 compound exprs.
trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-lT__zv.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) false)))))))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_=GhostAssertions_aft cond_at_27 ret__unsigned_longlong_v_after_loop_at_4 rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 ret__int_v_after_loop_at_4 query_bvaddbvaddslot___ptr query_load-word64Mem_initb query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_=GhostAssertions_aft))']
done

trace will fetch model for 41 vars and 6 compound exprs.
trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-r7meRL.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) false)))))))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_=GhostAssertions_aft cond_at_27 ret__unsigned_longlong_v_after_loop_at_4 rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 ret__int_v_after_loop_at_4 query_bvaddbvaddslot___ptr query_load-word64Mem_initb query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.02s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace will fetch model for 41 vars and 6 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-hjFast.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) false)))))))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #x0000000000000000))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr.1 #x7fffffff84017cc0))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= rodata-witness #xffffffff84002b90))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffffff84017ca8))', '(assert (= pvalid true))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffffff84017cb8))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= ptr #xffffffff84002b88))', '(assert (= fun_success_at_31 false))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffffff84017cc0))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= cond_at_27 false))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #x0000000000000000))', '(assert (= pc_of_loop_at_4 true))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= cond_at_32 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ptr.2 #x7fffffff84017ca8))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= ret__int_v_after_loop_at_4 #x00000001))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #x7fffffff84017cb8))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_=GhostAssertions_aft cond_at_27 ret__unsigned_longlong_v_after_loop_at_4 rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 ret__int_v_after_loop_at_4 query_bvaddbvaddslot___ptr query_load-word64Mem_initb query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('SONOLAR (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from SONOLAR (offline) in parallel.
trace will fetch model for 41 vars and 6 compound exprs.
trace   --> new parallel solver ('ModelRepair', ('SONOLAR (offline)', 'hyp', None), 1)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Q4Hb8G.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_23_4=i+1_fun0) (=> (word64-eq nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 slot___ptr_to_struct_cte_C_v.1_init) (=> (word64-eq ((_ sign_extend 32) #x00000001) exposed___unsigned_long_v_init) (=> (mem-eq Mem_after_loop_at_4 Mem.1_init) (=> (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) false)))))))', '(assert (= loop_4_count_after_6 #x0000000000000000))', '(assert (= rv_space_ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= exposed___unsigned_long_v_init #x0000000000000001))', '(assert (= query_load-word64Mem_initb.1 #x0000000000000000))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 #x0000000000000000))', '(assert (= loop_4_count_after_loop_at_4 #x0000000000000000))', '(assert (= path_cond_to_31_fun0 true))', '(assert (= ret__unsigned_longlong_v_after_loop_at_4 #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr.1 #x7fffdff23f018008))', '(assert (= isMDBParentOf_success_at_26 false))', '(assert (= rodata-witness #xffffffff84017ad0))', '(assert (= ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= slot___ptr_to_struct_cte_C_v_init #x7fffdff23f017ff0))', '(assert (= pvalid true))', '(assert (= rv_space_ret__unsigned_long_v_after_loop_at_4 #x0000000000000000))', '(assert (= path_cond_to_23_4=i+1_fun0 true))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000))) #x7fffdff23f018000))', '(assert (= pvalid.1 true))', '(assert (= pvalid.2 true))', '(assert (= ptr #xffffffff84002b88))', '(assert (= fun_success_at_31 false))', '(assert (= (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001))) #x7fffdff23f018008))', '(assert (= path_cond_to_6_fun0 true))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000001)))) #x0000000000000000))', '(assert (= query_=GhostAssertions_aft true))', '(assert (= cond_at_27 false))', '(assert (= (mem-eq Mem_after_loop_at_4 Mem.1_init) true))', '(assert (= rv_space_ret__unsigned_long_v_after_26 #x0000000000000000))', '(assert (= rodata-witness-val #x0000000000000000))', '(assert (= query_mem-eqMem_after_loop true))', '(assert (= cond_at_5_4=i+1 true))', '(assert (= slot___ptr_to_struct_cte_C_v.1_init #x0000000000000000))', '(assert (= pc_of_loop_at_4 true))', '(assert (= nextPtr___ptr_to_struct_cte_C_v_after_29 #x0000000000000000))', '(assert (= ret__int_v_after_24 #x00000000))', '(assert (= cond_at_32 true))', '(assert (= rv_space_ret__unsigned_longlong_v_after_31 #x0000000000000000))', '(assert (= path_cond_to_32_fun0 true))', '(assert (= path_cond_to_26_fun0 false))', '(assert (= ptr.1 #xffffffff84017ac0))', '(assert (= ptr.2 #x7fffdff23f017ff0))', '(assert (= ret__int_v_after_28 #x00000000))', '(assert (= ret__int_v_after_loop_at_4 #xe0000000))', '(assert (= (load-word64 Mem_init (bvadd (bvadd slot___ptr_to_struct_cte_C_v_init #x0000000000000010) (bvadd #x0000000000000000 (bvmul #x0000000000000008 #x0000000000000000)))) #x0000000000000000))', '(assert (= query_bvaddbvaddslot___ptr #x7fffdff23f018000))', '(assert (= query_load-word64Mem_initb #x0000000000000000))', '(assert (= (= GhostAssertions_after_loop_at_4 GhostAssertions.1_init) true))', '(check-sat)', '(get-value (loop_4_count_after_6 rv_space_ret__unsigned_longlong_v_after_loop_at_4 exposed___unsigned_long_v_init query_load-word64Mem_initb.1 nextPtr___ptr_to_struct_cte_C_v_after_loop_at_4 loop_4_count_after_loop_at_4 path_cond_to_31_fun0 query_bvaddbvaddslot___ptr.1 isMDBParentOf_success_at_26 rodata-witness ptr slot___ptr_to_struct_cte_C_v_init pvalid rv_space_ret__unsigned_long_v_after_loop_at_4 path_cond_to_23_4=i+1_fun0 pvalid.1 pvalid.2 ret__unsigned_long_v_after_loop_at_4 fun_success_at_31 path_cond_to_6_fun0 query_=GhostAssertions_aft cond_at_27 ret__unsigned_longlong_v_after_loop_at_4 rv_space_ret__unsigned_long_v_after_26 rodata-witness-val query_mem-eqMem_after_loop cond_at_5_4=i+1 slot___ptr_to_struct_cte_C_v.1_init pc_of_loop_at_4 nextPtr___ptr_to_struct_cte_C_v_after_29 ret__int_v_after_24 cond_at_32 rv_space_ret__unsigned_longlong_v_after_31 path_cond_to_32_fun0 path_cond_to_26_fun0 ptr.1 ptr.2 ret__int_v_after_28 ret__int_v_after_loop_at_4 query_bvaddbvaddslot___ptr query_load-word64Mem_initb query_load-word64Mem_initb query_mem-eqMem_after_loop query_bvaddbvaddslot___ptr query_bvaddbvaddslot___ptr.1 query_load-word64Mem_initb.1 query_=GhostAssertions_aft))']
done

trace   <-- parallel solver ('ModelRepair', ('CVC4 (offline)', 'hyp', None), 1) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up input env at 43
trace done setting up input env at 43
tryinline:
42
ti1
kkk
Kernel_C.finaliseSlot
[('ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__struct_finaliseSlot_ret_C#v.status_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.success_C', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1', Type ('Word', 64)), ('Mem.1', Type ('Builtin', 'Mem')), ('HTD.1', Type ('Builtin', 'HTD')), ('PMS.1', Type ('Builtin', 'PMS')), ('GhostAssertions.1', Type ('WordArray', 50, 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Warning: unusual unmatched function (Kernel_C.finaliseSlot, ['Kernel_C.finaliseSlot']).
trace Testing hyp whyps
trace requests = set([((41, ()), 'fun1')])
trace testing ('hyp', None):
trace   path_cond_to_42_fun1
trace   (not (word64-eq exposed___unsigned_long_v_init #x0000000000000000))
trace   (not true)
trace Result: True
problem name Recursion Test pairing None
trace Loop (4, [3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 5])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
31
ti1
kkk
Kernel_C.mdb_node_get_mdbNext
[('ret__unsigned_longlong#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_longlong#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
26
ti1
kkk
Kernel_C.isMDBParentOf
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
trace Warning: unusual unmatched function (Kernel_C.mdb_node_get_mdbNext, ['Kernel_C.mdb_node_get_mdbNext']).
tryinline:
23
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((22, ((4, vc_options ([], [1])),)), 'fun0'), ((4, ((4, vc_options ([0], [])),)), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_23_4=i+1_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.invokeTCB_ThreadControl
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 73
trace done setting up input env at 73
tryinline:
72
ti1
kkk
Kernel_C.cap_thread_cap_new
[('ret__struct_cap_C#v.words_C.0', Type ('Word', 64)), ('ret__struct_cap_C#v.words_C.1', Type ('Word', 64))]
[('rv#space#ret__struct_cap_C#v.words_C.0', Type ('Word', 64)), ('rv#space#ret__struct_cap_C#v.words_C.1', Type ('Word', 64))]
kkkk

trace Warning: unusual unmatched function (Kernel_C.cap_thread_cap_new, ['Kernel_C.cap_thread_cap_new']).
trace Warning: unusual unmatched function (Kernel_C.cap_thread_cap_new, ['Kernel_C.cap_thread_cap_new']).
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.tcb_C'))
trace Now 3 related pvalids
tryinline:
66
ti1
kkk
Kernel_C.setMCPriority
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000000))'))
trace Now 4 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000000))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000000)'))
trace Now 5 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000000)'))
trace Now 4 related pvalids
tryinline:
62
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
57
ti1
kkk
Kernel_C.sameObjectAs
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 4 related pvalids
tryinline:
52
ti1
kkk
Kernel_C.sameObjectAs
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

tryinline:
48
ti1
kkk
Kernel_C.cteInsert
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000001))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000001)'))
trace Now 4 related pvalids
tryinline:
44
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 3 related pvalids
tryinline:
39
ti1
kkk
Kernel_C.sameObjectAs
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', 'Kernel_C.cte_C'))
trace Now 4 related pvalids
tryinline:
34
ti1
kkk
Kernel_C.sameObjectAs
[('ret__unsigned_long#v', Type ('Word', 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64))]
kkkk

tryinline:
30
ti1
kkk
Kernel_C.cteInsert
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_1'))"))
trace Now 1 related pvalids
trace adding pvalid with type ('Type', Type ('Struct', "Global (Type ('Struct', 'rodata_struct_2'))"))
trace Now 2 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) (bvsub #x00000000 #x00000004))'))
trace Now 3 related pvalids
trace adding pvalid with type ('Array', Type ('Struct', 'Kernel_C.cte_C'), Expr ('SMTExpr', Type ('Word', 64), val = '((_ zero_extend 32) #x00000004)'))
trace Now 4 related pvalids
tryinline:
26
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((25, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_27_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))
trace   (not true)
trace Result: True
trace Testing hyp whyps
trace requests = set([((25, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_45_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))
trace   (not true)
trace Result: True
trace Testing hyp whyps
trace requests = set([((25, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_63_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))
trace   (not true)
trace Result: True
trace Checking idents for Kernel_C.invokeCNodeDelete
problem name Recursion Test pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 1
trace done setting up input env at 1
tryinline:
4
ti1
kkk
Kernel_C.cteDelete
[('ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
[('rv#space#ret__unsigned_long#v', Type ('Word', 64)), ('Mem', Type ('Builtin', 'Mem')), ('HTD', Type ('Builtin', 'HTD')), ('PMS', Type ('Builtin', 'PMS')), ('GhostAssertions', Type ('WordArray', 50, 64))]
kkkk

trace Testing hyp whyps
trace requests = set([((3, ()), 'fun0')])
trace testing ('hyp', None):
trace   path_cond_to_4_fun0
trace   (not (word64-eq ((_ sign_extend 32) #x00000001) #x0000000000000000))
trace   (not true)
trace Result: True
Computed recursion limits.
Doing stack analysis for 'Arch_activateIdleThread'. (1 of 289)
problem name Function (Arch_activateIdleThread) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_checkIRQ'. (2 of 289)
problem name Function (Arch_checkIRQ) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_configureIdleThread'. (3 of 289)
problem name Function (Arch_configureIdleThread) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_createObject'. (4 of 289)
problem name Function (Arch_createObject) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
47
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'Arch_decodeIRQControlInvocation'. (5 of 289)
problem name Function (Arch_decodeIRQControlInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'Arch_decodeInvocation'. (6 of 289)
problem name Function (Arch_decodeInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
17
ti1
kkk
decodeRISCVMMUInvocation
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'Arch_decodeTransfer'. (7 of 289)
problem name Function (Arch_decodeTransfer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_deriveCap'. (8 of 289)
problem name Function (Arch_deriveCap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
53
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'Arch_finaliseCap'. (9 of 289)
problem name Function (Arch_finaliseCap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
tryinline:
55
ti1
kkk
unmapPage
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
65
ti1
kkk
findVSpaceForASID
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
103
ti1
kkk
deleteASIDPool
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'Arch_getObjectSize'. (10 of 289)
problem name Function (Arch_getObjectSize) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
19
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'Arch_handleFaultReply'. (11 of 289)
problem name Function (Arch_handleFaultReply) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
9
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_isFrameType'. (12 of 289)
problem name Function (Arch_isFrameType) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_maskCapRights'. (13 of 289)
problem name Function (Arch_maskCapRights) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
27
ti1
kkk
maskVMRights
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'Arch_performTransfer'. (14 of 289)
problem name Function (Arch_performTransfer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_postModifyRegisters'. (15 of 289)
problem name Function (Arch_postModifyRegisters) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_prepareThreadDelete'. (16 of 289)
problem name Function (Arch_prepareThreadDelete) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_sameObjectAs'. (17 of 289)
problem name Function (Arch_sameObjectAs) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
23
ti1
kkk
Arch_sameRegionAs
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'Arch_sameRegionAs'. (18 of 289)
problem name Function (Arch_sameRegionAs) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
tryinline:
85
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
87
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'Arch_setMRs_fault'. (19 of 289)
problem name Function (Arch_setMRs_fault) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
25
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'Arch_switchToIdleThread'. (20 of 289)
problem name Function (Arch_switchToIdleThread) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
5
ti1
kkk
setVMRoot
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_switchToThread'. (21 of 289)
problem name Function (Arch_switchToThread) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
setVMRoot
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'Arch_updateCapData'. (22 of 289)
problem name Function (Arch_updateCapData) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for '__clzdi2'. (23 of 289)
problem name Function (__clzdi2) pairing None
trace Loop (2214686916, [9, 2214686924, 7, 2214686920, 2214686918])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for '__ctzdi2'. (24 of 289)
problem name Function (__ctzdi2) pairing None
trace Loop (2214686948, [9, 2214686958, 7, 2214686956, 2214686952, 2214686950])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'ackInterrupt'. (25 of 289)
problem name Function (ackInterrupt) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'activateThread'. (26 of 289)
problem name Function (activateThread) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
19
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
25
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'activate_kernel_vspace'. (27 of 289)
problem name Function (activate_kernel_vspace) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
1
ti1
kkk
instruction'csrw_satp_a5_840001FE
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
3
ti1
kkk
instruction'sfence_vma_84000202
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
1
ti1
kkk
instruction'csrw_satp_a5_840001FE
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
3
ti1
kkk
instruction'sfence_vma_84000202
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((3, ()), 'Target'))]
trace get_ptr_offs fallthrough at 3: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((3, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214593030, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214593030: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214593030, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214593026, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214593026: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214593026, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((5, ()), 'Target'))]
trace get_ptr_offs fallthrough at 5: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((5, ()), 'Target'))]
Doing stack analysis for 'alloc_rootserver_obj'. (28 of 289)
problem name Function (alloc_rootserver_obj) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
9
ti1
kkk
memzero
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'arch_get_n_paging'. (29 of 289)
problem name Function (arch_get_n_paging) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'bi_finalise'. (30 of 289)
problem name Function (bi_finalise) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'bindNotification'. (31 of 289)
problem name Function (bindNotification) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'c_handle_exception'. (32 of 289)
problem name Function (c_handle_exception) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
3
ti1
kkk
instruction'csrr_a0_scause_840141FA
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
17
ti1
kkk
handleUserLevelFault
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
3
ti1
kkk
instruction'csrr_a0_scause_840141FA
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674944, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674944: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674944, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674948, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674948: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674948, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((5, ()), 'Target'))]
trace get_ptr_offs fallthrough at 5: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((5, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((7, ()), 'Target'))]
trace get_ptr_offs fallthrough at 7: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((7, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674952, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674952: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674952, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((9, ()), 'Target'))]
trace get_ptr_offs fallthrough at 9: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((9, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((11, ()), 'Target'))]
trace get_ptr_offs fallthrough at 11: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((11, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674956, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674956: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674956, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674960, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674960: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674960, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((17, ()), 'Target'))]
trace get_ptr_offs fallthrough at 17: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((17, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674962, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674962: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674962, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674964, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674964: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674964, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674966, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674966: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674966, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674978, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674978: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674978, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674980, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674980: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674980, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674942, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214674942: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214674942, ()), 'Target'))]
Doing stack analysis for 'c_handle_interrupt'. (33 of 289)
problem name Function (c_handle_interrupt) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
handleInterruptEntry
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'calculate_extra_bi_size_bits'. (34 of 289)
problem name Function (calculate_extra_bi_size_bits) pairing None
trace Inlining __clzdi2 at 9.
inlineatpoint
Node ('Call', ['Ret'], ('__clzdi2', [Expr ('Var', Type ('Word', 64), name = 'ret'), Expr ('Var', Type ('Word', 64), name = 'r0'), Expr ('Num', Type ('Word', 64), val = 2214596114), Expr ('Var', Type ('Word', 64), name = 'r2'), Expr ('Var', Type ('Word', 64), name = 'r3'), Expr ('Var', Type ('Word', 64), name = 'r4'), Expr ('Var', Type ('Word', 64), name = 'r5'), Expr ('Var', Type ('Word', 64), name = 'r6'), Expr ('Var', Type ('Word', 64), name = 'r7'), Expr ('Var', Type ('Word', 64), name = 'r8'), Expr ('Var', Type ('Word', 64), name = 'r9'), Expr ('Var', Type ('Word', 64), name = 'r10'), Expr ('Var', Type ('Word', 64), name = 'r11'), Expr ('Var', Type ('Word', 64), name = 'r12'), Expr ('Var', Type ('Word', 64), name = 'r13'), Expr ('Var', Type ('Word', 64), name = 'r14'), Expr ('Var', Type ('Word', 64), name = 'r15'), Expr ('Var', Type ('Word', 64), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'r17'), Expr ('Var', Type ('Word', 64), name = 'r18'), Expr ('Var', Type ('Word', 64), name = 'r19'), Expr ('Var', Type ('Word', 64), name = 'r20'), Expr ('Var', Type ('Word', 64), name = 'r21'), Expr ('Var', Type ('Word', 64), name = 'r22'), Expr ('Var', Type ('Word', 64), name = 'r23'), Expr ('Var', Type ('Word', 64), name = 'r24'), Expr ('Var', Type ('Word', 64), name = 'r25'), Expr ('Var', Type ('Word', 64), name = 'r26'), Expr ('Var', Type ('Word', 64), name = 'r27'), Expr ('Var', Type ('Word', 64), name = 'r28'), Expr ('Var', Type ('Word', 64), name = 'r29'), Expr ('Var', Type ('Word', 64), name = 'r30'), Expr ('Var', Type ('Word', 64), name = 'r31'), Expr ('Var', Type ('Word', 64), name = 'mode'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Dom'), name = 'dom'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Var', Type ('Builtin', 'Dom'), name = 'dom_stack'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 64), name = 'r0')], [('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]))
<syntax.Function instance at 0x7f034ab10170>
__clzdi2
trace Inlining __clzdi2 into Problem (Function (calculate_extra_bi_size_bits))
trace Loop (2214596153, [2214596158, 2214596160, 2214596156, 2214596157, 2214596155])
trace Problem size now 39
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
  (stack analysis also involves __clzdi2)
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'cancelAllIPC'. (35 of 289)
problem name Function (cancelAllIPC) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
21
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
31
ti1
kkk
rescheduleRequired
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'cancelAllSignals'. (36 of 289)
problem name Function (cancelAllSignals) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
23
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
33
ti1
kkk
rescheduleRequired
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'cancelBadgedSends'. (37 of 289)
problem name Function (cancelBadgedSends) pairing None
trace Loop (2214669330, [75, 2214669328, 2214669326, 81, 2214669338, 79, 2214669334, 77])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
tryinline:
63
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
95
ti1
kkk
rescheduleRequired
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
99
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'cancelIPC'. (38 of 289)
problem name Function (cancelIPC) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
tryinline:
33
ti1
kkk
tcbEPDequeue
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
67
ti1
kkk
cancelSignal
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
81
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
problem name Function (cancelIPC) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
tryinline:
33
ti1
kkk
tcbEPDequeue
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
67
ti1
kkk
cancelSignal
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
81
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   true
trace   path_cond_to_2214669774_Target
trace   true
trace   true
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-i25aHe.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_2214669774_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-ilbCqX.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_2214669774_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-J2o0Wv.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_2214669774_Target (and true true)))))))', '(check-sat)']
done

trace   <-- parallel solver ('Yices2 (offline)', 'hyp', None) closed: sat
trace       after (0.64s elapsed, 0.00s user, 0.00s sys)
trace Got 'sat' from Yices2 (offline) in parallel.
trace   -- hyp refuted by Yices2 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
Doing stack analysis for 'cancelSignal'. (39 of 289)
problem name Function (cancelSignal) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
19
ti1
kkk
tcbEPDequeue
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'capSwapForDelete'. (40 of 289)
problem name Function (capSwapForDelete) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
15
ti1
kkk
cteSwap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'char_to_long'. (41 of 289)
problem name Function (char_to_long) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'checkValidIPCBuffer'. (42 of 289)
problem name Function (checkValidIPCBuffer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'chooseThread'. (43 of 289)
problem name Function (chooseThread) pairing None
trace Inlining __clzdi2 at 15.
inlineatpoint
Node ('Call', ['Ret'], ('__clzdi2', [Expr ('Var', Type ('Word', 64), name = 'ret'), Expr ('Var', Type ('Word', 64), name = 'r0'), Expr ('Num', Type ('Word', 64), val = 2214668430), Expr ('Var', Type ('Word', 64), name = 'r2'), Expr ('Var', Type ('Word', 64), name = 'r3'), Expr ('Var', Type ('Word', 64), name = 'r4'), Expr ('Var', Type ('Word', 64), name = 'r5'), Expr ('Var', Type ('Word', 64), name = 'r6'), Expr ('Var', Type ('Word', 64), name = 'r7'), Expr ('Var', Type ('Word', 64), name = 'r8'), Expr ('Var', Type ('Word', 64), name = 'r9'), Expr ('Var', Type ('Word', 64), name = 'r10'), Expr ('Var', Type ('Word', 64), name = 'r11'), Expr ('Var', Type ('Word', 64), name = 'r12'), Expr ('Var', Type ('Word', 64), name = 'r13'), Expr ('Var', Type ('Word', 64), name = 'r14'), Expr ('Var', Type ('Word', 64), name = 'r15'), Expr ('Var', Type ('Word', 64), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'r17'), Expr ('Var', Type ('Word', 64), name = 'r18'), Expr ('Var', Type ('Word', 64), name = 'r19'), Expr ('Var', Type ('Word', 64), name = 'r20'), Expr ('Var', Type ('Word', 64), name = 'r21'), Expr ('Var', Type ('Word', 64), name = 'r22'), Expr ('Var', Type ('Word', 64), name = 'r23'), Expr ('Var', Type ('Word', 64), name = 'r24'), Expr ('Var', Type ('Word', 64), name = 'r25'), Expr ('Var', Type ('Word', 64), name = 'r26'), Expr ('Var', Type ('Word', 64), name = 'r27'), Expr ('Var', Type ('Word', 64), name = 'r28'), Expr ('Var', Type ('Word', 64), name = 'r29'), Expr ('Var', Type ('Word', 64), name = 'r30'), Expr ('Var', Type ('Word', 64), name = 'r31'), Expr ('Var', Type ('Word', 64), name = 'mode'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Dom'), name = 'dom'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Var', Type ('Builtin', 'Dom'), name = 'dom_stack'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 64), name = 'r0')], [('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]))
<syntax.Function instance at 0x7f034ab10170>
__clzdi2
trace Inlining __clzdi2 into Problem (Function (chooseThread))
trace Loop (2214668515, [2214668520, 2214668522, 2214668518, 2214668519, 2214668517])
trace Problem size now 46
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
33
ti1
kkk
switchToIdleThread
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

  (stack analysis also involves __clzdi2)
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'completeSignal'. (44 of 289)
problem name Function (completeSignal) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
23
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'configureIdleThread'. (45 of 289)
problem name Function (configureIdleThread) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
9
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'copyGlobalMappings'. (46 of 289)
problem name Function (copyGlobalMappings) pairing None
trace Loop (2214659126, [5, 2214659134, 2214659132, 2214659130, 3, 2214659128, 1])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'copyMRs'. (47 of 289)
problem name Function (copyMRs) pairing None
trace Loop (2214673356, [49, 2214673374, 2214673372, 47, 2214673368, 2214673364, 45, 2214673360])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'createNewObjects'. (48 of 289)
problem name Function (createNewObjects) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
23
ti1
kkk
getObjectSize
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'createObject'. (49 of 289)
problem name Function (createObject) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
15
ti1
kkk
Arch_createObject
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
57
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'create_bi_frame_cap'. (50 of 289)
problem name Function (create_bi_frame_cap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
tryinline:
9
ti1
kkk
create_mapped_it_frame_cap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
Doing stack analysis for 'create_device_untypeds'. (51 of 289)
problem name Function (create_device_untypeds) pairing None
trace Loop (2214598396, [31, 2214598392, 27, 2214598388, 2214598386, 2214598384, 25, 2214598380, 35, 2214598400, 33, 2214598398])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
tryinline:
43
ti1
kkk
create_untypeds_for_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
73
ti1
kkk
create_untypeds_for_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'create_domain_cap'. (52 of 289)
problem name Function (create_domain_cap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'create_frames_of_region'. (53 of 289)
problem name Function (create_frames_of_region) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
tryinline:
51
ti1
kkk
provide_cap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
69
ti1
kkk
create_mapped_it_frame_cap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'create_idle_thread'. (54 of 289)
problem name Function (create_idle_thread) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
5
ti1
kkk
configureIdleThread
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'create_initial_thread'. (55 of 289)
problem name Function (create_initial_thread) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 657
trace done setting up input env at 657
tryinline:
311
ti1
kkk
deriveCap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 657
trace done setting up input env at 657
Doing stack analysis for 'create_ipcbuf_frame_cap'. (56 of 289)
problem name Function (create_ipcbuf_frame_cap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
tryinline:
17
ti1
kkk
memzero
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'create_it_address_space'. (57 of 289)
Doing stack analysis for 'create_it_asid_pool'. (58 of 289)
problem name Function (create_it_asid_pool) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 193
trace done setting up input env at 193
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 193
trace done setting up input env at 193
Doing stack analysis for 'create_kernel_untypeds'. (59 of 289)
problem name Function (create_kernel_untypeds) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
13
ti1
kkk
create_untypeds_for_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'create_mapped_it_frame_cap'. (60 of 289)
problem name Function (create_mapped_it_frame_cap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
7
ti1
kkk
map_it_frame_cap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'create_root_cnode'. (61 of 289)
problem name Function (create_root_cnode) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'create_rootserver_objects'. (62 of 289)
problem name Function (create_rootserver_objects) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
tryinline:
37
ti1
kkk
arch_get_n_paging
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'create_unmapped_it_frame_cap'. (63 of 289)
problem name Function (create_unmapped_it_frame_cap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'create_untypeds_for_region'. (64 of 289)
problem name Function (create_untypeds_for_region) pairing None
trace Inlining __clzdi2 at 57.
inlineatpoint
Node ('Call', ['Ret'], ('__clzdi2', [Expr ('Var', Type ('Word', 64), name = 'ret'), Expr ('Var', Type ('Word', 64), name = 'r0'), Expr ('Num', Type ('Word', 64), val = 2214598188), Expr ('Var', Type ('Word', 64), name = 'r2'), Expr ('Var', Type ('Word', 64), name = 'r3'), Expr ('Var', Type ('Word', 64), name = 'r4'), Expr ('Var', Type ('Word', 64), name = 'r5'), Expr ('Var', Type ('Word', 64), name = 'r6'), Expr ('Var', Type ('Word', 64), name = 'r7'), Expr ('Var', Type ('Word', 64), name = 'r8'), Expr ('Var', Type ('Word', 64), name = 'r9'), Expr ('Var', Type ('Word', 64), name = 'r10'), Expr ('Var', Type ('Word', 64), name = 'r11'), Expr ('Var', Type ('Word', 64), name = 'r12'), Expr ('Var', Type ('Word', 64), name = 'r13'), Expr ('Var', Type ('Word', 64), name = 'r14'), Expr ('Var', Type ('Word', 64), name = 'r15'), Expr ('Var', Type ('Word', 64), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'r17'), Expr ('Var', Type ('Word', 64), name = 'r18'), Expr ('Var', Type ('Word', 64), name = 'r19'), Expr ('Var', Type ('Word', 64), name = 'r20'), Expr ('Var', Type ('Word', 64), name = 'r21'), Expr ('Var', Type ('Word', 64), name = 'r22'), Expr ('Var', Type ('Word', 64), name = 'r23'), Expr ('Var', Type ('Word', 64), name = 'r24'), Expr ('Var', Type ('Word', 64), name = 'r25'), Expr ('Var', Type ('Word', 64), name = 'r26'), Expr ('Var', Type ('Word', 64), name = 'r27'), Expr ('Var', Type ('Word', 64), name = 'r28'), Expr ('Var', Type ('Word', 64), name = 'r29'), Expr ('Var', Type ('Word', 64), name = 'r30'), Expr ('Var', Type ('Word', 64), name = 'r31'), Expr ('Var', Type ('Word', 64), name = 'mode'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Dom'), name = 'dom'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Var', Type ('Builtin', 'Dom'), name = 'dom_stack'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 64), name = 'r0')], [('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]))
<syntax.Function instance at 0x7f034ab10170>
__clzdi2
trace Inlining __clzdi2 into Problem (Function (create_untypeds_for_region))
trace Loop (2214598333, [2214598338, 2214598340, 2214598336, 2214598337, 2214598335])
trace Problem size now 110
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 129
trace done setting up input env at 129
  (stack analysis also involves __clzdi2)
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 129
trace done setting up input env at 129
Doing stack analysis for 'cteDelete'. (65 of 289)
problem name Function (cteDelete) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 193
trace done setting up input env at 193
tryinline:
57
ti1
kkk
isFinalCapability
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
117
ti1
kkk
emptySlot
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 193
trace done setting up input env at 193
Doing stack analysis for 'cteDeleteOne'. (66 of 289)
problem name Function (cteDeleteOne) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
13
ti1
kkk
isFinalCapability
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'cteInsert'. (67 of 289)
problem name Function (cteInsert) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'cteMove'. (68 of 289)
problem name Function (cteMove) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'cteRevoke'. (69 of 289)
problem name Function (cteRevoke) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
tryinline:
21
ti1
kkk
isMDBParentOf
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'cteSwap'. (70 of 289)
problem name Function (cteSwap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'decodeBindNotification'. (71 of 289)
problem name Function (decodeBindNotification) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
tryinline:
57
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'decodeCNodeInvocation'. (72 of 289)
problem name Function (decodeCNodeInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 529
trace done setting up input env at 529
tryinline:
49
ti1
kkk
lookupTargetSlot
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 529
trace done setting up input env at 529
Doing stack analysis for 'decodeCopyRegisters'. (73 of 289)
problem name Function (decodeCopyRegisters) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
35
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'decodeDomainInvocation'. (74 of 289)
problem name Function (decodeDomainInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
tryinline:
35
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'decodeIRQControlInvocation'. (75 of 289)
problem name Function (decodeIRQControlInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'decodeIRQHandlerInvocation'. (76 of 289)
problem name Function (decodeIRQHandlerInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
tryinline:
25
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
67
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
75
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'decodeInvocation'. (77 of 289)
problem name Function (decodeInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 241
trace done setting up input env at 241
tryinline:
43
ti1
kkk
decodeRISCVMMUInvocation
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
229
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 241
trace done setting up input env at 241
Doing stack analysis for 'decodeRISCVMMUInvocation'. (78 of 289)
problem name Function (decodeRISCVMMUInvocation) pairing None
trace Loop (2214682358, [545, 2214682368, 2214682366, 2214682364, 543, 2214682360, 539])
trace Loop (2214682676, [623, 2214682690, 621, 2214682688, 2214682686, 2214682682, 619, 615, 2214682672, 2214682670, 617, 2214682680])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 689
trace done setting up input env at 689
tryinline:
155
ti1
kkk
findVSpaceForASID
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
203
ti1
kkk
isFinalCapability
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
307
ti1
kkk
findVSpaceForASID
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
453
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
459
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
553
ti1
kkk
ensureNoChildren
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
633
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
653
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 689
trace done setting up input env at 689
Doing stack analysis for 'decodeReadRegisters'. (79 of 289)
problem name Function (decodeReadRegisters) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
39
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'decodeSetIPCBuffer'. (80 of 289)
problem name Function (decodeSetIPCBuffer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
tryinline:
41
ti1
kkk
deriveCap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
67
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'decodeSetMCPriority'. (81 of 289)
problem name Function (decodeSetMCPriority) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
tryinline:
39
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
Doing stack analysis for 'decodeSetPriority'. (82 of 289)
problem name Function (decodeSetPriority) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
tryinline:
39
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
Doing stack analysis for 'decodeSetSchedParams'. (83 of 289)
problem name Function (decodeSetSchedParams) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
tryinline:
47
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 113
trace done setting up input env at 113
Doing stack analysis for 'decodeSetSpace'. (84 of 289)
problem name Function (decodeSetSpace) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 225
trace done setting up input env at 225
tryinline:
73
ti1
kkk
slotCapLongRunningDelete
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 225
trace done setting up input env at 225
Doing stack analysis for 'decodeTCBConfigure'. (85 of 289)
problem name Function (decodeTCBConfigure) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 273
trace done setting up input env at 273
tryinline:
97
ti1
kkk
slotCapLongRunningDelete
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
243
ti1
kkk
deriveCap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 273
trace done setting up input env at 273
Doing stack analysis for 'decodeTCBInvocation'. (86 of 289)
problem name Function (decodeTCBInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 241
trace done setting up input env at 241
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 241
trace done setting up input env at 241
Doing stack analysis for 'decodeUnbindNotification'. (87 of 289)
problem name Function (decodeUnbindNotification) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
21
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'decodeUntypedInvocation'. (88 of 289)
problem name Function (decodeUntypedInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 289
trace done setting up input env at 289
tryinline:
53
ti1
kkk
getObjectSize
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 289
trace done setting up input env at 289
Doing stack analysis for 'decodeWriteRegisters'. (89 of 289)
problem name Function (decodeWriteRegisters) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
39
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'deleteASID'. (90 of 289)
problem name Function (deleteASID) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
17
ti1
kkk
instruction'sfence_vma_zero_a0_84010972
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
23
ti1
kkk
setVMRoot
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
17
ti1
kkk
instruction'sfence_vma_zero_a0_84010972
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_17 - r2_init
trace [('r2_after_17', 1), ('r2_init', -1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660482, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660482: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660482, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_17 - r2_init
trace [('r2_after_17', 1), ('r2_init', -1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660484, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660484: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660484, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_17 - r2_init
trace [('r2_after_17', 1), ('r2_init', -1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((19, ()), 'Target'))]
trace get_ptr_offs fallthrough at 19: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((19, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_17 - r2_init
trace [('r2_after_17', 1), ('r2_init', -1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((21, ()), 'Target'))]
trace get_ptr_offs fallthrough at 21: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((21, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_17 - r2_init
trace [('r2_after_17', 1), ('r2_init', -1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((23, ()), 'Target'))]
trace get_ptr_offs fallthrough at 23: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((23, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_17 - r2_init
trace [('r2_after_17', 1), ('r2_init', -1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660470, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660470: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660470, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_17 - r2_init
trace [('r2_after_17', 1), ('r2_init', -1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660474, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660474: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660474, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_17 - r2_init
trace [('r2_after_17', 1), ('r2_init', -1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660478, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660478: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660478, ()), 'Target'))]
Doing stack analysis for 'deleteASIDPool'. (91 of 289)
problem name Function (deleteASIDPool) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
15
ti1
kkk
setVMRoot
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'deleteCallerCap'. (92 of 289)
problem name Function (deleteCallerCap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
problem name Function (deleteCallerCap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   true
trace   path_cond_to_1_Target
trace   true
trace   true
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-AZGnCg.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-1GK4Lh.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-C5X47A.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
Doing stack analysis for 'deletedIRQHandler'. (93 of 289)
problem name Function (deletedIRQHandler) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
setIRQState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'deletingIRQHandler'. (94 of 289)
problem name Function (deletingIRQHandler) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
problem name Function (deletingIRQHandler) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   true
trace   path_cond_to_1_Target
trace   true
trace   true
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-zzo64m.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-S0jhZk.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-OzC4hs.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
Doing stack analysis for 'deriveCap'. (95 of 289)
problem name Function (deriveCap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
tryinline:
33
ti1
kkk
ensureNoChildren
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
39
ti1
kkk
Arch_deriveCap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'doFaultTransfer'. (96 of 289)
problem name Function (doFaultTransfer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
9
ti1
kkk
setMRs_fault
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'doIPCTransfer'. (97 of 289)
problem name Function (doIPCTransfer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
15
ti1
kkk
lookupIPCBuffer
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'doNBRecvFailedTransfer'. (98 of 289)
problem name Function (doNBRecvFailedTransfer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'doNormalTransfer'. (99 of 289)
problem name Function (doNormalTransfer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 177
trace done setting up input env at 177
tryinline:
37
ti1
kkk
copyMRs
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
71
ti1
kkk
lookupExtraCaps
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 177
trace done setting up input env at 177
Doing stack analysis for 'doReplyTransfer'. (100 of 289)
problem name Function (doReplyTransfer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
15
ti1
kkk
doIPCTransfer
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
33
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
problem name Function (doReplyTransfer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
15
ti1
kkk
doIPCTransfer
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
33
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   true
trace   path_cond_to_11_Target
trace   true
trace   true
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-WKi6OP.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_11_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-K1r4o8.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_11_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-yAvFsI.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_11_Target (and true true)))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
Doing stack analysis for 'emptySlot'. (101 of 289)
problem name Function (emptySlot) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
63
ti1
kkk
deletedIRQHandler
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'ensureEmptySlot'. (102 of 289)
problem name Function (ensureEmptySlot) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'ensureNoChildren'. (103 of 289)
problem name Function (ensureNoChildren) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
9
ti1
kkk
isMDBParentOf
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'fastpath_restore'. (104 of 289)
Doing stack analysis for 'finaliseCap'. (105 of 289)
problem name Function (finaliseCap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 193
trace done setting up input env at 193
tryinline:
27
ti1
kkk
Arch_finaliseCap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
115
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
145
ti1
kkk
unbindNotification
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
169
ti1
kkk
deletingIRQHandler
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 193
trace done setting up input env at 193
problem name Function (finaliseCap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 193
trace done setting up input env at 193
tryinline:
27
ti1
kkk
Arch_finaliseCap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
115
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
145
ti1
kkk
unbindNotification
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
169
ti1
kkk
deletingIRQHandler
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   (word64-eq r14_init #x0000000000000001)
trace   (not path_cond_to_85_Target)
trace   path_cond_to_157_Target
trace   true
trace   true
trace Result: True
trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   (not (word64-eq r14_init #x0000000000000001))
trace   true
trace   (not path_cond_to_85_Target)
trace   path_cond_to_157_Target
trace   true
trace   true
trace Result: True
Doing stack analysis for 'findVSpaceForASID'. (106 of 289)
problem name Function (findVSpaceForASID) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'getActiveIRQ'. (107 of 289)
problem name Function (getActiveIRQ) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
7
ti1
kkk
instruction'csrr_a5_sip_84010AE0
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
7
ti1
kkk
instruction'csrr_a5_sip_84010AE0
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((9, ()), 'Target'))]
trace get_ptr_offs fallthrough at 9: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((9, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((11, ()), 'Target'))]
trace get_ptr_offs fallthrough at 11: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((11, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((13, ()), 'Target'))]
trace get_ptr_offs fallthrough at 13: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((13, ()), 'Target'))]
trace Testing hyp whyps
trace requests = set([((7, ()), 'Target'), ((13, ()), 'Target'), ((15, ()), 'Target'), ((1, ()), 'Target'), ((3, ()), 'Target'), ((9, ()), 'Target'), ((5, ()), 'Target'), ((11, ()), 'Target'), ((17, ()), 'Target')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_15_Target)
trace   (not path_cond_to_3_Target)
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-wu7ii4.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_15_Target) path_cond_to_3_Target)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-GZ2ncx.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_15_Target) path_cond_to_3_Target)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Idnw7L.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_15_Target) path_cond_to_3_Target)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((7, ()), 'Target'), ((13, ()), 'Target'), ((15, ()), 'Target'), ((1, ()), 'Target'), ((3, ()), 'Target'), ((9, ()), 'Target'), ((5, ()), 'Target'), ((11, ()), 'Target'), ((17, ()), 'Target')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_15_Target)
trace   path_cond_to_3_Target
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-aFnC87.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_15_Target) (not path_cond_to_3_Target))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-0Waqd3.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_15_Target) (not path_cond_to_3_Target))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-J8IXtg.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_15_Target) (not path_cond_to_3_Target))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.01s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace offs_expr_const: not const
trace (ite path_cond_to_3_Target r2_init r2_after_7) - r2_init
trace [('r2_init', -1), (('ite', 'path_cond_to_3_Target', 'r2_init', 'r2_after_7'), 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((15, ()), 'Target'))]
trace get_ptr_offs fallthrough at 15: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((15, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660836, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660836: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660836, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660840, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660840: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660840, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660842, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660842: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660842, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660844, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660844: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660844, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660848, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660848: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660848, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660850, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660850: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660850, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_7 - r2_init
trace [('r2_init', -1), ('r2_after_7', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660854, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660854: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660854, ()), 'Target'))]
trace Testing hyp whyps
trace requests = set([((7, ()), 'Target'), ((13, ()), 'Target'), ((15, ()), 'Target'), ((1, ()), 'Target'), ((3, ()), 'Target'), ((9, ()), 'Target'), ((5, ()), 'Target'), ((11, ()), 'Target'), ((17, ()), 'Target')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_2214660858_Target)
trace   (not path_cond_to_3_Target)
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-2ItSP2.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_2214660858_Target) path_cond_to_3_Target)))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-R7M41C.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_2214660858_Target) path_cond_to_3_Target)))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-rQ9kxL.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_2214660858_Target) path_cond_to_3_Target)))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace Testing hyp whyps
trace requests = set([((7, ()), 'Target'), ((13, ()), 'Target'), ((15, ()), 'Target'), ((1, ()), 'Target'), ((3, ()), 'Target'), ((9, ()), 'Target'), ((5, ()), 'Target'), ((11, ()), 'Target'), ((17, ()), 'Target')])
trace testing ('hyp', None):
trace   (=> true path_cond_to_2214660858_Target)
trace   path_cond_to_3_Target
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-KviT3a.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_2214660858_Target) (not path_cond_to_3_Target))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-8yCf9Y.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_2214660858_Target) (not path_cond_to_3_Target))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-aCzIkg.txt
solver inputs:

['(assert (not (=> (=> true path_cond_to_2214660858_Target) (not path_cond_to_3_Target))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
trace offs_expr_const: not const
trace (ite path_cond_to_3_Target r2_init r2_after_7) - r2_init
trace [('r2_init', -1), (('ite', 'path_cond_to_3_Target', 'r2_init', 'r2_after_7'), 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660858, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214660858: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214660858, ()), 'Target'))]
Doing stack analysis for 'getExtraCPtr'. (108 of 289)
problem name Function (getExtraCPtr) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'getObjectSize'. (109 of 289)
problem name Function (getObjectSize) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
15
ti1
kkk
Arch_getObjectSize
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
21
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'getReceiveSlots'. (110 of 289)
problem name Function (getReceiveSlots) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
tryinline:
17
ti1
kkk
lookupCap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 65
trace done setting up input env at 65
Doing stack analysis for 'getRestartPC'. (111 of 289)
problem name Function (getRestartPC) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'get_avail_p_regs'. (112 of 289)
problem name Function (get_avail_p_regs) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'get_num_avail_p_regs'. (113 of 289)
problem name Function (get_num_avail_p_regs) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'halt'. (114 of 289)
problem name Function (halt) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace Warning: unreachable n_vc, tag: ('Ret', ()), Target
tryinline:
1
ti1
kkk
instruction'ecall_8401029C
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
1
ti1
kkk
instruction'ecall_8401029C
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214658720, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214658720: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214658720, ()), 'Target'))]
Doing stack analysis for 'handleDoubleFault'. (115 of 289)
problem name Function (handleDoubleFault) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
setThreadState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'handleFault'. (116 of 289)
problem name Function (handleFault) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
5
ti1
kkk
sendFaultIPC
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'handleFaultReply'. (117 of 289)
problem name Function (handleFaultReply) pairing None
trace Loop (2214659428, [69, 2214659450, 2214659448, 2214659446, 2214659444, 67, 2214659442, 2214659440, 2214659438, 65, 2214659436, 2214659434, 2214659432, 63, 2214659430, 61])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 161
trace done setting up input env at 161
tryinline:
77
ti1
kkk
lookupIPCBuffer
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
137
ti1
kkk
lookupIPCBuffer
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
153
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 161
trace done setting up input env at 161
Doing stack analysis for 'handleInterrupt'. (118 of 289)
problem name Function (handleInterrupt) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
tryinline:
31
ti1
kkk
maskInterrupt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
51
ti1
kkk
sendSignal
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
53
ti1
kkk
timerTick
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
65
ti1
kkk
maskInterrupt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
67
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
Doing stack analysis for 'handleInterruptEntry'. (119 of 289)
problem name Function (handleInterruptEntry) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
3
ti1
kkk
getActiveIRQ
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'handleInvocation'. (120 of 289)
problem name Function (handleInvocation) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 145
trace done setting up input env at 145
tryinline:
29
ti1
kkk
lookupCapAndSlot
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 145
trace done setting up input env at 145
Doing stack analysis for 'handleRecv'. (121 of 289)
problem name Function (handleRecv) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 145
trace done setting up input env at 145
tryinline:
11
ti1
kkk
lookupCap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 145
trace done setting up input env at 145
Doing stack analysis for 'handleReply'. (122 of 289)
problem name Function (handleReply) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
21
ti1
kkk
doReplyTransfer
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
27
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'handleSpuriousIRQ'. (123 of 289)
problem name Function (handleSpuriousIRQ) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'handleSyscall'. (124 of 289)
problem name Function (handleSyscall) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
tryinline:
85
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 97
trace done setting up input env at 97
Doing stack analysis for 'handleUnknownSyscall'. (125 of 289)
problem name Function (handleUnknownSyscall) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
9
ti1
kkk
handleFault
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'handleUserLevelFault'. (126 of 289)
problem name Function (handleUserLevelFault) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
9
ti1
kkk
handleFault
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'handleVMFault'. (127 of 289)
problem name Function (handleVMFault) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
1
ti1
kkk
instruction'csrr_a3_stval_84010682
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
27
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
1
ti1
kkk
instruction'csrr_a3_stval_84010682
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_2214659804 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659808, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659808: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659808, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((3, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 3: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((3, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659804, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659804: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659804, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((5, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 5: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((5, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659718, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659718: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659718, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659720, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659720: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659720, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((9, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 9: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((9, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((7, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 7: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((7, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659724, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659724: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659724, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659726, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659726: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659726, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659730, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659730: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659730, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659734, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659734: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659734, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659736, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659736: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659736, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_2214659804 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((25, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 25: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((25, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659738, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659738: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659738, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_2214659804 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((27, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 27: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((27, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659740, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659740: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659740, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace offs_expr_const: not const
trace r2_after_2214659804 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659806, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
trace get_ptr_offs fallthrough at 2214659806: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214659806, ()), 'Target')), Hyp ('PCImp', ((27, ()), 'Target'), ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'False', vals = [])))]
Doing stack analysis for 'handleVMFaultEvent'. (128 of 289)
problem name Function (handleVMFaultEvent) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
5
ti1
kkk
handleVMFault
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'hasCancelSendRights'. (129 of 289)
problem name Function (hasCancelSendRights) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'idle_thread'. (130 of 289)
problem name Function (idle_thread) pairing None
trace Loop (2214658260, [2214658264, 1])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace Warning: unreachable n_vc, tag: ('Ret', ((2214658260, vc_options ([0], [1])),)), Target
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
1
ti1
kkk
instruction'wfi_840100D4
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_1_2214658260=i+1 - r2_init
trace [('r2_init', -1), ('r2_after_1_2214658260=i+1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214658264, ((2214658260, vc_options ([], [1])),)), 'Target'))]
trace get_ptr_offs fallthrough at 2214658264: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214658264, ((2214658260, vc_options ([], [1])),)), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1_2214658260=i+1 - r2_init
trace [('r2_init', -1), ('r2_after_1_2214658260=i+1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214658260, ((2214658260, vc_options ([], [1])),)), 'Target'))]
trace get_ptr_offs fallthrough at 2214658260: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214658260, ((2214658260, vc_options ([], [1])),)), 'Target'))]
trace offs_expr_const: not const
trace r2_after_loop_at_2214658260 - r2_init
trace [('r2_init', -1), ('r2_after_loop_at_2214658260', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((1, ((2214658260, vc_options ([], [1])),)), 'Target'))]
trace get_ptr_offs fallthrough at 1: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((1, ((2214658260, vc_options ([], [1])),)), 'Target'))]
Doing stack analysis for 'initIRQController'. (131 of 289)
problem name Function (initIRQController) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'initL2Cache'. (132 of 289)
problem name Function (initL2Cache) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'initLocalIRQController'. (133 of 289)
problem name Function (initLocalIRQController) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
1
ti1
kkk
instruction'csrrs_a5_sie_a5_84000986
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
1
ti1
kkk
instruction'csrrs_a5_sie_a5_84000986
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((3, ()), 'Target'))]
trace get_ptr_offs fallthrough at 3: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((3, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594954, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594954: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594954, ()), 'Target'))]
Doing stack analysis for 'initTimer'. (134 of 289)
problem name Function (initTimer) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
1
ti1
kkk
instruction'rdtime_a0_84000968
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
3
ti1
kkk
instruction'ecall_8400097A
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
1
ti1
kkk
instruction'rdtime_a0_84000968
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
3
ti1
kkk
instruction'ecall_8400097A
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((3, ()), 'Target'))]
trace get_ptr_offs fallthrough at 3: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((3, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((5, ()), 'Target'))]
trace get_ptr_offs fallthrough at 5: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((5, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594924, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594924: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594924, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594926, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594926: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594926, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594930, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594930: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594930, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594932, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594932: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594932, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594934, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594934: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594934, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594936, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594936: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594936, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_1 - r2_init
trace [('r2_init', -1), ('r2_after_1', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594938, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594938: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594938, ()), 'Target'))]
trace offs_expr_const: not const
trace r2_after_3 - r2_init
trace [('r2_init', -1), ('r2_after_3', 1)]
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594942, ()), 'Target'))]
trace get_ptr_offs fallthrough at 2214594942: Expr ('Var', Type ('Word', 64), name = 'r2')
trace [Hyp ('PCImp', ('Bool', Expr ('Op', Type ('Builtin', 'Bool'), name = 'True', vals = [])), ((2214594942, ()), 'Target'))]
Doing stack analysis for 'init_core_state'. (135 of 289)
problem name Function (init_core_state) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'init_freemem'. (136 of 289)
problem name Function (init_freemem) pairing None
trace Loop (2214602430, [2214602428, 223, 2214602440, 221, 2214602438, 2214602436, 219, 2214602434])
trace Loop (2214602384, [199, 2214602380, 2214602378, 2214602376, 205, 2214602388, 203, 2214602386, 201])
trace Loop (2214602348, [181, 2214602344, 2214602342, 187, 2214602352, 185, 2214602350, 183])
trace Loop (2214602134, [2214602172, 2214602170, 103, 2214602166, 99, 2214602162, 97, 2214602158, 2214602156, 2214602152, 95, 87, 2214602130, 83, 2214602126, 2214602124, 93, 2214602148, 91, 2214602144, 89, 2214602140, 2214602138])
trace Loop (2214602082, [71, 2214602122, 2214602120, 79, 59, 2214602078, 2214602076, 2214602074, 55, 2214602070, 77, 2214602116, 2214602112, 75, 2214602108, 73, 2214602106, 2214602068, 2214602066, 69, 2214602102, 67, 2214602100, 65, 2214602096, 2214602094, 63, 2214602092, 2214602090, 2214602086, 61])
trace Loop (2214602012, [47, 2214602022, 2214602020, 45, 2214602016, 43])
trace Loop (2214601990, [39, 2214601992])
trace Loop (2214601976, [31, 2214601978])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 337
trace done setting up input env at 337
tryinline:
131
ti1
kkk
reserve_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
137
ti1
kkk
reserve_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
143
ti1
kkk
insert_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
151
ti1
kkk
insert_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
177
ti1
kkk
reserve_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
195
ti1
kkk
insert_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
217
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
243
ti1
kkk
arch_get_n_paging
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 337
trace done setting up input env at 337
Doing stack analysis for 'init_kernel'. (137 of 289)
problem name Function (init_kernel) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 353
trace done setting up input env at 353
tryinline:
27
ti1
kkk
map_kernel_window
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 353
trace done setting up input env at 353
Doing stack analysis for 'insertNewCap'. (138 of 289)
problem name Function (insertNewCap) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'insert_region'. (139 of 289)
problem name Function (insert_region) pairing None
trace Loop (2214595292, [29, 2214595304, 2214595302, 2214595300, 27, 2214595296, 23, 2214595294, 21])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
39
ti1
kkk
reserve_region
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for "instruction'csrr_a0_scause_840141FA". (140 of 289)
Doing stack analysis for "instruction'csrr_a0_sip_84010AFC". (141 of 289)
Doing stack analysis for "instruction'csrr_a0_sip_840113B2". (142 of 289)
Doing stack analysis for "instruction'csrr_a3_stval_84010682". (143 of 289)
Doing stack analysis for "instruction'csrr_a5_sip_84010AE0". (144 of 289)
Doing stack analysis for "instruction'csrrc_a5_sie_a5_84010B14". (145 of 289)
Doing stack analysis for "instruction'csrrs_a5_sie_a5_84000986". (146 of 289)
Doing stack analysis for "instruction'csrrs_a5_sie_a5_84002872". (147 of 289)
Doing stack analysis for "instruction'csrrs_a5_sie_a5_84010B1E". (148 of 289)
Doing stack analysis for "instruction'csrw_satp_a5_840001FE". (149 of 289)
Doing stack analysis for "instruction'csrw_satp_a5_8401084A". (150 of 289)
Doing stack analysis for "instruction'csrw_satp_a5_840108A8". (151 of 289)
Doing stack analysis for "instruction'csrw_satp_a5_840108D8". (152 of 289)
Doing stack analysis for "instruction'csrw_stvec_a5_8400286A". (153 of 289)
Doing stack analysis for "instruction'ecall_8400097A". (154 of 289)
Doing stack analysis for "instruction'ecall_8401029C". (155 of 289)
Doing stack analysis for "instruction'ecall_84013A36". (156 of 289)
Doing stack analysis for "instruction'rdtime_a0_84000968". (157 of 289)
Doing stack analysis for "instruction'rdtime_a4_84013A3A". (158 of 289)
Doing stack analysis for "instruction'rdtime_a5_84013A28". (159 of 289)
Doing stack analysis for "instruction'sfence_vma_84000202". (160 of 289)
Doing stack analysis for "instruction'sfence_vma_84000680". (161 of 289)
Doing stack analysis for "instruction'sfence_vma_8400090C". (162 of 289)
Doing stack analysis for "instruction'sfence_vma_84010788". (163 of 289)
Doing stack analysis for "instruction'sfence_vma_8401080E". (164 of 289)
Doing stack analysis for "instruction'sfence_vma_8401084E". (165 of 289)
Doing stack analysis for "instruction'sfence_vma_840108AC". (166 of 289)
Doing stack analysis for "instruction'sfence_vma_840108DC". (167 of 289)
Doing stack analysis for "instruction'sfence_vma_84010A3E". (168 of 289)
Doing stack analysis for "instruction'sfence_vma_84010A54". (169 of 289)
Doing stack analysis for "instruction'sfence_vma_84015A58". (170 of 289)
Doing stack analysis for "instruction'sfence_vma_84015D5A". (171 of 289)
Doing stack analysis for "instruction'sfence_vma_zero_a0_84010972". (172 of 289)
Doing stack analysis for "instruction'unimp_84002B86". (173 of 289)
Doing stack analysis for "instruction'wfi_840100D4". (174 of 289)
Doing stack analysis for 'invokeCNodeCancelBadgedSends'. (175 of 289)
problem name Function (invokeCNodeCancelBadgedSends) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
13
ti1
kkk
cancelBadgedSends
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'invokeCNodeDelete'. (176 of 289)
problem name Function (invokeCNodeDelete) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteDelete
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
problem name Function (invokeCNodeDelete) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteDelete
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   true
trace   path_cond_to_1_Target
trace   true
trace   (word64-eq r11_after_2214670746 #x0000000000000000)
trace Result: True
trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   true
trace   path_cond_to_1_Target
trace   true
trace   (not (word64-eq r11_after_2214670746 #x0000000000000000))
trace   true
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-Tnnum0.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and (and true (not (word64-eq r11_after_2214670746 #x0000000000000000))) true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-2nTrAv.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and (and true (not (word64-eq r11_after_2214670746 #x0000000000000000))) true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-oFwjtd.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and (and true (not (word64-eq r11_after_2214670746 #x0000000000000000))) true)))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.65s elapsed, 0.01s user, 0.01s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
Doing stack analysis for 'invokeCNodeInsert'. (177 of 289)
problem name Function (invokeCNodeInsert) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteInsert
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'invokeCNodeMove'. (178 of 289)
problem name Function (invokeCNodeMove) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteMove
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'invokeCNodeRevoke'. (179 of 289)
problem name Function (invokeCNodeRevoke) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteRevoke
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'invokeCNodeRotate'. (180 of 289)
problem name Function (invokeCNodeRotate) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
23
ti1
kkk
cteMove
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
41
ti1
kkk
cteSwap
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'invokeCNodeSaveCaller'. (181 of 289)
problem name Function (invokeCNodeSaveCaller) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
tryinline:
31
ti1
kkk
cteMove
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
33
ti1
kkk
halt
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 49
trace done setting up input env at 49
Doing stack analysis for 'invokeIRQControl'. (182 of 289)
problem name Function (invokeIRQControl) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
9
ti1
kkk
setIRQState
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
Doing stack analysis for 'invokeIRQHandler_AckIRQ'. (183 of 289)
problem name Function (invokeIRQHandler_AckIRQ) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
Doing stack analysis for 'invokeIRQHandler_ClearIRQHandler'. (184 of 289)
problem name Function (invokeIRQHandler_ClearIRQHandler) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
problem name Function (invokeIRQHandler_ClearIRQHandler) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 17
trace done setting up input env at 17
tryinline:
3
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   true
trace   path_cond_to_1_Target
trace   true
trace   true
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-6rWTcb.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-p1Ymcv.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-LN4x0m.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_1_Target (and true true)))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.01s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
Doing stack analysis for 'invokeIRQHandler_SetIRQHandler'. (185 of 289)
problem name Function (invokeIRQHandler_SetIRQHandler) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
11
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
problem name Function (invokeIRQHandler_SetIRQHandler) pairing None
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 33
trace done setting up input env at 33
tryinline:
11
ti1
kkk
cteDeleteOne
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace Testing hyp whyps
trace requests = set([(('Err', ()), 'Target'), (('Ret', ()), 'Target')])
trace testing ('hyp', None):
trace   (not path_cond_to_Err_Target)
trace   true
trace   true
trace   path_cond_to_9_Target
trace   true
trace   true
trace   --> new parallel solver ('CVC4 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-uk188k.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_9_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('Yices2 (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-fStKgt.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_9_Target (and true true)))))))', '(check-sat)']
done

trace   --> new parallel solver ('SONOLAR (offline)', 'hyp', None)
['(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
/tmp/graph-refine-problem-c0UB1M.txt
solver inputs:

['(assert (not (=> (=> path_cond_to_Err_Target false) (=> (and true true) (not (and path_cond_to_9_Target (and true true)))))))', '(check-sat)']
done

trace   <-- parallel solver ('CVC4 (offline)', 'hyp', None) closed: sat
trace       after (0.66s elapsed, 0.02s user, 0.00s sys)
trace Got 'sat' from CVC4 (offline) in parallel.
trace   -- hyp refuted by CVC4 (offline)
trace  X<-- 2 parallel solvers killed: checked 'sat'
trace Result: False
Doing stack analysis for 'invokeTCB_CopyRegisters'. (186 of 289)
problem name Function (invokeTCB_CopyRegisters) pairing None
trace Loop (2214678128, [49, 2214678144, 2214678142, 47, 2214678140, 2214678138, 45, 2214678136, 2214678132, 2214678130, 43])
trace Loop (2214678080, [31, 2214678096, 2214678094, 29, 2214678092, 2214678090, 27, 2214678088, 2214678084, 2214678082, 25])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
tryinline:
73
ti1
kkk
suspend
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
75
ti1
kkk
restart
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

tryinline:
77
ti1
kkk
rescheduleRequired
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input', Type ('Word', 64))]
[('r0', Type ('Word', 64)), ('r1', Type ('Word', 64)), ('r2', Type ('Word', 64)), ('r3', Type ('Word', 64)), ('r4', Type ('Word', 64)), ('r5', Type ('Word', 64)), ('r6', Type ('Word', 64)), ('r7', Type ('Word', 64)), ('r8', Type ('Word', 64)), ('r9', Type ('Word', 64)), ('r10', Type ('Word', 64)), ('r11', Type ('Word', 64)), ('r12', Type ('Word', 64)), ('r13', Type ('Word', 64)), ('r14', Type ('Word', 64)), ('r15', Type ('Word', 64)), ('r16', Type ('Word', 64)), ('r17', Type ('Word', 64)), ('r18', Type ('Word', 64)), ('r19', Type ('Word', 64)), ('r20', Type ('Word', 64)), ('r21', Type ('Word', 64)), ('r22', Type ('Word', 64)), ('r23', Type ('Word', 64)), ('r24', Type ('Word', 64)), ('r25', Type ('Word', 64)), ('r26', Type ('Word', 64)), ('r27', Type ('Word', 64)), ('r28', Type ('Word', 64)), ('r29', Type ('Word', 64)), ('r30', Type ('Word', 64)), ('r31', Type ('Word', 64)), ('mode', Type ('Word', 64)), ('n', Type ('Builtin', 'Bool')), ('z', Type ('Builtin', 'Bool')), ('c', Type ('Builtin', 'Bool')), ('v', Type ('Builtin', 'Bool')), ('mem', Type ('Builtin', 'Mem')), ('dom', Type ('Builtin', 'Dom')), ('stack', Type ('Builtin', 'Mem')), ('dom_stack', Type ('Builtin', 'Dom')), ('clock', Type ('Word', 64)), ('ret_addr_input_ignore', Type ('Word', 64))]
kkkk

trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81
problem name Function (invokeTCB_CopyRegisters) pairing None
trace Loop (2214678128, [49, 2214678144, 2214678142, 47, 2214678140, 2214678138, 45, 2214678136, 2214678132, 2214678130, 43])
trace Loop (2214678080, [31, 2214678096, 2214678094, 29, 2214678092, 2214678090, 27, 2214678088, 2214678084, 2214678082, 25])
trace rep_graph setting up solver
['(set-option :print-success true)', '(set-option :produce-models true)', '(set-logic QF_AUFBV)', '\n(define-fun load-word8 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 8)\n\t(select m p)\n)\n', '\n(define-fun load-word16 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 16)\n\t(concat (select m (bvadd p #x0000000000000001))\n\t        (select m p)\n\t)\n)\n', '\n(define-fun load-word32 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 32)\n\t(concat (select m (bvadd p #x0000000000000003))\n\t\t(concat (select m (bvadd p #x0000000000000002))\n\t\t\t(concat (select m (bvadd p #x0000000000000001))\n\t\t\t\t\t(select m p)\n\t\t\t)\n\t\t)\n\t)\n)\n', '\n(define-fun load-word64 ((m {MemSort}) (p (_ BitVec 64)))\n\t(_ BitVec 64)\n\t(concat (load-word32 m p)\n\t\t\t(load-word32 m (bvadd p #x0000000000000004))\n\t)\n)\n', '\n(define-fun store-word8 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 8)))\n\t{MemSort}\n\t(store m p v)\n)\n', '\n(define-fun store-word16 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 16)))\n\t{MemSort}\n\t(store-word8\n\t\t(store-word8 m p ((_ extract 7 0) v))\n\t\t(bvadd p #x0000000000000001)\n\t\t((_ extract 15 8) v)\n\t)\n)\n', '\n(define-fun store-word32 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 32)))\n\t{MemSort}\n\t(store-word16\n\t\t(store-word16 m p ((_ extract 15 0) v))\n\t\t(bvadd p #x0000000000000002)\n\t\t((_ extract 31 16) v)\n\t)\n)\n', '\n(define-fun store-word64 ((m {MemSort}) (p (_ BitVec 64)) (v (_ BitVec 64)))\n\t{MemSort}\n\t(store-word32\n\t\t(store-word32 m p ((_ extract 31 0) v))\n\t\t(bvadd p #x0000000000000004)\n\t\t((_ extract 63 32) v)\n\t)\n)\n', '\n(define-fun mem-dom ((p (_ BitVec 64)) (d {MemDomSort}))\n\tBool\n\t(not (= (select d p) #b0)))\n', '\n(define-fun mem-eq ((x {MemSort}) (y {MemSort}))\n\tBool\n\t(= x y))\n', '\n(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))\n\tBool\n\t(= x y))\n', '\n(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))\n    Bool\n    (= x y))\n', '\n(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))\n\t(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))\n\tBool\n\t(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))\n', '(declare-fun unspecified-precond () Bool)']
trace rep_graph setting up solver
trace rep_graph setting up input env at 81
trace done setting up input env at 81

Traceback (most recent call last):
  File "graph-refine.py", line 33, in <module>
    args = target_objects.load_target_args()
  File "/home/yshen/tp480/work/verificatin/graph-refine/target_objects.py", line 115, in load_target_args
    load_target (target, t_args)
  File "/home/yshen/tp480/work/verificatin/graph-refine/target_objects.py", line 92, in load_target
    import target
  File "seL4-example/target.py", line 62, in <module>
    make_pairings ()
  File "seL4-example/target.py", line 59, in make_pairings
    new_pairings = stack_logic.mk_stack_pairings (pairs, stack_bounds)
  File "/home/yshen/tp480/work/verificatin/graph-refine/stack_logic.py", line 1430, in mk_stack_pairings
    stack_bounds = compute_stack_bounds (quiet = quiet)
  File "/home/yshen/tp480/work/verificatin/graph-refine/stack_logic.py", line 1369, in compute_stack_bounds
    bounds = compute_asm_stack_bounds (asm_idents, asm_fs)
  File "/home/yshen/tp480/work/verificatin/graph-refine/stack_logic.py", line 931, in compute_asm_stack_bounds
    immed = compute_immediate_stack_bounds (idents, names)
  File "/home/yshen/tp480/work/verificatin/graph-refine/stack_logic.py", line 865, in compute_immediate_stack_bounds
    callables = ident_callables (fname, fn_offs.keys (), idents)
  File "/home/yshen/tp480/work/verificatin/graph-refine/stack_logic.py", line 846, in ident_callables
    (inp_env, _, _) = rep.get_func (default_n_vc (p, n))
  File "/home/yshen/tp480/work/verificatin/graph-refine/rep_graph.py", line 866, in get_func
    self.get_node_pc_env (cont, tag = tag)
  File "/home/yshen/tp480/work/verificatin/graph-refine/rep_graph.py", line 375, in get_node_pc_env
    self.warm_pc_env_cache ((n, vcount), tag)
  File "/home/yshen/tp480/work/verificatin/graph-refine/rep_graph.py", line 413, in warm_pc_env_cache
    self.get_node_pc_env (n_vc, tag, request = False)
  File "/home/yshen/tp480/work/verificatin/graph-refine/rep_graph.py", line 375, in get_node_pc_env
    self.warm_pc_env_cache ((n, vcount), tag)
  File "/home/yshen/tp480/work/verificatin/graph-refine/rep_graph.py", line 409, in warm_pc_env_cache
    prev_chain[-10:])
AssertionError: ([(37, ()), (2214678104, ()), (35, ()), (2214678100, ()), (33, ()), (2214678096, ()), (2214678094, ()), (29, ()), (2214678092, ()), (2214678090, ())], [(27, ()), (2214678088, ()), (2214678084, ()), (2214678082, ()), (25, ()), (2214678080, ()), (31, ()), (2214678096, ()), (2214678094, ()), (29, ())])
